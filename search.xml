<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[闲谈]-2023</title>
      <link href="/2024/02/23/%E9%97%B2%E8%B0%88-2023/"/>
      <url>/2024/02/23/%E9%97%B2%E8%B0%88-2023/</url>
      
        <content type="html"><![CDATA[<h3 id="2023总结"><a href="#2023总结" class="headerlink" title="2023总结"></a>2023总结</h3><p>我总会在这个阶段简短说明下去年的想法。这年基本忙于工作，除了本职工作的技术管理之外，还花了一部分时间在摄影摄像剪辑中，因为工作需要。这年是近几年拍摄日落自然较少的一年。另外还包括室友的离别，工作的调整，居住环境的改变，又养了一只猫叫做十一……</p><p>今年独处时总有一个声音在质问我，活着的本身有什么用？既然最终都会离去，为什么要体验如此多的事情？在宏观角度中所做的一文不值。我所做的，之前有人做过，未来也还会有人走向重复的路，当然还包括其他问题。索性我并不讨厌思考，我追问只是因为想明白这些之后依旧做自己。你应该多去了解世界和事物的运作方式，即使每一个抉择都存在人们指指点点，要知道那是他们的事情，这些都不能阻止你做任何你想做的事。</p><p>许多人都自以过来人的身份，希望你活成他们内心的模样，但他们不曾想象世界上存在无数种活法，一但那些事是出乎他们的想象，便七嘴八舌蜂拥而至，我能理解，这其中有许多因素导致的。</p><p>如果我不曾有想法，那或许我只能听从别人的安排。但我有想法和目标后，是身边的人从未走过的路，我应该坚定不移选择它，尽管一路上都是各种不理解。如果把物质财富当成成功的唯一标准，我大抵是永远不会合格的。就像过年期间饭桌上一聊起天来，基本都是谈论车子房子结婚各种邻里邻居的悲惨故事。而我更想听听人们谈论自己有趣的经历，不要只关注别人的人生。</p><p>我认为变化是常态，也许几年后我看这些话，会有新的感受，但是，我知道的，现在此时，我知道做自己不那么轻松，比如留个长发回老家已经无数人可以跟我说道说道，关于结婚同样如此，不会过问你喜欢什么，只要求你选择什么。</p><p>我希望我的一生忠于记录，忠于热爱，忠于自己的内心。</p><p>我觉得我的一生是需要一点精神财富的，那些喜好能支撑我开心的活着。</p><p>“没有谁知道我是谁，没有谁知道我会成为谁，那么我就可以成为任何人。”</p>]]></content>
      
      
      <categories>
          
          <category> 闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[English]-否定句</title>
      <link href="/2023/05/05/English-%E5%90%A6%E5%AE%9A%E5%8F%A5/"/>
      <url>/2023/05/05/English-%E5%90%A6%E5%AE%9A%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是否定句？"><a href="#什么是否定句？" class="headerlink" title="什么是否定句？"></a>什么是否定句？</h1><ul><li>判断方式<ul><li>表达“不”“否”“没有”等否定意思</li></ul></li></ul><h2 id="主系表句型的否定句"><a href="#主系表句型的否定句" class="headerlink" title="主系表句型的否定句"></a>主系表句型的否定句</h2><p><strong>规则：系动词后面+not (主系表：是很在)</strong></p><ul><li>我是你哥哥<ul><li>I am <strong>(not)</strong> your brother</li></ul></li><li>她很帅<ul><li>She is <strong>(not)</strong> handsome</li></ul></li><li>你很无聊<ul><li>you are <strong>(not)</strong> boring</li></ul></li><li>这件事情很重要<ul><li>This is <strong>(not)</strong> important</li></ul></li><li>他们在那里<ul><li>They are <strong>(not)</strong> there</li></ul></li></ul><h2 id="主谓宾句型的否定句"><a href="#主谓宾句型的否定句" class="headerlink" title="主谓宾句型的否定句"></a>主谓宾句型的否定句</h2><p><strong>规则：主语后+don’t/doesn’t(主语后面动作 动词)</strong></p><ul><li>我爱你<ul><li>I <strong>(don’t)</strong> love you</li></ul></li><li>他说英语<ul><li>He <strong>(doesn’t)</strong> speak English</li></ul></li><li>我知道<ul><li>I <strong>(don’t)</strong> know</li></ul></li><li>我的小狗不喝羊奶<ul><li>My puppy <strong>(doesn’t)</strong> drink goat milk</li></ul></li><li>他们想离开你<ul><li>They <strong>(don’t)</strong> want to leave you</li></ul></li></ul><h2 id="there-be的否定句"><a href="#there-be的否定句" class="headerlink" title="there be的否定句"></a>there be的否定句</h2><p><strong>规则：there is no 没有</strong></p><ul><li>这里没有人<ul><li>there is no + person + here  </li></ul></li><li>杯子里没有水<ul><li>there is no + water + in the cup</li></ul></li><li>抽屉里没有钱<ul><li>there is no + money + in the drawer</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[English]-There be句型</title>
      <link href="/2023/05/05/English-There%20be%E5%8F%A5%E5%9E%8B/"/>
      <url>/2023/05/05/English-There%20be%E5%8F%A5%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是there-be句型？"><a href="#什么是there-be句型？" class="headerlink" title="什么是there be句型？"></a>什么是there be句型？</h1><ul><li>判断方式<ul><li>表达某个地方有…</li></ul></li></ul><h1 id="用there-be句型翻译句子"><a href="#用there-be句型翻译句子" class="headerlink" title="用there be句型翻译句子"></a>用there be句型翻译句子</h1><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><table><thead><tr><th align="left">区分</th><th align="left">表达</th></tr></thead><tbody><tr><td align="left">数量=1</td><td align="left">there is</td></tr><tr><td align="left">数量&gt;1</td><td align="left">there are</td></tr></tbody></table><ul><li>桌上 有 一台红色的电脑<ul><li>there be(有) a red  computer + on the table</li></ul></li><li>车上 有 很多人<ul><li>there be(有) + many people + on the bus</li></ul></li><li>这里 有 一些书<ul><li>there be(are) + some books + here</li></ul></li><li>那里 有 一个女孩<ul><li>there be(is) + a girl + here</li></ul></li><li>床上 有 一只小狗<ul><li>there be(is) a + puppy + on the bad</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[English]-主系表句型</title>
      <link href="/2023/05/03/English-%E4%B8%BB%E7%B3%BB%E8%A1%A8%E5%8F%A5%E5%9E%8B/"/>
      <url>/2023/05/03/English-%E4%B8%BB%E7%B3%BB%E8%A1%A8%E5%8F%A5%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是主谓宾句型？"><a href="#什么是主谓宾句型？" class="headerlink" title="什么是主谓宾句型？"></a>什么是主谓宾句型？</h1><ul><li>判断方式<ul><li>是/很/在</li></ul></li></ul><h1 id="用主谓宾句型翻译句子"><a href="#用主谓宾句型翻译句子" class="headerlink" title="用主谓宾句型翻译句子"></a>用主谓宾句型翻译句子</h1><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><table><thead><tr><th align="left">主语</th><th align="left">系动词</th></tr></thead><tbody><tr><td align="left">我</td><td align="left">am</td></tr><tr><td align="left">你</td><td align="left">are</td></tr><tr><td align="left">他/她/它</td><td align="left">is</td></tr><tr><td align="left">数量为1</td><td align="left">is</td></tr><tr><td align="left">数量大于1</td><td align="left">are</td></tr></tbody></table><ul><li>他 是 中国人<ul><li>He is Chinese</li></ul></li><li>我 很 累<ul><li>I am tired</li></ul></li><li>我 在 家<ul><li>I am at home</li></ul></li><li>她 在 路上<ul><li>She is on the way</li></ul></li><li>它 很 可爱<ul><li>It is cute</li></ul></li><li>这 是 我的妈妈<ul><li>This is my mon</li></ul></li><li>这 很 有趣<ul><li>This is interesting</li></ul></li><li>英语和数学很简单<ul><li>English and Math are easy</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[English]-主谓宾句型</title>
      <link href="/2023/05/03/English-%E4%B8%BB%E8%B0%93%E5%AE%BE%E5%8F%A5%E5%9E%8B/"/>
      <url>/2023/05/03/English-%E4%B8%BB%E8%B0%93%E5%AE%BE%E5%8F%A5%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是主谓宾句型？"><a href="#什么是主谓宾句型？" class="headerlink" title="什么是主谓宾句型？"></a>什么是主谓宾句型？</h1><ul><li>主语后面是“动作（动词）”<ul><li>看、跑、吃、喝…</li><li>想、爱、思念、决定…</li></ul></li></ul><h1 id="用主谓宾句型翻译句子"><a href="#用主谓宾句型翻译句子" class="headerlink" title="用主谓宾句型翻译句子"></a>用主谓宾句型翻译句子</h1><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><pre><code>- 主语-句子开头的词语 主语后面是动作/动词 主谓宾</code></pre><table><thead><tr><th align="left">主语</th><th align="left">谓语动词</th></tr></thead><tbody><tr><td align="left">我</td><td align="left">不变</td></tr><tr><td align="left">你</td><td align="left">不变</td></tr><tr><td align="left">他/她/它</td><td align="left">变 + s</td></tr><tr><td align="left">数量为1</td><td align="left">变 + s</td></tr><tr><td align="left">数量大于1</td><td align="left">不变</td></tr></tbody></table><ul><li>我爱你<ul><li>I + live + you</li></ul></li><li>他爱你<ul><li>he +lives + you</li></ul></li><li>你吃米饭<ul><li>you + eat + rice</li></ul></li><li>这个人吃面条<ul><li>this + person + eats + noodles  </li></ul></li><li>我跑步<ul><li>I + run</li></ul></li><li>他们跑步<ul><li>they + run </li></ul></li><li>她跑步<ul><li>she + runs</li></ul></li><li>我的妈妈吃饭<ul><li>my mom eats rice</li></ul></li><li>Tom吃米饭<ul><li>Tom eat rice</li></ul></li></ul><h1 id="宾语存在动词需变形"><a href="#宾语存在动词需变形" class="headerlink" title="宾语存在动词需变形"></a>宾语存在动词需变形</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><pre><code>- 前 to 后 ing</code></pre><ul><li>我爱吃面条<ul><li>I live eating noodles</li></ul></li><li>他爱吃面条<ul><li>he live eating noodles</li></ul></li><li>你喜欢吃米饭<ul><li>you like eating rice</li></ul></li><li>这个人喜欢睡觉<ul><li>this person likes sleeping</li></ul></li><li>我想离开这里<ul><li>I want to leave here</li></ul></li><li>他们决定乘坐大巴<ul><li>they decide to take a bus</li></ul></li><li>她拒绝帮助你<ul><li>she refuses to help you</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]Nginx个人常用命令整理</title>
      <link href="/2022/06/24/Other-Nginx%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2022/06/24/Other-Nginx%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><code>nginx -t  检查配置是否正确</code></p><p><code>nginx -s reload 重新加载配置信息</code></p><pre><code>server {    listen 80;    server_name www.xxx.com    location / {    alias /path/;}</code></pre><pre><code>server {    listen 80;    server_name www.xxx.com    location / {    proxy_pass http://127.0.0.1:8088}</code></pre><pre><code># HTTPSserver {    listen 443 ssl;    index index.html index.htm index.php;    server_name www.xxx.com;    ssl_certificate /xxxxxx.pem;    ssl_certificate_key /xxxxxx.key;    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;    location / {    proxy_pass http://127.0.0.1:8088;   }}</code></pre><pre><code># ios Swift 通用链接(Universal Links)location / {    charset UTF-8;    default_type text/html;    return 200 &#39;{&quot;applinks&quot;:{&quot;apps&quot;:[],&quot;details&quot;:[{&quot;appID&quot;:&quot;xxxxxxxxxx&quot;,&quot;paths&quot;:[&quot;*&quot;]}]}}&#39;;    }}</code></pre><pre><code>#重定向server {      listen 80;      server_name www.xxx.com;      rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。      location / {        proxy_pass http://127.0.0.1:8088;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]-中文根据拼音首字母排序</title>
      <link href="/2021/03/22/JAVA-%E4%B8%AD%E6%96%87%E6%A0%B9%E6%8D%AE%E6%8B%BC%E9%9F%B3%E9%A6%96%E5%AD%97%E6%AF%8D%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/03/22/JAVA-%E4%B8%AD%E6%96%87%E6%A0%B9%E6%8D%AE%E6%8B%BC%E9%9F%B3%E9%A6%96%E5%AD%97%E6%AF%8D%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>有些用户列表/品种列表等，常用A,B,C作为名称的搜索条件。</strong></p><p>依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.belerweb&lt;/groupId&gt;    &lt;artifactId&gt;pinyin4j&lt;/artifactId&gt;    &lt;version&gt;2.5.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>工具类</p><pre><code>public class PinYinUtils {    /**     * 获取汉字对应的拼音     *     * @param chinese 汉字串     * @return     */    public static String getFullSpell(String chinese) {        StringBuffer bf = new StringBuffer();        char[] arr = chinese.toCharArray();        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();        defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);        for (int i = 0; i &lt; arr.length; i++) {            if (arr[i] &gt; 128) {                try {                    bf.append(PinyinHelper.toHanyuPinyinStringArray(arr[i], defaultFormat)[0]);                } catch (BadHanyuPinyinOutputFormatCombination e) {                    e.printStackTrace();                }            } else {                bf.append(arr[i]);            }        }        return bf.toString();    }}</code></pre><p>将查询的数据，重新进行处理</p><pre><code>    /**     * 封装根据拼音首字母的数据     *     * @param data     * @return     */    private List&lt;Map&lt;String, Object&gt;&gt; getPinYinData(List&lt;CpPetKind&gt; data) {        List&lt;Map&lt;String, Object&gt;&gt; list = new LinkedList&lt;&gt;();        for (int i = 1; i &lt;= 26; i++) {            // 大写            String big = String.valueOf((char) (96 + i)).toUpperCase();            // 小写            String little = big.toLowerCase();            List&lt;CpPetKind&gt; initialsList = new LinkedList&lt;&gt;();            for (int j = 0; j &lt; data.size() - 1; j++) {                CpPetKind petKind = data.get(j);                String initials = PinYinUtils.getFullSpell(petKind.getBreed()).substring(0, 1);                if (big.equals(initials) || little.equals(initials)) {                    initialsList.add(petKind);                }            }            Map&lt;String, Object&gt; tempMap = new HashMap&lt;&gt;();            tempMap.put(&quot;initials&quot;, big);            tempMap.put(&quot;kinds&quot;, initialsList);            list.add(tempMap);        }        return list;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]-视频url获取指定帧数的图片</title>
      <link href="/2021/03/17/JAVA-%E8%A7%86%E9%A2%91url%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%B8%A7%E6%95%B0%E7%9A%84%E5%9B%BE%E7%89%87/"/>
      <url>/2021/03/17/JAVA-%E8%A7%86%E9%A2%91url%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%B8%A7%E6%95%B0%E7%9A%84%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p><strong>通过视频地址，获取指定N帧的图片，并且上传到阿里云oss</strong></p><p>参考地址：<a href="http://www.fixbbs.com/p/01439272.html" target="_blank" rel="noopener">http://www.fixbbs.com/p/01439272.html</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;    &lt;artifactId&gt;javacv&lt;/artifactId&gt;    &lt;version&gt;1.4.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.bytedeco.javacpp-presets&lt;/groupId&gt;    &lt;artifactId&gt;ffmpeg-platform&lt;/artifactId&gt;    &lt;version&gt;4.0.2-1.4.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;    &lt;version&gt;RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><pre><code>    @Override    public Response upload(MultipartFile file) {        if (file == null) {            return Response.fail().message(&quot;缺少必要参数！&quot;);        }        //获取文件名加后缀        String fileName = file.getOriginalFilename();        if (fileName == null) {            return Response.fail().message(&quot;上传异常！&quot;);        }        //获取文件后缀        String suffix = &quot;&quot;;        int index = fileName.lastIndexOf(&quot;.&quot;);        if (index &gt; 0) {            suffix = file.getOriginalFilename().substring(index, fileName.length());        }        String contentType = file.getContentType();        String resources = ALYConstants.OSS_PUBLIC_PICTURE + &quot;other/&quot;;        if (contentType != null) {            if (contentType.contains(&quot;video&quot;)) {                resources = ALYConstants.OSS_PUBLIC_PICTURE + &quot;video/&quot;;            } else if (contentType.contains(&quot;image&quot;)) {                resources = ALYConstants.OSS_PUBLIC_PICTURE + &quot;image/&quot;;                if (StringUtils.isBlank(suffix)) {                    suffix = &quot;.jpg&quot;;                }            }        }        //组合新的文件名        String imgName = DateUtils.dateTimeNow() + &quot;-&quot; + IdUtils.fastSimpleUUID() + suffix;        resources = resources + DateUtils.dateTime() + &quot;/&quot;;        try {            boolean state = this.oss(file.getBytes(), resources + imgName);            if (!state) {                return Response.fail().message(&quot;文件上传失败！&quot;);            }        } catch (IOException e) {            log.error(&quot;【oss上传资源异常，异常信息：[{}]】&quot;, e.getMessage());        }        String url = ALYConstants.OSS_STATIC_MAIN_LINK + resources + imgName;        this.insert(file, url, imgName, suffix, contentType);        return Response.ok().content(new JSONObject() {{            put("url", url);        }});    }    @Override    public String videoToImage(String url) throws Exception {        String targetFilePath = &quot;&quot;;        FFmpegFrameGrabber grabber = FFmpegFrameGrabber.createDefault(url);        grabber.start();        //判断是否是竖屏小视频        String rotate = grabber.getVideoMetadata(&quot;rotate&quot;);        int lengthInFrames = grabber.getLengthInFrames();        Frame frame;        int i = 0;        int index = 3;//截取图片第几帧        while (i &lt; lengthInFrames) {            frame = grabber.grabImage();            if (i == index) {                if (null != rotate &amp;&amp; rotate.length() &gt; 1) {                    targetFilePath = doExecuteFrame(frame, true);   //获取缩略图                } else {                    targetFilePath = doExecuteFrame(frame, false);   //获取缩略图                }                break;            }            i++;        }        grabber.stop();        return targetFilePath;  //返回的是视频第N帧    }    private void insert(MultipartFile file, String url, String newName, String suffix, String contentType) {        String memberId = memberService.infoId();        CpFile cpFile = new CpFile();        cpFile.setId(IdUtils.getSnowFlakeId());        cpFile.setMemberId(memberId);        cpFile.setName(file.getOriginalFilename());        cpFile.setNewName(newName);        cpFile.setUrl(url);        cpFile.setType(contentType);        cpFile.setSize(file.getSize());        cpFile.setSuffix(suffix);        cpFile.setCreateTime(DateUtils.getNowDate());        this.baseMapper.insert(cpFile);        log.info(&quot;【文件上传，上传用户：[{}]，地址：[{}]】&quot;, memberId, url);    }    private boolean oss(byte[] file, String name) {        String oss = ALYConstants.OSS_STATIC_POSITION;        String endpoint = ALYConstants.OSS_ENDPOINT;        String accessKeyId = ALYConstants.OSS_ACCESS_KEY;        String accessKeySecret = ALYConstants.OSS_ACCESS_SECRET;        try {            //创建OSSClient实例。            OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);            //传Byte数组。            ossClient.putObject(oss, name, new ByteArrayInputStream(file));            //关闭OSSClient。            ossClient.shutdown();            return true;        } catch (Exception e) {            log.error(&quot;【文件上传失败，错误信息：[{}]】&quot;, e.getMessage());        }        return false;    }    /**     * 截取缩略图，存入阿里云OSS（按自己的上传类型自定义转换文件格式）     *     * @return 图片地址     * @throws Exception     */    public String doExecuteFrame(Frame f, boolean direction) throws Exception {        if (null == f || null == f.image) {            return &quot;&quot;;        }        Java2DFrameConverter converter = new Java2DFrameConverter();        BufferedImage bi = converter.getBufferedImage(f);        if (direction) {            Image image = (Image) bi;            bi = rotate(image, 90);//图片旋转90度        }        ByteArrayOutputStream os = new ByteArrayOutputStream();        ImageIO.write(bi, &quot;png&quot;, os);        InputStream input = new ByteArrayInputStream(os.toByteArray());        MultipartFile multipartFile = new MockMultipartFile(&quot;temp.jpg&quot;, &quot;temp.jpg&quot;, &quot;temp.jpg&quot;, input);        Response data = this.upload(multipartFile);        Object content = data.getContent();        return JSONObject.parseObject(String.valueOf(content)).getString(&quot;url&quot;);    }    /**     * 图片旋转角度     *     * @param src   源图片     * @param angel 角度     * @return 目标图片     */    public static BufferedImage rotate(Image src, int angel) {        int src_width = src.getWidth(null);        int src_height = src.getHeight(null);        // calculate the new image size        Rectangle rectangle = CalcRotatedSize(new Rectangle(new Dimension(                src_width, src_height)), angel);        BufferedImage res;        res = new BufferedImage(rectangle.width, rectangle.height,                BufferedImage.TYPE_INT_RGB);        Graphics2D g2 = res.createGraphics();        // transform(这里先平移、再旋转比较方便处理；绘图时会采用这些变化，绘图默认从画布的左上顶点开始绘画，源图片的左上顶点与画布左上顶点对齐，然后开始绘画，修改坐标原点后，绘画对应的画布起始点改变，起到平移的效果；然后旋转图片即可)        //平移（原理修改坐标系原点，绘图起点变了，起到了平移的效果，如果作用于旋转，则为旋转中心点）        g2.translate((rectangle.width - src_width) / 2, (rectangle.height - src_height) / 2);        // 旋转（原理transalte(dx,dy)-&gt;rotate(radians)-&gt;transalte(-dx,-dy);修改坐标系原点后，旋转90度，然后再还原坐标系原点为(0,0),但是整个坐标系已经旋转了相应的度数 ）        g2.rotate(Math.toRadians(angel), src_width / 2, src_height / 2);        // 先旋转（以目标区域中心点为旋转中心点，源图片左上顶点对准目标区域中心点，然后旋转）        // g2.translate(rect_des.width/2,rect_des.height/ 2);        // g2.rotate(Math.toRadians(angel));        // 再平移（原点恢复到源图的左上顶点处（现在的右上顶点处），否则只能画出1/4）        // g2.translate(-src_width/2,-src_height/2);        g2.drawImage(src, null, null);        return res;    }    /**     * 计算转换后目标矩形的宽高     *     * @param src   源矩形     * @param angel 角度     * @return 目标矩形     */    private static Rectangle CalcRotatedSize(Rectangle src, int angel) {        double cos = Math.abs(Math.cos(Math.toRadians(angel)));        double sin = Math.abs(Math.sin(Math.toRadians(angel)));        int des_width = (int) (src.width * cos) + (int) (src.height * sin);        int des_height = (int) (src.height * cos) + (int) (src.width * sin);        return new java.awt.Rectangle(new Dimension(des_width, des_height));    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]跨域解决方法</title>
      <link href="/2020/04/01/JAVA-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/01/JAVA-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>前后端交互出现跨域错误</strong></p><p>error</p><pre><code>home:1 Access to XMLHttpRequest at &#39;http://127.0.0.1:8080/article/list?start=1&amp;limit=5&#39; from origin &#39;http://localhost:4200&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></pre><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="一、-CrossOrigin"><a href="#一、-CrossOrigin" class="headerlink" title="一、@CrossOrigin"></a>一、@CrossOrigin</h2><p>该注解可使用在类或者方法上，针对性的解决部分接口的跨域问题。</p><h2 id="二、拦截器（全局）"><a href="#二、拦截器（全局）" class="headerlink" title="二、拦截器（全局）"></a>二、拦截器（全局）</h2><pre><code>@Configurationpublic class WebMvcConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(&quot;/**&quot;)                .allowedOrigins(&quot;*&quot;)                .allowedMethods(&quot;POST&quot;, &quot;GET&quot;, &quot;PUT&quot;, &quot;OPTIONS&quot;, &quot;DELETE&quot;)                .maxAge(3600)                .allowCredentials(true);    }}</code></pre><h2 id="三、CorsFilter（全局）"><a href="#三、CorsFilter（全局）" class="headerlink" title="三、CorsFilter（全局）"></a>三、CorsFilter（全局）</h2><pre><code>@Configurationpublic class CrossDomainConfig {    @Bean    public CorsFilter corsFilter() {        //1.添加CORS配置信息        CorsConfiguration config = new CorsConfiguration();        //放行哪些原始域        config.addAllowedOrigin(&quot;*&quot;);        //是否发送Cookie信息        config.setAllowCredentials(true);        //放行哪些原始域(请求方式)        config.addAllowedMethod(&quot;*&quot;);        //放行哪些原始域(头部信息)        config.addAllowedHeader(&quot;*&quot;);        //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）        config.addExposedHeader(&quot;content-type&quot;);        //2.添加映射路径        UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();        configSource.registerCorsConfiguration(&quot;/**&quot;, config);        //3.返回新的CorsFilter.        return new CorsFilter(configSource);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]Linux个人常用命令整理</title>
      <link href="/2020/03/29/Other-Linux%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/29/Other-Linux%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1、查看整体机器性能"><a href="#1、查看整体机器性能" class="headerlink" title="1、查看整体机器性能"></a>1、查看整体机器性能</h2><p>   top</p><pre><code>    --1.1 cpu    --1.2 mem    --1.3 id = idle 空闲率(越大越好)    --1.4 load average 系统负载率(后面三个值分别是1分钟5分钟15分钟的平均负载                        如果这三个值相加除三乘百分之百高于60说明系统负担重，                        高于80说明要gg了)</code></pre><h2 id="2、低配版查看整机性能"><a href="#2、低配版查看整机性能" class="headerlink" title="2、低配版查看整机性能"></a>2、低配版查看整机性能</h2><p>uptime</p><pre><code>    --19:21:23 up 17 min,  2 users,  load average: 0.00, 0.00, 0.00</code></pre><h2 id="3、内存"><a href="#3、内存" class="headerlink" title="3、内存"></a>3、内存</h2><p>free</p><pre><code>    --free -m</code></pre><h2 id="4、硬盘"><a href="#4、硬盘" class="headerlink" title="4、硬盘"></a>4、硬盘</h2><p>df</p><pre><code>    --df -h</code></pre><h2 id="5、cpu"><a href="#5、cpu" class="headerlink" title="5、cpu"></a>5、cpu</h2><p>vmstat(包含但不限于)</p><pre><code>--[root@contOS-1 ~]# vmstat -n 2 3procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 0  0      0 904864  27448  39636    0    0    50     4   22   28  0  1 99  0  0     0  0      0 904848  27448  39632    0    0     0     0   14   13  0  0 100  0  0     0  0      0 904848  27448  39632    0    0     0     0   15   13  0  0 100  0  0    </code></pre><h2 id="6、磁盘-io高很大可能写了大sql"><a href="#6、磁盘-io高很大可能写了大sql" class="headerlink" title="6、磁盘(io高很大可能写了大sql)"></a>6、磁盘(io高很大可能写了大sql)</h2><p>iostat</p><pre><code>    --iostat -xdk 2 3        --r/s     w/s 每s读写</code></pre><p>——————–以上源于周阳哥讲解，我总结的笔记</p><hr><p>其他</p><h2 id="1、获取线程总数"><a href="#1、获取线程总数" class="headerlink" title="1、获取线程总数"></a>1、获取线程总数</h2><pre><code>pstree -p 22704|wc -l</code></pre><h2 id="2、linux相关的参数"><a href="#2、linux相关的参数" class="headerlink" title="2、linux相关的参数"></a>2、linux相关的参数</h2><pre><code>ulimit -a</code></pre><h2 id="3、Logstash"><a href="#3、Logstash" class="headerlink" title="3、Logstash"></a>3、Logstash</h2><pre><code>systemctl start|restart|stop elasticsearch</code></pre><h2 id="4、nginx日志情况"><a href="#4、nginx日志情况" class="headerlink" title="4、nginx日志情况"></a>4、nginx日志情况</h2><pre><code>grep &#39;&quot;responsetime&quot;:2.&#39; /usr/local/nginx/logs/access.log</code></pre><h2 id="5、java堆栈分析"><a href="#5、java堆栈分析" class="headerlink" title="5、java堆栈分析"></a>5、java堆栈分析</h2><pre><code>进程十六进制值printf &quot;%x\n&quot; 22414jstack -l PID &gt; jstack.log</code></pre><blockquote><p>dump 文件里，值得关注的线程状态有：</p><p>死锁，Deadlock（重点关注）</p><p>执行中，Runnable </p><p>等待资源，Waiting on condition（重点关注）</p><p>等待获取监视器，Waiting on monitor entry（重点关注）</p><p>暂停，Suspended</p><p>对象等待中，Object.wait() 或 TIMED_WAITING</p><p>阻塞，Blocked（重点关注） </p><p>停止，Parked</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]Hystrix断路器</title>
      <link href="/2020/03/27/Cloud-Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
      <url>/2020/03/27/Cloud-Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h1><blockquote><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，</p><p>Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p></blockquote><hr><h1 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h1><p>服务降级：服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p>服务熔断：类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p><p>服务限流：秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]8-OpenFeign</title>
      <link href="/2020/03/22/Cloud-8-OpenFeign/"/>
      <url>/2020/03/22/Cloud-8-OpenFeign/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。<br>它的使用方法是定义一个服务接口然后在上面添加注解即可。</p></blockquote><p>github: <a href="https://github.com/spring-cloud/spring-cloud-openfeign" target="_blank" rel="noopener">点击访问</a></p><h2 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h2><blockquote><p>可以在使编写Java Http客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。</p></blockquote><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="新建cloud-comsumer-fegin-order80"><a href="#新建cloud-comsumer-fegin-order80" class="headerlink" title="新建cloud-comsumer-fegin-order80"></a>新建cloud-comsumer-fegin-order80</h3><p>pom新增</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><pre><code>server:  port: 80eureka:  client:    register-with-eureka: false   #是否将自己注册到注册中心,集群必须设置为true配合ribbon    service-url:      #defaultZone: http://localhost:7001/eureka      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/  #集群版</code></pre><h3 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h3><p>@EnableFeignClients</p><pre><code>@SpringBootApplication@EnableFeignClientspublic class OrderFeignMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderFeignMain80.class, args);    }}</code></pre><h3 id="业务类编写"><a href="#业务类编写" class="headerlink" title="业务类编写"></a>业务类编写</h3><p><strong>定义一个feign接口</strong></p><pre><code>@Configuration@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)public interface PaymentFeignService {    @GetMapping(value = &quot;/payment/get/{id}&quot;)    CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(&quot;id&quot;) Long id);}</code></pre><p><strong>controller</strong></p><pre><code>@RestController@Slf4jpublic class OrderFeignController {    @Resource    private PaymentFeignService paymentFeignService;    @GetMapping(value = &quot;/consumer/payment/get/{id}&quot;)    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(&quot;id&quot;) Long id) {        return paymentFeignService.getPaymentById(id);    }}</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问 <a href="http://127.0.0.1/consumer/payment/get/1" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/get/1</a> 即可发现跟前面写的Ribbon+RestTemplate效果一致。</p><hr><h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h2><p>cloud-provider-payment8001服务新增接口，同时cloud-comsumer-fegin-order80服务的PaymentFeignService接口和controller同样添加调用。</p><pre><code>    @GetMapping(&quot;/payment/feign/timeout&quot;)    public String paymentFeignTimeOut(){        //测试OpenFeign超时        try {            TimeUnit.SECONDS.sleep(3);        }catch (InterruptedException e){            e.printStackTrace();        }        return serverPort;    }</code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>访问<a href="http://127.0.0.1:8001/payment/feign/timeout" target="_blank" rel="noopener">http://127.0.0.1:8001/payment/feign/timeout</a> -正常</p><p>访问<a href="http://127.0.0.1/consumer/payment/feign/timeout" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/feign/timeout</a> -超时</p><pre><code>connect timed out executing GET http://CLOUD-PAYMENT-SERVICE/payment/feign/timeoutfeign.RetryableException: connect timed out executing GET http://CLOUD-PAYMENT-SERVICE/payment/feign/timeout    at feign.FeignException.errorExecuting(FeignException.java:213)</code></pre><h3 id="超时解决配置"><a href="#超时解决配置" class="headerlink" title="超时解决配置"></a>超时解决配置</h3><pre><code>#设置feign客户端超时时间ribbon:  #指的是建立连接后从服务器读取到可用资源所用的时间  ReadTimeout: 5000  #指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间  ConnectTimeout: 5000</code></pre><hr><h2 id="OpenFeign日志增强"><a href="#OpenFeign日志增强" class="headerlink" title="OpenFeign日志增强"></a>OpenFeign日志增强</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><blockquote><p>NONE：默认的，不显示任何日志；</p><p>BASIC：仅记录请求方法、URL、响应状态码及执行时间；</p><p>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息；</p><p>FULL：除了HEADERS中定义的信息之外，还有请求和响的正文及元数据。</p></blockquote><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><pre><code>@Configurationpublic class FeignConfig {    @Bean    Logger.Level feignLoggerLevel(){        return Logger.Level.FULL;    }}</code></pre><h3 id="yml-1"><a href="#yml-1" class="headerlink" title="yml"></a>yml</h3><pre><code>logging:  level:    #以什么级别监控哪个接口    xyz.zx21.springcloud.service.PaymentFeignService: debug</code></pre><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>访问 <a href="http://127.0.0.1/consumer/payment/get/1" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/get/1</a></p><p>控制台输出日志</p><pre><code>2020-03-22 19:46:33.369 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] ---&gt; GET http://CLOUD-PAYMENT-SERVICE/payment/get/1 HTTP/1.12020-03-22 19:46:33.370 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] ---&gt; END HTTP (0-byte body)2020-03-22 19:46:33.376 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] &lt;--- HTTP/1.1 200 (6ms)2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] connection: keep-alive2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] content-type: application/json2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] date: Sun, 22 Mar 2020 11:46:33 GMT2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] keep-alive: timeout=602020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] transfer-encoding: chunked2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] 2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] {&quot;code&quot;:200,&quot;message&quot;:&quot;查询成功,serverPort: 8001&quot;,&quot;data&quot;:{&quot;id&quot;:1,&quot;serial&quot;:&quot;小信&quot;}}2020-03-22 19:46:33.377 DEBUG 3496 --- [p-nio-80-exec-2] x.z.s.service.PaymentFeignService        : [PaymentFeignService#getPaymentById] &lt;--- END HTTP (88-byte body)</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]7-Ribbon相关</title>
      <link href="/2020/03/22/Cloud-7-Ribbon%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/03/22/Cloud-7-Ribbon%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。<br>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p></blockquote><p><strong>负载均衡+ResTemplate调用</strong></p><h2 id="IRule"><a href="#IRule" class="headerlink" title="IRule"></a>IRule</h2><p>特定算法：</p><pre><code>com.netflix.loadbalancer.RoundRobinRule -轮询com.netflix.loadbalancer.RandomRule-随机com.netflix.loadbalance.RetryRule-先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试WeightedResponseTimeRule-对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择BestAvailableRule-会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务AvailabilityFilteringRule-先过滤掉故障实例，再选择并发较小的实例ZoneAvoidanceRule-默认规则，复合判断server所在区域的性能和server的可用性选择服务器</code></pre><hr><h1 id="Ribbon负载"><a href="#Ribbon负载" class="headerlink" title="Ribbon负载"></a>Ribbon负载</h1><h2 id="负载规则替换"><a href="#负载规则替换" class="headerlink" title="负载规则替换"></a>负载规则替换</h2><p>注意：这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p><h3 id="新建MySelfRule类"><a href="#新建MySelfRule类" class="headerlink" title="新建MySelfRule类"></a>新建MySelfRule类</h3><pre><code>@Configurationpublic class MySelfRule {    @Bean    public IRule myRule() {        //定义为随机        return new RandomRule();        }}</code></pre><h3 id="修改主启动类"><a href="#修改主启动类" class="headerlink" title="修改主启动类"></a>修改主启动类</h3><p>添加注解@RibbonClient</p><pre><code>@SpringBootApplication@EnableEurekaClient@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)public class OrderMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderMain80.class, args);    }}</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://127.0.0.1/consumer/payment/getForEntity/1" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/getForEntity/1</a> ,这个时候轮询变成了随机。</p><h2 id="负载轮询算法"><a href="#负载轮询算法" class="headerlink" title="负载轮询算法"></a>负载轮询算法</h2><pre><code>负载轮询算法：rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。</code></pre><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>RoundRobinRule</p><pre><code>    public Server choose(ILoadBalancer lb, Object key) {        if (lb == null) {            log.warn(&quot;no load balancer&quot;);            return null;        }        Server server = null;        int count = 0;        while (server == null &amp;&amp; count++ &lt; 10) {            List&lt;Server&gt; reachableServers = lb.getReachableServers();            List&lt;Server&gt; allServers = lb.getAllServers();            int upCount = reachableServers.size();            int serverCount = allServers.size();            if ((upCount == 0) || (serverCount == 0)) {                log.warn(&quot;No up servers available from load balancer: &quot; + lb);                return null;            }            int nextServerIndex = incrementAndGetModulo(serverCount);            server = allServers.get(nextServerIndex);            if (server == null) {                /* Transient. */                Thread.yield();                continue;            }            if (server.isAlive() &amp;&amp; (server.isReadyToServe())) {                return (server);            }            // Next.            server = null;        }        if (count &gt;= 10) {            log.warn(&quot;No available alive servers after 10 tries from load balancer: &quot;                    + lb);        }        return server;    }</code></pre><h2 id="手写轮询算法"><a href="#手写轮询算法" class="headerlink" title="手写轮询算法"></a>手写轮询算法</h2><h3 id="8001-8002"><a href="#8001-8002" class="headerlink" title="8001/8002"></a>8001/8002</h3><p>controller添加如下,方便测试。</p><pre><code>    @GetMapping(value = &quot;/payment/lb&quot;)    public String getPaymentLB(){        return serverPort;    }</code></pre><h3 id="注释掉消费端的-LoadBalanced"><a href="#注释掉消费端的-LoadBalanced" class="headerlink" title="注释掉消费端的@LoadBalanced"></a>注释掉消费端的@LoadBalanced</h3><p>测试自己写的负载均衡是否生效。</p><h3 id="定义接口LoadBalance"><a href="#定义接口LoadBalance" class="headerlink" title="定义接口LoadBalance"></a>定义接口LoadBalance</h3><pre><code>public interface LoadBalance {    ServiceInstance instance(List&lt;ServiceInstance&gt; serviceInstances);}</code></pre><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><pre><code>@Componentpublic class MyLB implements LoadBalance {    private AtomicInteger atomicInteger = new AtomicInteger(0);    public final int getAndIncrement() {        int current;        int next;        do {            current = this.atomicInteger.get();            next = current &gt;= 2147483647 ? 0 : current + 1;        } while (!this.atomicInteger.compareAndSet(current, next)); //CAS        System.out.println(&quot;*****第几次访问，次数next: &quot; + next);        return next;    }    @Override    public ServiceInstance instance(List&lt;ServiceInstance&gt; serviceInstances) {        int index = getAndIncrement() % serviceInstances.size();        return serviceInstances.get(index);    }}</code></pre><h3 id="修改controller"><a href="#修改controller" class="headerlink" title="修改controller"></a>修改controller</h3><pre><code>    @Resource    private RestTemplate restTemplate;    @Resource    private LoadBalance loadBalance;    @Resource    private DiscoveryClient discoveryClient;    @GetMapping(&quot;/consumer/payment/lb&quot;)    public String getPaymentLB() {        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);        if (instances == null || instances.size() &lt;= 0) {            return null;        }        ServiceInstance serviceInstance = loadBalance.instance(instances);        URI uri = serviceInstance.getUri();        return restTemplate.getForObject(uri + &quot;/payment/lb&quot;, String.class);    }</code></pre><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://localhost//consumer/payment/lb" target="_blank" rel="noopener">http://localhost//consumer/payment/lb</a> ，发现每次访问端口都在变化。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]6-三个注册中心异同点</title>
      <link href="/2020/03/21/Cloud-6-%E4%B8%89%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%BC%82%E5%90%8C%E7%82%B9/"/>
      <url>/2020/03/21/Cloud-6-%E4%B8%89%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%BC%82%E5%90%8C%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h1><p>|组件名|语言|CAP|服务健康检查|对外暴露接口|<br>|:—–  |:—–|:—–<br>|Eureka |Java|AP|可配支持|HTTP|<br>|Consul |Go|CP|支持|HTTP/DNS|<br>|ZooKeeper |java|CP|支持|客户端</p><h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><p>CAP理论关注粒度是数据，而不是整体系统设计的策略</p><blockquote><p><strong>C:Consistency（强一致性）</strong></p></blockquote><blockquote><p><strong>A:Availability（可用性）</strong></p></blockquote><blockquote><p><strong>P:Partition tolerance（分区容错性）</strong></p></blockquote><p>最多只能同时较好的满足两个。<br>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据 CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类： </p><p>CA-单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</p><p>CP-满足一致性，分区容忍性的系统，通常性能不是特别高。</p><p>AP-满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]5-集成Consul</title>
      <link href="/2020/03/21/Cloud-5-%E9%9B%86%E6%88%90Consul/"/>
      <url>/2020/03/21/Cloud-5-%E9%9B%86%E6%88%90Consul/</url>
      
        <content type="html"><![CDATA[<h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><p>下载地址：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">点击</a></p><p>我用windows测试的，解压有一个exe程序， cmd</p><p>启动：<strong>consul agent -dev</strong></p><p>访问：<strong><a href="http://127.0.0.1:8500/ui/dc1/services" target="_blank" rel="noopener">http://127.0.0.1:8500/ui/dc1/services</a></strong></p><hr><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>新增cloud-provider-payment8006</p><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><pre><code>server:  port: 8006# 服务别名---consul注册中心名称spring:  application:    name: consul-provider-payment  cloud:    consul:      host: localhost      port: 8500      discovery:        service-name: ${spring.application.name}</code></pre><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><pre><code>@RestController@Slf4jpublic class PaymentController {    @Value(&quot;${server.port}&quot;)    private String serverPort;    @GetMapping(value = &quot;/payment/consul&quot;)    public String paymentzk() {        return &quot;springcloud with consul: &quot; + serverPort + &quot;\t&quot; + UUID.randomUUID().toString();    }}</code></pre><hr><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>新增cloud-consumerconsul-order80</p><h3 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h3><p>跟提供者服务一致</p><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><pre><code>server:  port: 80# 服务别名---consul注册中心名称spring:  application:    name: consul-consumer-order  cloud:    consul:      host: localhost      port: 8500      discovery:        service-name: ${spring.application.name}</code></pre><h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><pre><code>@RestController@Slf4jpublic class OrderConsulController {    private static final String INVOKE_URL = &quot;http://consul-provider-payment&quot;;    @Resource    private RestTemplate restTemplate;    @GetMapping(value = &quot;/consumer/payment/consul&quot;)    public String paymentInfo(){        String result = restTemplate.getForObject(INVOKE_URL + &quot;/payment/consul&quot;, String.class);        return result;    }}</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://127.0.0.1/consumer/payment/consul" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/consul</a> 可以调用成功！</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]4-集成ZooKeeper</title>
      <link href="/2020/03/21/Cloud-4-%E9%9B%86%E6%88%90ZooKeeper/"/>
      <url>/2020/03/21/Cloud-4-%E9%9B%86%E6%88%90ZooKeeper/</url>
      
        <content type="html"><![CDATA[<p><strong>本机与虚拟机测试，注意：保证本机与虚拟机能互相ping通</strong></p><h1 id="zookeepper命令"><a href="#zookeepper命令" class="headerlink" title="zookeepper命令"></a>zookeepper命令</h1><pre><code>1. 启动ZK服务:       zkServer.sh start2. 查看ZK服务状态:   zkServer.sh status3. 停止ZK服务:       zkServer.sh stop4. 重启ZK服务:       zkServer.sh restart5. ZK服务连接:       zkCli.sh</code></pre><hr><h1 id="新建服务提供者"><a href="#新建服务提供者" class="headerlink" title="新建服务提供者"></a>新建服务提供者</h1><h2 id="cloud-provider-payment8004"><a href="#cloud-provider-payment8004" class="headerlink" title="cloud-provider-payment8004"></a>cloud-provider-payment8004</h2><p>引入zookeeper相关的依赖</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;cloud2020&lt;/artifactId&gt;        &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;            &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.1.10&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;!--   引入zookeeper客户端     --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;            &lt;version&gt;3.4.10&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>server:  port: 8004# 服务别名---注册zookeeper到注册中心名称spring:  application:    name: cloud-provider-payment  cloud:    zookeeper:      connect-string: 192.168.8.208:2181      max-retries: 10  datasource:    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: org.gjt.mm.mysql.Driver    url: jdbc:mysql://127.0.0.1:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456</code></pre><h2 id="controller测试"><a href="#controller测试" class="headerlink" title="controller测试"></a>controller测试</h2><pre><code>@RestController@Slf4jpublic class PaymentController {    @Value(&quot;${server.port}&quot;)    private String serverPort;    @GetMapping(value = &quot;/payment/zk&quot;)    public String paymentzk() {        return &quot;springcloud with zookeeper: &quot; + serverPort + &quot;\t&quot; + UUID.randomUUID().toString();    }}</code></pre><h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><pre><code>/** * @author Administrator * @date 2020/3/19 14:10 * * //@EnableDiscoveryClient该注解用于向使用consul或 zookeeper作为法册中心时注册服务 */@SpringBootApplication@EnableDiscoveryClientpublic class PaymentMain8004 {    public static void main(String[] args) {        SpringApplication.run(PaymentMain8004.class, args);    }}</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动zookeeper，运行微服务。</p><pre><code>[zk: localhost:2181(CONNECTED) 25] ls /                                                                     [services, zookeeper][zk: localhost:2181(CONNECTED) 26] ls /services                                                             [cloud-provider-payment][zk: localhost:2181(CONNECTED) 27] ls /services/cloud-provider-payment[c0ca3c06-7384-42a1-bfa2-63ed8e6f3a1e][zk: localhost:2181(CONNECTED) 28] [zk: localhost:2181(CONNECTED) 28] get /services/cloud-provider-payment/c0ca3c06-7384-42a1-bfa2-63ed8e6f3a1e{&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;id&quot;:&quot;c0ca3c06-7384-42a1-bfa2-63ed8e6f3a1e&quot;,&quot;address&quot;:&quot;DESKTOP-T08AAHT&quot;,&quot;port&quot;:8004,&quot;sslPort&quot;:null,&quot;payload&quot;:{&quot;@class&quot;:&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;,&quot;id&quot;:&quot;application-1&quot;,&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;metadata&quot;:{}},&quot;registrationTimeUTC&quot;:1584766408452,&quot;serviceType&quot;:&quot;DYNAMIC&quot;,&quot;uriSpec&quot;:{&quot;parts&quot;:[{&quot;value&quot;:&quot;scheme&quot;,&quot;variable&quot;:true},{&quot;value&quot;:&quot;://&quot;,&quot;variable&quot;:false},{&quot;value&quot;:&quot;address&quot;,&quot;variable&quot;:true},{&quot;value&quot;:&quot;:&quot;,&quot;variable&quot;:false},{&quot;value&quot;:&quot;port&quot;,&quot;variable&quot;:true}]}}cZxid = 0x36ctime = Sat Mar 21 20:47:00 CST 2020mZxid = 0x36mtime = Sat Mar 21 20:47:00 CST 2020pZxid = 0x36cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x170fd2061fe0002dataLength = 536numChildren = 0</code></pre><hr><h1 id="新建消费者cloud-consumerzk-order80"><a href="#新建消费者cloud-consumerzk-order80" class="headerlink" title="新建消费者cloud-consumerzk-order80"></a>新建消费者cloud-consumerzk-order80</h1><h2 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>server:  port: 80spring:  application:    name: cloud-consumer-order  cloud:    zookeeper:      connect-string: 192.168.8.208:2181      max-retries: 10  datasource:    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: org.gjt.mm.mysql.Driver    url: jdbc:mysql://127.0.0.1:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456</code></pre><h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><pre><code>@Configurationpublic class ApplicationContextConfig {    /**     * //appLicationcontext.xml &lt;bean id=&quot;&quot;class=&quot;&quot;&gt;     *     * 使用@LoapBalanced注解赋于RestTemplate负载均衡的能力     */    @Bean    @LoadBalanced    public RestTemplate getRestTemplate() {        return new RestTemplate();    }}</code></pre><pre><code>@RestController@Slf4jpublic class OrderZKController {    private static final String INVOKE_URL = &quot;http://cloud-provider-payment&quot;;    @Resource    private RestTemplate restTemplate;    @GetMapping(value = &quot;/consumer/payment/zk&quot;)    public String paymentInfo(){        String result = restTemplate.getForObject(INVOKE_URL + &quot;/payment/zk&quot;, String.class);        return result;    }}</code></pre><h2 id="zookeeper查看"><a href="#zookeeper查看" class="headerlink" title="zookeeper查看"></a>zookeeper查看</h2><pre><code>[zk: localhost:2181(CONNECTED) 4] ls /services[cloud-provider-payment, cloud-consumer-order]</code></pre><p>启动后访问<a href="http://127.0.0.1/consumer/payment/zk" target="_blank" rel="noopener">http://127.0.0.1/consumer/payment/zk</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]3-集成Eureka</title>
      <link href="/2020/03/20/Cloud-3-%E9%9B%86%E6%88%90Eureka/"/>
      <url>/2020/03/20/Cloud-3-%E9%9B%86%E6%88%90Eureka/</url>
      
        <content type="html"><![CDATA[<h1 id="EurekaServer服务端安装"><a href="#EurekaServer服务端安装" class="headerlink" title="EurekaServer服务端安装"></a>EurekaServer服务端安装</h1><p>新建一个EurekaServer服务,名称：cloud-eureka-server7001 </p><h2 id="主要依赖"><a href="#主要依赖" class="headerlink" title="主要依赖"></a>主要依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>server:  port: 7001eureka:  instance:    hostname: localhost #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示不向注册中心注册自己    fetch-registry: false   #false表示自己端就是注册中心    #false表示自己端魔是注册中心，我的钢责就是维护服务实，并不需要去检索服务    service-url:      #设置与Eureka Server交互的地址查询服务和注般服务部需要依藏这个她址。      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka</code></pre><h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><pre><code>package xyz.zx21.springcloud;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;/** * @author Administrator * @date 2020/3/20 13:56 */@SpringBootApplication@EnableEurekaServerpublic class EurekaMain7001 {    public static void main(String[] args) {        SpringApplication.run(EurekaMain7001.class, args);    }}</code></pre><h1 id="cloud-provider-payment8001入驻Eureka"><a href="#cloud-provider-payment8001入驻Eureka" class="headerlink" title="cloud-provider-payment8001入驻Eureka"></a>cloud-provider-payment8001入驻Eureka</h1><h2 id="修改pom"><a href="#修改pom" class="headerlink" title="修改pom"></a>修改pom</h2><p>新增依赖</p><pre><code>&lt;!--   引入eureka客户端     --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a>启动类添加注解</h2><p><code>@EnableEurekaClient</code></p><h2 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h2><p>新增</p><pre><code>eureka:  client:    register-with-eureka: true   #是否将自己注册到注册中心,集群必须设置为true配合ribbon    fetch-registry: true    #是否从服务端抓取已有的注册信息    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    service-url:      defaultZone: http://localhost:7001/eureka</code></pre><hr><h1 id="cloud-comsumer-order80入驻Euraka"><a href="#cloud-comsumer-order80入驻Euraka" class="headerlink" title="cloud-comsumer-order80入驻Euraka"></a>cloud-comsumer-order80入驻Euraka</h1><p><strong>与上面的同理，添加依赖，改yml和主启动类</strong></p><p>application.yml</p><pre><code>server:  port: 80spring:  application:    name: cloud-order-serviceeureka:  client:    register-with-eureka: true   #是否将自己注册到注册中心,集群必须设置为true配合ribbon    fetch-registry: true    #是否从服务端抓取已有的注册信息    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    service-url:      defaultZone: http://localhost:7001/eureka</code></pre><hr><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>分别启动eureka和80与8001服务，访问<a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p><p>结果如下已经注册进来了</p><pre><code>Application    AMIs    Availability Zones    StatusCLOUD-ORDER-SERVICE    n/a (1)    (1)    UP (1) - DESKTOP-T08AAHT:cloud-order-service:80CLOUD-PAYMENT-SERVICE    n/a (1)    (1)    UP (1) - DESKTOP-T08AAHT:cloud-payment-service:8001</code></pre><hr><h1 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h1><p><strong>互相注册，相互守望</strong></p><pre><code>1 先启动eureka注册中心2 启动服务提供者payment支付服务3 支付服务启动后会把自身信息（比如服务地址以别名方式注册进eureka）4 消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址5 消费者获得调用地址后，底层实际是利用HttpClient技术实现远程调用6 消费者获得服务地址后会统存在本地jvm内存中，默认每间隔30秒更新一次服务调用地址</code></pre><hr><h1 id="Eureka集群环境构建"><a href="#Eureka集群环境构建" class="headerlink" title="Eureka集群环境构建"></a>Eureka集群环境构建</h1><h2 id="新建cloud-eureka-server7002"><a href="#新建cloud-eureka-server7002" class="headerlink" title="新建cloud-eureka-server7002"></a>新建cloud-eureka-server7002</h2><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><pre><code>127.0.0.1 eureka7001.com127.0.0.1 eureka7002.com</code></pre><p>EurekaServer7001 的yml</p><pre><code>server:  port: 7001eureka:  instance:#    hostname: localhost #eureka服务端的实例名称    hostname: eureka7001.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示不向注册中心注册自己    fetch-registry: false   #false表示自己端就是注册中心    #false表示自己端魔是注册中心，我的钢责就是维护服务实，并不需要去检索服务    service-url:      #设置与Eureka Server交互的地址查询服务和注册服务部需要依赖这个她址。#      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka #单例      defaultZone: http://eureka7002.com:7002/eureka/</code></pre><p>EurekaServer7002 的yml</p><pre><code>server:  port: 7002eureka:  instance:#    hostname: localhost #eureka服务端的实例名称    hostname: eureka7002.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示不向注册中心注册自己    fetch-registry: false   #false表示自己端就是注册中心    #false表示自己端魔是注册中心，我的钢责就是维护服务实，并不需要去检索服务    service-url:      #设置与Eureka Server交互的地址查询服务和注册服务部需要依赖这个她址。#      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka #单例      defaultZone: http://eureka7001.com:7001/eureka/</code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>访问<a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a> 和 <a href="http://eureka7002.com:7002/" target="_blank" rel="noopener">http://eureka7002.com:7002/</a></p><p>能看到7001指向7002，7002指向7001即可。</p><pre><code>DS Replicaseureka7001.com</code></pre><hr><h1 id="其他服务注册到Eureka集群"><a href="#其他服务注册到Eureka集群" class="headerlink" title="其他服务注册到Eureka集群"></a>其他服务注册到Eureka集群</h1><h2 id="修改yml即可"><a href="#修改yml即可" class="headerlink" title="修改yml即可"></a>修改yml即可</h2><pre><code>eureka:  client:    register-with-eureka: true   #是否将自己注册到注册中心,集群必须设置为true配合ribbon    fetch-registry: true    #是否从服务端抓取已有的注册信息    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    service-url:      #defaultZone: http://localhost:7001/eureka      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/  #集群版</code></pre><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><h3 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h3><pre><code>1 先要启动EurekaServer，7001/7002服务2 再要启动服务提供者provider，80013 再要启动消费者，804 http://localhost/consumer/payment/get/1</code></pre><hr><h1 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h1><h2 id="新建cloud-provider-payment8002"><a href="#新建cloud-provider-payment8002" class="headerlink" title="新建cloud-provider-payment8002"></a>新建cloud-provider-payment8002</h2><p>copycloud-provider-payment8001的代码即可，修改端口。</p><p><strong>为了区分方便，修改controller,用于显示端口</strong></p><pre><code>@RestController@Slf4jpublic class PaymentController {    @Resource    private PaymentService paymentService;    @Value(&quot;${server.port}&quot;)    private String serverPort;    @PostMapping(value = &quot;/payment/create&quot;)    public CommonResult create(@RequestBody Payment payment) {        int result = paymentService.create(payment);        log.info(&quot;插入结果:&quot; + result);        if (result &gt; 0) {            return new CommonResult(200, &quot;插入成功,serverPort: &quot; + serverPort, result);        } else {            return new CommonResult(444, &quot;插入失败&quot;, null);        }    }    @GetMapping(value = &quot;/payment/get/{id}&quot;)    public CommonResult getPaymentById(@PathVariable(&quot;id&quot;) Long id) {        Payment paymentById = paymentService.getPaymentById(id);        log.info(&quot;查询结果:&quot; + paymentById);        if (paymentById != null) {            return new CommonResult(200, &quot;查询成功,serverPort: &quot;+ serverPort, paymentById);        } else {            return new CommonResult(444, &quot;没有对应记录，查询id:&quot; + id, null);        }    }}</code></pre><hr><h1 id="cloud-comsumer-order80修改"><a href="#cloud-comsumer-order80修改" class="headerlink" title="cloud-comsumer-order80修改"></a>cloud-comsumer-order80修改</h1><pre><code>@RestController@Slf4jpublic class OrderController {//    public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;    public static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;    @Resource    private RestTemplate restTemplate;    @GetMapping(&quot;/consumer/payment/create&quot;)    public CommonResult&lt;Payment&gt; create(Payment payment) {        return restTemplate.postForObject(PAYMENT_URL + &quot;/payment/create&quot;, payment, CommonResult.class);    }    @GetMapping(&quot;/consumer/payment/get/{id}&quot;)    public CommonResult&lt;Payment&gt; getPayment(@PathVariable(&quot;id&quot;) Long id) {        return restTemplate.getForObject(PAYMENT_URL + &quot;/payment/get/&quot; + id, CommonResult.class);    }}</code></pre><h2 id="添加-LoadBalanced"><a href="#添加-LoadBalanced" class="headerlink" title="添加@LoadBalanced"></a>添加@LoadBalanced</h2><pre><code>@Configurationpublic class ApplicationContextConfig {    /**     * //appLicationcontext.xml &lt;bean id=&quot;&quot;class=&quot;&quot;&gt;     *     * 使用@LoapBalanced注解赋于RestTemplate负载均衡的能力     */    @Bean    @LoadBalanced    public RestTemplate getRestTemplate() {        return new RestTemplate();    }}</code></pre><hr><h2 id="actuator信息完善"><a href="#actuator信息完善" class="headerlink" title="actuator信息完善"></a>actuator信息完善</h2><h2 id="服务名称修改"><a href="#服务名称修改" class="headerlink" title="服务名称修改"></a>服务名称修改</h2><pre><code>  instance:    instance-id:  payment8001</code></pre><h2 id="ip信息显示"><a href="#ip信息显示" class="headerlink" title="ip信息显示"></a>ip信息显示</h2><pre><code>  instance:    instance-id:  payment8001    prefer-ip-address: true #访问路径可以显示IP地址</code></pre><hr><h1 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h1><p><strong>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</strong></p><h2 id="修改cloud-provider-payment8001"><a href="#修改cloud-provider-payment8001" class="headerlink" title="修改cloud-provider-payment8001"></a>修改cloud-provider-payment8001</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><pre><code> @RestController@Slf4jpublic class PaymentController {    @Resource    private PaymentService paymentService;    @Resource    private DiscoveryClient discoveryClient;    @Value(&quot;${server.port}&quot;)    private String serverPort;    @PostMapping(value = &quot;/payment/create&quot;)    public CommonResult create(@RequestBody Payment payment) {        int result = paymentService.create(payment);        log.info(&quot;插入结果:&quot; + result);        if (result &gt; 0) {            return new CommonResult(200, &quot;插入成功,serverPort: &quot; + serverPort, result);        } else {            return new CommonResult(444, &quot;插入失败&quot;, null);        }    }    @GetMapping(value = &quot;/payment/get/{id}&quot;)    public CommonResult getPaymentById(@PathVariable(&quot;id&quot;) Long id) {        Payment paymentById = paymentService.getPaymentById(id);        log.info(&quot;查询结果:&quot; + paymentById);        if (paymentById != null) {            return new CommonResult(200, &quot;查询成功,serverPort: &quot;+ serverPort, paymentById);        } else {            return new CommonResult(444, &quot;没有对应记录，查询id:&quot; + id, null);        }    }    @GetMapping(value = &quot;/payment/discovery&quot;)    public Object discovery(){        List&lt;String&gt; services = discoveryClient.getServices();        for (String element : services) {            log.info(&quot;****element: &quot; +element);        }        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);        for (ServiceInstance instance:instances) {            log.info(instance.getServiceId()+&quot;\t&quot;+instance.getHost()+&quot;\t&quot;+instance.getPort()+&quot;\t&quot;+instance.getUri());        }        return this.discoveryClient;    }}</code></pre><h3 id="主启动类-1"><a href="#主启动类-1" class="headerlink" title="主启动类"></a>主启动类</h3><p> 新增@EnableDiscoveryClient注解</p><h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><p> 访问 <a href="http://localhost:8001/payment/discovery" target="_blank" rel="noopener">http://localhost:8001/payment/discovery</a></p><p> 响应</p><pre><code> {    &quot;services&quot;: [        &quot;cloud-payment-service&quot;    ],    &quot;order&quot;: 0}</code></pre><p> log日志</p><pre><code>2020-03-20 16:24:03.078  INFO 11660 --- [nio-8001-exec-9] x.z.s.controller.PaymentController       : ****element: cloud-payment-service2020-03-20 16:24:03.078  INFO 11660 --- [nio-8001-exec-9] x.z.s.controller.PaymentController       : CLOUD-PAYMENT-SERVICE    192.168.8.122    8002    http://192.168.8.122:80022020-03-20 16:24:03.078  INFO 11660 --- [nio-8001-exec-9] x.z.s.controller.PaymentController       : CLOUD-PAYMENT-SERVICE    192.168.8.122    8001    http://192.168.8.122:8001</code></pre><hr><h1 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h1><h2 id="自我保护机制理论知识"><a href="#自我保护机制理论知识" class="headerlink" title="自我保护机制理论知识"></a>自我保护机制理论知识</h2><p> 自我保护机制：默认情况下EurekaClient定时向EurekaServer端发送心跳包如果Eureka在server端在一定时间内（默认90秒）没有收到EurekaClient发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间（90秒中）内丢失了大量的服务实例心跳，这时候EurekaServer会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是EurekaClient为出现右机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心就，只是网络延迟问题，而保护机制是为了解决此问题而产生的。</p><h2 id="禁用自我保护机制"><a href="#禁用自我保护机制" class="headerlink" title="禁用自我保护机制"></a>禁用自我保护机制</h2><h3 id="修改EurekaServer"><a href="#修改EurekaServer" class="headerlink" title="修改EurekaServer"></a>修改EurekaServer</h3><p> yml</p><pre><code> eureka:  instance:#    hostname: localhost #eureka服务端的实例名称    hostname: eureka7001.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示不向注册中心注册自己    fetch-registry: false   #false表示自己端就是注册中心    #false表示自己端魔是注册中心，我的钢责就是维护服务实，并不需要去检索服务    service-url:      #设置与Eureka Server交互的地址查询服务和注册服务部需要依赖这个她址。#      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka #单例      #defaultZone: http://eureka7002.com:7002/eureka/      defaultZone: http://eureka7001.com:7001/eureka/ #单机  server:    enable-self-preservation: false #禁用自我保护模式，保证不可用服务被及时剔除    eviction-interval-timer-in-ms: 2000 #2秒</code></pre><h3 id="修改Client"><a href="#修改Client" class="headerlink" title="修改Client"></a>修改Client</h3><p> yml</p><pre><code>eureka:  client:    register-with-eureka: true   #是否将自己注册到注册中心,集群必须设置为true配合ribbon    fetch-registry: true    #是否从服务端抓取已有的注册信息    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    service-url:      defaultZone: http://localhost:7001/eureka      #defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/  #集群版  instance:    instance-id:  payment8001    prefer-ip-address: true #访问路径可以显示IP地址    lease-renewal-interval-in-seconds: 1  #向服务端发送心跳的时间间隔，单位为秒（默认是30秒）    lease-expiration-duration-in-seconds: 2 #收到最后一次心跳后等待时间上限，单位为秒（默认是90秒），超时将剔除</code></pre><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p> 当关闭8001服务时，eureka会很快删除</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]2-支付模块与工程重构</title>
      <link href="/2020/03/19/Cloud-2-%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%B7%A5%E7%A8%8B%E9%87%8D%E6%9E%84/"/>
      <url>/2020/03/19/Cloud-2-%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%B7%A5%E7%A8%8B%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><strong>创建消费者模块cloud-comsumer-order80调用上篇文章的支付模块cloud-provider-payment8001。</strong></p><h1 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h1><pre><code>1、建module2、改pom3、写yml4、主启动5、业务类</code></pre><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>server:  port: 80</code></pre><h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><pre><code>package xyz.zx21.springcloud;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * @author Administrator * @date 2020/3/19 15:53 */@SpringBootApplicationpublic class OrderMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderMain80.class, args);    }}</code></pre><h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><p><strong>注入RestTemplate，文档地址</strong>：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">点击访问</a></p><pre><code>package xyz.zx21.springcloud.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;/** * @author Administrator * @date 2020/3/19 16:39 */@Configurationpublic class ApplicationContextConfig {    /**     * //appLicationcontext.xml &lt;bean id=&quot;&quot;class=&quot;&quot;&gt;     *     */    @Bean    public RestTemplate getRestTemplate() {        return new RestTemplate();    }}</code></pre><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><pre><code>package xyz.zx21.springcloud.controller;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;import xyz.zx21.springcloud.entities.CommonResult;import xyz.zx21.springcloud.entities.Payment;import javax.annotation.Resource;/** * @author Administrator * @date 2020/3/19 16:37 */@RestController@Slf4jpublic class OrderController {    public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;    @Resource    private RestTemplate restTemplate;    @GetMapping(&quot;/consumer/payment/create&quot;)    public CommonResult&lt;Payment&gt; create(Payment payment) {        return restTemplate.postForObject(PAYMENT_URL + &quot;/payment/create&quot;, payment, CommonResult.class);    }    @GetMapping(&quot;/consumer/payment/get/{id}&quot;)    public CommonResult&lt;Payment&gt; getPayment(@PathVariable(&quot;id&quot;) Long id) {        return restTemplate.getForObject(PAYMENT_URL + &quot;/payment/get/&quot; + id, CommonResult.class);    }}</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>启动PaymentMain8001和OrderMain80，测试OrderMain80调用PaymentMain8001服务。</p><hr><h1 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h1><p><strong>将多余的代码，单独放到一个模块，提供给各个服务，避免冗余，比如实体类</strong></p><h2 id="新建cloud-api-commons模块"><a href="#新建cloud-api-commons模块" class="headerlink" title="新建cloud-api-commons模块"></a>新建cloud-api-commons模块</h2><p>pom.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;cloud2020&lt;/artifactId&gt;        &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;!--        当optional为true则说明该依赖禁止依赖传递    &lt;optional&gt;true&lt;/optional&gt;--&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;            &lt;version&gt;5.1.1&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h2 id="将其他服务的实体类拷贝"><a href="#将其他服务的实体类拷贝" class="headerlink" title="将其他服务的实体类拷贝"></a>将其他服务的实体类拷贝</h2><h2 id="maven-clean-install-安装"><a href="#maven-clean-install-安装" class="headerlink" title="maven clean install 安装"></a>maven clean install 安装</h2><h2 id="删除其他模块下的实体包"><a href="#删除其他模块下的实体包" class="headerlink" title="删除其他模块下的实体包"></a>删除其他模块下的实体包</h2><h2 id="新增依赖"><a href="#新增依赖" class="headerlink" title="新增依赖"></a>新增依赖</h2><pre><code>&lt;dependency&gt;    &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;    &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;</code></pre><hr><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p>关于调用/consumer/payment/create接口，插入数据为null的情况，需要在cloud-provider-payment8001服务对应的controller添加@RequestBody注解</p><pre><code>@PostMapping(value = &quot;/payment/create&quot;)public CommonResult create(@RequestBody Payment payment) {...}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Cloud]1-父工程创建与支付模块构建</title>
      <link href="/2020/03/19/Cloud-1-%E7%88%B6%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E6%9E%84%E5%BB%BA/"/>
      <url>/2020/03/19/Cloud-1-%E7%88%B6%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>约定 &gt; 配置 &gt; 编码</strong></p><hr><h1 id="工程步骤"><a href="#工程步骤" class="headerlink" title="工程步骤"></a>工程步骤</h1><pre><code>1、New Project2、聚合总父工程名字3、Maven选版本4、工程名字5、字符编码-UTF-86、注解生效激活7、java编译版本选择88、File Type过滤(可选)</code></pre><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><h2 id="idea创建project工作空间"><a href="#idea创建project工作空间" class="headerlink" title="idea创建project工作空间"></a>idea创建project工作空间</h2><p>新建一个maven工程，工程名：cloud2020,删除src目录，只留下pom。<br>修改pom.xml</p><pre><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></pre><p>完整的pom</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;  &lt;artifactId&gt;cloud2020&lt;/artifactId&gt;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  &lt;packaging&gt;pom&lt;/packaging&gt;  &lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;    &lt;junit.version&gt;4.12&lt;/junit.version&gt;    &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;    &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt;    &lt;mysql.version&gt;5.1.47&lt;/mysql.version&gt;    &lt;druid.version&gt;1.1.16&lt;/druid.version&gt;    &lt;mybatis.spring.boot.version&gt;1.3.2&lt;/mybatis.spring.boot.version&gt;  &lt;/properties&gt;  &lt;!-- 子模块继承之后，提供作用：锁定版本+子模块不用写groupId和version  --&gt;  &lt;dependencyManagement&gt;    &lt;dependencies&gt;      &lt;!--  springboot 2.2.2    --&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;        &lt;type&gt;pom&lt;/type&gt;        &lt;scope&gt;import&lt;/scope&gt;      &lt;/dependency&gt;      &lt;!--  springcloud cloud Hoxton.SR1   --&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;        &lt;version&gt;Hoxton.SR1&lt;/version&gt;        &lt;type&gt;pom&lt;/type&gt;        &lt;scope&gt;import&lt;/scope&gt;      &lt;/dependency&gt;      &lt;!--  springcloud cloud alibaba 2.1.0.RELEASE    --&gt;      &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;        &lt;type&gt;pom&lt;/type&gt;        &lt;scope&gt;import&lt;/scope&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;${mysql.version}&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid&lt;/artifactId&gt;        &lt;version&gt;${druid.version}&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;${mybatis.spring.boot.version}&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j&lt;/artifactId&gt;        &lt;version&gt;${log4j.version}&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;${junit.version}&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;        &lt;artifactId&gt;lombok&lt;/artifactId&gt;        &lt;version&gt;${lombok.version}&lt;/version&gt;        &lt;optional&gt;true&lt;/optional&gt;      &lt;/dependency&gt;    &lt;/dependencies&gt;  &lt;/dependencyManagement&gt;  &lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;configuration&gt;          &lt;fork&gt;true&lt;/fork&gt;          &lt;addResources&gt;true&lt;/addResources&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;&lt;/project&gt;</code></pre><hr><h1 id="本章模块"><a href="#本章模块" class="headerlink" title="本章模块"></a>本章模块</h1><p>order(客户端消费者80) -&gt; payment(微服务提供者8001)</p><hr><h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><pre><code>1、建module2、改pom3、写yml4、主启动5、业务类</code></pre><h3 id="创建-cloud-provider-payment8001-模块"><a href="#创建-cloud-provider-payment8001-模块" class="headerlink" title="创建 cloud-provider-payment8001 模块"></a>创建 cloud-provider-payment8001 模块</h3><p>pom.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;cloud2020&lt;/artifactId&gt;        &lt;groupId&gt;xyz.zx21.springcloud&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.1.10&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>server:  port: 8001spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: org.gjt.mm.mysql.Driver    url: jdbc:mysql://127.0.0.1:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456mybatis:  mapper-locations: classpath:mapper/*.xml  type-aliases-package: com.com.springcloud.entities</code></pre><h2 id="建数据库"><a href="#建数据库" class="headerlink" title="建数据库"></a>建数据库</h2><p>db2019<br>sql如下</p><pre><code>CREATE TABLE `payment` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;ID&#39;,  `serial` varchar(200) DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre><hr><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>实体类Payment</p><pre><code>package xyz.zx21.springcloud.entities;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.io.Serializable;/** * @author Administrator * @date 2020/3/19 14:20 */@Data@AllArgsConstructor@NoArgsConstructorpublic class Payment implements Serializable {    private Long id;    private String serial;}</code></pre><h2 id="数据封装体CommonResult"><a href="#数据封装体CommonResult" class="headerlink" title="数据封装体CommonResult"></a>数据封装体CommonResult</h2><p>用于给前端返回统一格式的数据</p><pre><code>package xyz.zx21.springcloud.entities;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author Administrator * @date 2020/3/19 14:24 */@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResult&lt;T&gt; {    private Integer code;    private String message;    private T data;    public CommonResult(Integer code, String message) {        this(code, message, null);    }}</code></pre><h2 id="contorller"><a href="#contorller" class="headerlink" title="contorller"></a>contorller</h2><pre><code>package xyz.zx21.springcloud.controller;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.*;import xyz.zx21.springcloud.entities.CommonResult;import xyz.zx21.springcloud.entities.Payment;import xyz.zx21.springcloud.service.PaymentService;import javax.annotation.Resource;/** * @author Administrator * @date 2020/3/19 14:28 */@RestController@Slf4jpublic class PaymentController {    @Resource    private PaymentService paymentService;    @PostMapping(value = &quot;/payment/create&quot;)    public CommonResult create(Payment payment) {        int result = paymentService.create(payment);        log.info(&quot;插入结果:&quot; + result);        if (result &gt; 0) {            return new CommonResult(200, &quot;插入成功&quot;, result);        } else {            return new CommonResult(444, &quot;插入失败&quot;, null);        }    }    @GetMapping(value = &quot;/payment/get/{id}&quot;)    public CommonResult getPaymentById(@PathVariable(&quot;id&quot;) Long id) {        Payment paymentById = paymentService.getPaymentById(id);        log.info(&quot;查询结果:&quot; + paymentById);        if (paymentById != null) {            return new CommonResult(200, &quot;查询成功&quot;, paymentById);        } else {            return new CommonResult(444, &quot;没有对应记录，查询id:&quot; + id, null);        }    }}</code></pre><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><pre><code>package xyz.zx21.springcloud.service;import xyz.zx21.springcloud.entities.Payment;/** * @author Administrator * @date 2020/3/19 14:32 */public interface PaymentService {    int create(Payment payment);    Payment getPaymentById(Long id);}</code></pre><h2 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h2><pre><code>package xyz.zx21.springcloud.service.impl;import org.springframework.stereotype.Service;import xyz.zx21.springcloud.dao.PaymentDao;import xyz.zx21.springcloud.entities.Payment;import xyz.zx21.springcloud.service.PaymentService;import javax.annotation.Resource;/** * @author Administrator * @date 2020/3/19 14:33 */@Servicepublic class PaymentServiceImpl implements PaymentService {    @Resource    private PaymentDao paymentDao;    @Override    public int create(Payment payment) {        return paymentDao.create(payment);    }    @Override    public Payment getPaymentById(Long id) {        return paymentDao.getPaymentById(id);    }}</code></pre><h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><pre><code>package xyz.zx21.springcloud.dao;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import xyz.zx21.springcloud.entities.Payment;/** * @author Administrator * @date 2020/3/19 14:34 */@Mapperpublic interface PaymentDao {    int create(Payment payment);    Payment getPaymentById(@Param(&quot;id&quot;) Long id);}</code></pre><h2 id="dao映射的xml"><a href="#dao映射的xml" class="headerlink" title="dao映射的xml"></a>dao映射的xml</h2><p>在resources下新建mapper文件夹<br>PaymentMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;xyz.zx21.springcloud.dao.PaymentDao&quot;&gt;    &lt;insert id=&quot;create&quot; parameterType=&quot;xyz.zx21.springcloud.entities.Payment&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;        insert into payment(serial) values(#{serial});    &lt;/insert&gt;    &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;xyz.zx21.springcloud.entities.Payment&quot;&gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/id&gt;        &lt;id column=&quot;serial&quot; property=&quot;serial&quot; jdbcType=&quot;VARCHAR&quot;&gt;&lt;/id&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;getPaymentById&quot; parameterType=&quot;java.lang.Long&quot; resultMap=&quot;BaseResultMap&quot;&gt;        select * from payment where id = #{id};    &lt;/select&gt;&lt;/mapper&gt;</code></pre><hr><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="postman接口测试"><a href="#postman接口测试" class="headerlink" title="postman接口测试"></a>postman接口测试</h2><p>get<br>url：<a href="http://127.0.0.1:8001/payment/get/1" target="_blank" rel="noopener">http://127.0.0.1:8001/payment/get/1</a></p><p>返回：</p><pre><code>{    &quot;code&quot;: 200,    &quot;message&quot;: &quot;查询成功&quot;,    &quot;data&quot;: {        &quot;id&quot;: 1,        &quot;serial&quot;: &quot;小信&quot;    }}</code></pre><p>post<br>url：<a href="http://127.0.0.1:8001/payment/create?serial=测试" target="_blank" rel="noopener">http://127.0.0.1:8001/payment/create?serial=测试</a></p><p>返回：</p><pre><code>{    &quot;code&quot;: 200,    &quot;message&quot;: &quot;插入成功&quot;,    &quot;data&quot;: 1}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]easyexcel导出</title>
      <link href="/2020/02/26/JAVA-easyexcel%E5%AF%BC%E5%87%BA/"/>
      <url>/2020/02/26/JAVA-easyexcel%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>阿里的表格工具，简单了解了一下。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;    &lt;version&gt;2.1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><hr><h2 id="新增一个实体类"><a href="#新增一个实体类" class="headerlink" title="新增一个实体类"></a>新增一个实体类</h2><pre><code>@Data@ContentRowHeight()@HeadRowHeight()@ColumnWidth()public class Student {    @ExcelProperty(&quot;学生姓名&quot;)    private String name;    @ExcelProperty(&quot;学生年龄&quot;)    private int age;    @ExcelProperty(value = &quot;性别&quot;)    private String sex;    @DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)    @ExcelProperty(value = &quot;日期&quot;,index = 5)    private Date date;}</code></pre><p><strong>解释：</strong></p><p>@Data：lombok的注解，可以省略@get/@set等等。</p><p>@ContentRowHeight()/@HeadRowHeight()/@ColumnWidth()：可修改列宽、行高。</p><p>@ExcelProperty：定义列名称或者index位置，默认0开始。</p><p>@DateTimeFormat：日期转换</p><hr><h2 id="ExcelTest-java"><a href="#ExcelTest-java" class="headerlink" title="ExcelTest.java"></a>ExcelTest.java</h2><pre><code>@RunWith(SpringRunner.class)@SpringBootTestpublic class ExcelTest {    /**     * 最简单的导出     */    @Test    public void simpleWrite01() throws IOException {        // 写法1        String fileName = (new File(&quot;&quot;).getCanonicalPath()) + &quot;/simpleWrite&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;;        // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭        // 如果这里想使用03 则 传入excelType参数即可        EasyExcel.write(fileName, Student.class).sheet(&quot;模板&quot;).doWrite(getData());        // 写法2/*        fileName = (new File(&quot;&quot;).getCanonicalPath()) + &quot;/simpleWrite&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;;        // 这里 需要指定写用哪个class去写        ExcelWriter excelWriter = EasyExcel.write(fileName, Student.class).build();        WriteSheet writeSheet = EasyExcel.writerSheet(&quot;模板&quot;).build();        excelWriter.write(getData(), writeSheet);        // 千万别忘记finish 会帮忙关闭流        excelWriter.finish();*/    }    /**     * 指定列名导出     */    @Test    public void simpleWrite02() throws IOException {        String fileName = (new File(&quot;&quot;).getCanonicalPath()) + &quot;/simpleWrite&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;;        // 根据用户传入字段 假设我们要忽略 date        Set&lt;String&gt; columnFiledNames = new HashSet&lt;String&gt;();        columnFiledNames.add(&quot;age&quot;);        columnFiledNames.add(&quot;sex&quot;);        //1、需要忽略的列名//        EasyExcel.write(fileName, Student.class).excludeColumnFiledNames(columnFiledNames).sheet(&quot;模板&quot;).doWrite(getData());        //2、需要保留的列名        EasyExcel.write(fileName, Student.class).includeColumnFiledNames(columnFiledNames).sheet(&quot;模板&quot;).doWrite(getData());    }    private List&lt;Student&gt; getData() {        List&lt;Student&gt; list = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 10; i++) {            Student student = new Student();            student.setName(&quot;小信&quot; + i);            student.setAge(22);            student.setSex(&quot;男&quot;);            student.setDate(new Date());            list.add(student);        }        return list;    }}</code></pre><hr><h2 id="web下载导出"><a href="#web下载导出" class="headerlink" title="web下载导出"></a>web下载导出</h2><pre><code>@RestControllerpublic class WebExcelTest {    /**     * web中写入     */    @GetMapping(&quot;get&quot;)    public void getExcel(HttpServletResponse response) {        try {            response.setContentType(&quot;application/vnd.ms-excel&quot;);            response.setCharacterEncoding(&quot;utf-8&quot;);            response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename=&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;);            // 这里需要设置不关闭流            EasyExcel.write(response.getOutputStream(), Student.class).autoCloseStream(Boolean.FALSE).sheet(&quot;模板&quot;)                    .doWrite(getData());        } catch (IOException e) {            e.printStackTrace();        }    }    private List&lt;Student&gt; getData() {        List&lt;Student&gt; list = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 10; i++) {            Student student = new Student();            student.setName(&quot;小信&quot; + i);            student.setAge(22);            student.setSex(&quot;男&quot;);            student.setDate(new Date());            list.add(student);        }        return list;    }</code></pre><hr><p><strong>官方文档：<a href="https://alibaba-easyexcel.github.io/quickstart/write.html" target="_blank" rel="noopener">点击</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]抓取淘宝商品信息</title>
      <link href="/2020/02/24/JAVA-%E6%8A%93%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/02/24/JAVA-%E6%8A%93%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>空闲时间写了一个抓取淘宝商品信息的小demo。</p><p>技术：java提供数据，thymeleaf渲染页面，可以一键下载所有图片保存到本地。</p><p><strong>频繁访问的话，淘宝加了限制。</strong></p><p>GitHub：<a href="https://github.com/1579886070/taobaoImage" target="_blank" rel="noopener">点击</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]进制转换</title>
      <link href="/2020/02/15/Other-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/02/15/Other-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p><strong>公式：除二取余，讲要转换的数除以二，计算出商和余数，得到的商不为0时继续除二。最后将余数倒着排序即可</strong><br><img src="http://image.xiaoxinyes.club/2020021501%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="十进制转二进制"></p><hr><h3 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h3><p><strong>将二进制从右至左的每个数乘以2的相应次方。</strong></p><p>例如：101转十进制</p><p>1乘2的0次方+0乘2的2次方+1乘2的3次方=5</p><hr><h3 id="二进制与八进制互换"><a href="#二进制与八进制互换" class="headerlink" title="二进制与八进制互换"></a>二进制与八进制互换</h3><p><strong>将二进制从右向左每三位分成一组，然后每段的三位数对应八进制的一位(八进制以0开头)</strong></p><p> <strong>二进制与八进制数值对应表</strong> </p><table><thead><tr><th align="left">二进制</th><th align="left">八进制</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">0</td></tr><tr><td align="left">001</td><td align="left">1</td></tr><tr><td align="left">010</td><td align="left">2</td></tr><tr><td align="left">011</td><td align="left">3</td></tr><tr><td align="left">100</td><td align="left">4</td></tr><tr><td align="left">101</td><td align="left">5</td></tr><tr><td align="left">110</td><td align="left">6</td></tr><tr><td align="left">111</td><td align="left">7</td></tr></tbody></table><hr><h3 id="二进制与十六进制互换"><a href="#二进制与十六进制互换" class="headerlink" title="二进制与十六进制互换"></a>二进制与十六进制互换</h3><p><strong>将二进制从右向左每四位分成一组，然后每段的四位数对应十六进制的一位(十六进制以0x或者0X开头)</strong></p><p> <strong>二进制与八进制数值对应表</strong> </p><table><thead><tr><th align="left">二进制</th><th align="left">八进制</th><th></th><th align="left">二进制</th><th align="left">八进制</th></tr></thead><tbody><tr><td align="left">0000</td><td align="left">0</td><td></td><td align="left">1000</td><td align="left">8</td></tr><tr><td align="left">0001</td><td align="left">1</td><td></td><td align="left">1001</td><td align="left">9</td></tr><tr><td align="left">0010</td><td align="left">2</td><td></td><td align="left">1010</td><td align="left">A</td></tr><tr><td align="left">0011</td><td align="left">3</td><td></td><td align="left">1011</td><td align="left">B</td></tr><tr><td align="left">0100</td><td align="left">4</td><td></td><td align="left">1100</td><td align="left">C</td></tr><tr><td align="left">0101</td><td align="left">5</td><td></td><td align="left">1101</td><td align="left">D</td></tr><tr><td align="left">0110</td><td align="left">6</td><td></td><td align="left">1110</td><td align="left">E</td></tr><tr><td align="left">0111</td><td align="left">7</td><td></td><td align="left">1111</td><td align="left">F</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]小知识之反斜杠</title>
      <link href="/2020/02/14/JAVA-%E5%B0%8F%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%8F%8D%E6%96%9C%E6%9D%A0/"/>
      <url>/2020/02/14/JAVA-%E5%B0%8F%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%8F%8D%E6%96%9C%E6%9D%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>在java中，反斜杠(\)是一个特殊的字符，作用为转义。</p><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><table><thead><tr><th align="left">字符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">常见的转义字符</td><td align="left"></td></tr><tr><td align="left">\r</td><td align="left">表示回车符号，光标在当前行的开头</td></tr><tr><td align="left">\n</td><td align="left">表示换行符号，到下一行的开头</td></tr><tr><td align="left">\t</td><td align="left">表示制表符号，同tab</td></tr><tr><td align="left">\b</td><td align="left">表示退格符号</td></tr><tr><td align="left">含有特殊意义的转义字符</td><td align="left"></td></tr><tr><td align="left">\‘</td><td align="left">表示单引号</td></tr><tr><td align="left">\“</td><td align="left">表示双引号</td></tr><tr><td align="left">\\</td><td align="left">表示字面意思上的\</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Angular]搜索持久化</title>
      <link href="/2020/02/13/Angular-%E6%90%9C%E7%B4%A2%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2020/02/13/Angular-%E6%90%9C%E7%B4%A2%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>类似与淘宝/京东等，搜索关键字，保留搜索历史记录。</p><h2 id="新建search组件"><a href="#新建search组件" class="headerlink" title="新建search组件"></a>新建search组件</h2><pre><code>ng g component components/search</code></pre><h2 id="新建服务"><a href="#新建服务" class="headerlink" title="新建服务"></a>新建服务</h2><p>可以用于公用，我理解为java中的类一样。</p><pre><code>ng g service services/storage</code></pre><h2 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h2><p>search.component.html</p><pre><code>&lt;div class=&quot;search&quot;&gt;    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;keyWord&quot;&gt;&lt;button (click)=&quot;doSearch()&quot;&gt;搜索&lt;/button&gt;    &lt;hr&gt;    搜索记录    &lt;hr&gt;    &lt;ul&gt;        &lt;li *ngFor=&quot;let item of historyList;let key=index;&quot;&gt;            {{item}}---            &lt;button (click)=&quot;deleteSearch(key)&quot;&gt;X&lt;/button&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>search.component.css</p><pre><code>.search {  width: 400px;  margin: 20px auto;}button {  height: 32px;  width: 80px;}input {  margin-bottom: 20px;  width: 300px;  height: 30px;}ul {  list-style-type: none;}</code></pre><h2 id="根模块引入服务"><a href="#根模块引入服务" class="headerlink" title="根模块引入服务"></a>根模块引入服务</h2><pre><code>import { BrowserModule } from &#39;@angular/platform-browser&#39;;import { NgModule } from &#39;@angular/core&#39;;//引入表单相关模块import { FormsModule } from &#39;@angular/forms&#39;;import { AppRoutingModule } from &#39;./app-routing.module&#39;;import { AppComponent } from &#39;./app.component&#39;;import { FormComponent } from &#39;./components/form/form.component&#39;;import { SearchComponent } from &#39;./components/search/search.component&#39;;//引入服务import { StorageService } from &#39;./services/storage.service&#39;;@NgModule({  declarations: [    AppComponent,    FormComponent,    SearchComponent  ],  imports: [    BrowserModule,    AppRoutingModule,    FormsModule  ],  //引入服务  providers: [StorageService],  bootstrap: [AppComponent]})export class AppModule { }</code></pre><h2 id="服务模块中的方法"><a href="#服务模块中的方法" class="headerlink" title="服务模块中的方法"></a>服务模块中的方法</h2><p>storage.service.ts</p><pre><code>import { Injectable } from &#39;@angular/core&#39;;@Injectable({  providedIn: &#39;root&#39;})export class StorageService {  constructor() { }  set(key:string,value:any){    localStorage.setItem(key,JSON.stringify(value));  }  get(key:string) {   return JSON.parse(localStorage.getItem(key));  }  remove(key:string){    localStorage.removeItem(key);  }}</code></pre><h2 id="search组件中调用"><a href="#search组件中调用" class="headerlink" title="search组件中调用"></a>search组件中调用</h2><ul><li>注意同样需要引入服务才可以使用</li></ul><pre><code>import { Component, OnInit } from &#39;@angular/core&#39;;//引入服务import { StorageService } from &#39;../../services/storage.service&#39;;@Component({  selector: &#39;app-search&#39;,  templateUrl: &#39;./search.component.html&#39;,  styleUrls: [&#39;./search.component.css&#39;]})export class SearchComponent implements OnInit {  public keyWord: string;  public historyList: any[] = [];  //构造函数注入服务  constructor(public storage: StorageService) {  }  ngOnInit() {    //刷新页面持久化    var historyList: any = this.storage.get(&#39;historyList&#39;);    if (historyList) {      this.historyList = this.storage.get(&#39;historyList&#39;);    }  }  doSearch() {    //避免重复数据    if (this.historyList.indexOf(this.keyWord) == -1) {      this.historyList.push(this.keyWord);      this.storage.set(&#39;historyList&#39;, this.historyList);    }    this.keyWord = &#39;&#39;;  }  deleteSearch(key: number) {    this.historyList.splice(key, 1);    this.storage.set(&#39;historyList&#39;, this.historyList);  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Angular]表单及双向数据绑定</title>
      <link href="/2020/02/12/Angular-%E8%A1%A8%E5%8D%95%E5%8F%8A%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/12/Angular-%E8%A1%A8%E5%8D%95%E5%8F%8A%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="引入表单相关模块"><a href="#引入表单相关模块" class="headerlink" title="引入表单相关模块"></a>引入表单相关模块</h2><p>引入表单相关模块，才可以使用双向数据绑定。</p><p>app.module.ts</p><pre><code>//引入表单相关模块import { FormsModule } from &#39;@angular/forms&#39;;</code></pre><h2 id="新建一个form组件"><a href="#新建一个form组件" class="headerlink" title="新建一个form组件"></a>新建一个form组件</h2><pre><code>ng g component components/form</code></pre><h2 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h2><p>form.component.html</p><pre><code>&lt;h2&gt;表单演示&lt;/h2&gt;&lt;div class=&quot;form&quot;&gt;    &lt;ul&gt;        &lt;li&gt;            姓名：&lt;input type=&quot;text&quot; [(ngModel)]=&quot;formInfo.inputValue&quot; /&gt;        &lt;/li&gt;        &lt;li&gt;            性别：            &lt;input type=&quot;radio&quot; value=&quot;1&quot; name=&quot;sex&quot; id=&quot;sex1&quot; [(ngModel)]=&quot;formInfo.sex&quot;&gt;&lt;label for=&quot;sex1&quot;&gt; 男&lt;/label&gt;            &lt;input type=&quot;radio&quot; value=&quot;2&quot; name=&quot;sex&quot; id=&quot;sex2&quot; [(ngModel)]=&quot;formInfo.sex&quot;&gt;&lt;label for=&quot;sex2&quot;&gt; 女&lt;/label&gt;        &lt;/li&gt;        &lt;li&gt;            城市：            &lt;select [(ngModel)]=&quot;formInfo.defaultCity&quot;&gt;                &lt;option *ngFor=&quot;let item of formInfo.city&quot; [value]=&quot;item&quot;&gt;{{item}}&lt;/option&gt;            &lt;/select&gt;        &lt;/li&gt;        &lt;li&gt;            爱好：            &lt;span *ngFor=&quot;let item of formInfo.hobby;let key=index;&quot;&gt;                &lt;input type=&quot;checkbox&quot; [id]=&quot;&#39;check&#39;+key&quot; [(ngModel)]=&quot;item.cheked&quot;/&gt;&lt;label [for]=&quot;&#39;check&#39;+key&quot;&gt; {{item.title}}&lt;/label&gt;            &lt;/span&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;textarea name=&quot;mark&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; [(ngModel)]=&quot;formInfo.mark&quot;&gt;&lt;/textarea&gt;        &lt;/li&gt;    &lt;/ul&gt;    &lt;button (click)=&quot;dosubmit()&quot;&gt;获取内容&lt;/button&gt;    &lt;br /&gt;    &lt;pre&gt;        {{formInfo|json}}    &lt;/pre&gt;&lt;/div&gt;</code></pre><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><p>form.component.css</p><pre><code>h2{    text-align: center;}.form{    width: 400px;    margin: auto;    border: 2px solid #000;}button{    width: 100px;    float: right;}ul{    list-style-type: none;}li{    line-height: 50px;}</code></pre><h2 id="模块代码"><a href="#模块代码" class="headerlink" title="模块代码"></a>模块代码</h2><p>form.component.ts</p><pre><code>import { Component, OnInit } from &#39;@angular/core&#39;;@Component({  selector: &#39;app-form&#39;,  templateUrl: &#39;./form.component.html&#39;,  styleUrls: [&#39;./form.component.css&#39;]})export class FormComponent implements OnInit {  public citys: any[] = [&#39;长沙&#39;, &#39;杭州&#39;, &#39;苏州&#39;];  public formInfo: any = {    inputValue: &#39;&#39;,    sex: &#39;1&#39;,    city: this.citys,    defaultCity:this.citys[0],    hobby:[{      title:&#39;画画&#39;,      cheked:false    },{      title:&#39;弹吉他&#39;,      cheked:false    },{      title:&#39;运动&#39;,      cheked:false    },],    mark:&#39;&#39;  }  constructor() { }  ngOnInit() {  }  dosubmit() {      console.log(this.formInfo);  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Angular]常用组件与使用</title>
      <link href="/2020/02/05/Angular-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/05/Angular-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>记录一下笔记</p><p>html代码放在xxx.component.html中</p><p>组件代码放在xxx.component.ts中</p><p>css放在xxx.component.css中</p><hr><h2 id="angular绑定数据"><a href="#angular绑定数据" class="headerlink" title="angular绑定数据"></a>angular绑定数据</h2><pre><code>&lt;h1&gt;angular模板绑定数据&lt;/h1&gt;&lt;h3&gt;{{title}}&lt;/h3&gt;&lt;h3&gt;{{msg}}&lt;/h3&gt;&lt;h3&gt;{{username}}&lt;/h3&gt;&lt;h3&gt;{{userage}}&lt;/h3&gt;&lt;h3&gt;{{userinfo.age}}&lt;/h3&gt;&lt;h3&gt;{{message}}&lt;/h3&gt;</code></pre><pre><code>  public title=&#39;我是一个新闻组件&#39;;  msg=&#39;我是一个新闻组件的msg&#39;;  public username:string = &quot;我是一个姓名&quot;;  public userage:any=111;  public userinfo:object={    age:11  }  public message:string = &#39;这是消息&#39;;</code></pre><hr><h2 id="angular绑定属性"><a href="#angular绑定属性" class="headerlink" title="angular绑定属性"></a>angular绑定属性</h2><pre><code>&lt;h1&gt;angular模板绑定属性&lt;/h1&gt;&lt;div title=&quot;我是一个属性&quot;&gt;    鼠标瞄上去看一下&lt;/div&gt;&lt;div [title]=&quot;msg&quot;&gt;    鼠标再瞄上去看一下&lt;/div&gt;</code></pre><pre><code>public msg=&#39;我是一个属性&#39;;</code></pre><hr><h2 id="angular绑定html"><a href="#angular绑定html" class="headerlink" title="angular绑定html"></a>angular绑定html</h2><pre><code>&lt;h1&gt;angular模板绑定html&lt;/h1&gt;&lt;div&gt;    {{content}}&lt;/div&gt;&lt;br&gt;&lt;span [innerHTML]=&#39;content&#39; class=&quot;red&quot;&gt;&lt;/span&gt;</code></pre><pre><code> public content:string=&quot;&lt;h2&gt;我是一个html标签&lt;/h2&gt;&quot;</code></pre><pre><code>.red{    color:red;}</code></pre><hr><h2 id="angular做简单的运算、"><a href="#angular做简单的运算、" class="headerlink" title="angular做简单的运算、"></a>angular做简单的运算、</h2><pre><code>&lt;h1&gt;angular做简单的运算&lt;/h1&gt;&lt;h3&gt;1+2={{1+2}}&lt;/h3&gt;</code></pre><hr><h2 id="angular数据循环"><a href="#angular数据循环" class="headerlink" title="angular数据循环"></a>angular数据循环</h2><pre><code>&lt;ul&gt;    &lt;li *ngFor=&quot;let item of arr&quot;&gt;        {{item}}    &lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;    &lt;li *ngFor=&quot;let item of list&quot;&gt;        {{item}}    &lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;    &lt;li *ngFor=&quot;let item of userlist&quot;&gt;        {{item.username}}---{{item.userage}}    &lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;    &lt;li *ngFor=&quot;let item of cars&quot;&gt;        &lt;h3&gt;{{item.brand}}&lt;/h3&gt;        &lt;ol&gt;            &lt;li *ngFor=&quot;let car of item.list&quot;&gt;                {{car.title}}---{{car.price}}            &lt;/li&gt;        &lt;/ol&gt;    &lt;/li&gt;&lt;/ul&gt;</code></pre><pre><code>//循环  public arr=[&#39;abc&#39;,&#39;123&#39;,&#39;哈哈&#39;];  public list:any=[&#39;zxc&#39;,&#39;321&#39;,&#39;嘻嘻&#39;];  public lists:Array&lt;string&gt;=[&#39;qwe&#39;,&#39;456&#39;,&#39;呵呵&#39;];  public userlist=[{    username:&#39;张三&#39;,    userage:20  },{    username:&#39;李四&#39;,    userage:22  },{    username:&#39;王五&#39;,    userage:25  }];  public cars:any[]=[    {    brand:&#39;宝马&#39;,    list:[      {        title:&#39;宝马01&#39;,        price:&#39;30万&#39;      },      {        title:&#39;宝马02&#39;,        price:&#39;40万&#39;       }    ]  },  {    brand:&#39;奔驰&#39;,    list:[      {        title:&#39;奔驰01&#39;,        price:&#39;30万&#39;      },      {        title:&#39;奔驰02&#39;,        price:&#39;40万&#39;       }    ]  }]</code></pre><hr><h2 id="angular引入图片"><a href="#angular引入图片" class="headerlink" title="angular引入图片"></a>angular引入图片</h2><pre><code>&lt;h1&gt;angular引入图片&lt;/h1&gt;&lt;img src=&quot;assets/images/100.jpg&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;img [src]=&quot;picUrl&quot;&gt;</code></pre><pre><code>  public picUrl: string = &quot;https://www.baidu.com/img/pc_1c6e30772d5e4103103bd460913332f9.png&quot;;</code></pre><hr><h2 id="angular显示数组索引"><a href="#angular显示数组索引" class="headerlink" title="angular显示数组索引"></a>angular显示数组索引</h2><pre><code>&lt;h1&gt;angular显示数组索引&lt;/h1&gt;&lt;ul&gt;    &lt;li *ngFor=&quot;let item of arr;let key=index&quot; [ngClass]=&quot;{&#39;red&#39;: key==0,&#39;orange&#39;:key==2}&quot;&gt;        {{item.name}}---{{key}}    &lt;/li&gt;&lt;/ul&gt;</code></pre><pre><code>  public arr: any[] = [{    name: &#39;张三&#39;,  }, {    name: &#39;王五&#39;,  }, {    name: &#39;赵六&#39;  }]</code></pre><hr><h2 id="angular条件判断"><a href="#angular条件判断" class="headerlink" title="angular条件判断"></a>angular条件判断</h2><pre><code>&lt;div *ngIf=&quot;flag&quot;&gt;    输出true&lt;/div&gt;&lt;div *ngIf=&quot;!flag&quot;&gt;    输出false&lt;/div&gt;&lt;div *ngIf=&quot;false;else other&quot;&gt;    输出false&lt;/div&gt;&lt;ng-template #other&gt;other content...&lt;/ng-template&gt;&lt;div [ngSwitch]=&quot;404&quot;&gt;    &lt;div *ngSwitchCase=&quot;200&quot;&gt;成功&lt;/div&gt;    &lt;div *ngSwitchCase=&quot;404&quot;&gt;找不到&lt;/div&gt;    &lt;div *ngSwitchCase=&quot;500&quot;&gt;内部服务错误&lt;/div&gt;    &lt;div *ngSwitchDefault&gt;其他错误&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code>  public flag: boolean = true;</code></pre><hr><h2 id="angular-ngStyle"><a href="#angular-ngStyle" class="headerlink" title="angular-ngStyle"></a>angular-ngStyle</h2><pre><code>&lt;h1&gt;angular-ngStyle&lt;/h1&gt;&lt;p style=&quot;color: red;&quot;&gt;我是一个标签&lt;/p&gt;&lt;p [ngStyle]=&quot;{color: &#39;blue&#39;}&quot;&gt;我也是一个标签&lt;/p&gt;</code></pre><hr><h2 id="angular-管道"><a href="#angular-管道" class="headerlink" title="angular-管道"></a>angular-管道</h2><pre><code>&lt;h1&gt;angular-管道&lt;/h1&gt;{{today|date:'yyyy-MM-dd HH:mm:ss'}}</code></pre><pre><code>public today: any = new Date();</code></pre><hr><h2 id="angular-点击事件"><a href="#angular-点击事件" class="headerlink" title="angular-点击事件"></a>angular-点击事件</h2><pre><code>&lt;h1&gt;angular-点击事件&lt;/h1&gt;&lt;button (click)=&quot;run()&quot;&gt;点击&lt;/button&gt;</code></pre><pre><code> run(){    alert(&quot;触发点击事件&quot;)  }</code></pre><hr><h2 id="angular-表单事件"><a href="#angular-表单事件" class="headerlink" title="angular-表单事件"></a>angular-表单事件</h2><pre><code>&lt;h1&gt;angular-表单事件&lt;/h1&gt;&lt;input type=&quot;text&quot; (keyup)=&quot;keyup($event)&quot;/&gt;</code></pre><pre><code>  keyup(e){    if(e.keyCode==13){      console.log(&quot;按了一下回车&quot;);    }else{      //e.target 获取dom对象      console.log(e.target.value);    }  }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Angular]入门之运行项目</title>
      <link href="/2020/02/04/Angular-%E5%85%A5%E9%97%A8%E4%B9%8B%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/02/04/Angular-%E5%85%A5%E9%97%A8%E4%B9%8B%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h2><h2 id="2、安装cnpm"><a href="#2、安装cnpm" class="headerlink" title="2、安装cnpm"></a>2、安装cnpm</h2><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h2 id="3、安装angular"><a href="#3、安装angular" class="headerlink" title="3、安装angular"></a>3、安装angular</h2><pre><code>cnpm install -g @angular/cli</code></pre><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><pre><code>C:\Users\Administrator&gt;ng v     _                      _                 ____ _     ___    / \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|   / △ \ | &#39;_ \ / _` | | | | |/ _` | &#39;__|   | |   | |    | |  / ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | | /_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|                |___/Angular CLI: 8.3.24Node: 10.16.3OS: win32 x64Angular:...Package                      Version------------------------------------------------------@angular-devkit/architect    0.803.24@angular-devkit/core         8.3.24@angular-devkit/schematics   8.3.24@schematics/angular          8.3.24@schematics/update           0.803.24rxjs                         6.5.4</code></pre><h2 id="4、创建安装angular项目"><a href="#4、创建安装angular项目" class="headerlink" title="4、创建安装angular项目"></a>4、创建安装angular项目</h2><p>打开命令提示符窗口</p><pre><code>ng new demo</code></pre><h2 id="5、运行项目"><a href="#5、运行项目" class="headerlink" title="5、运行项目"></a>5、运行项目</h2><p>进入到文件夹下</p><pre><code>cd demo</code></pre><p>运行</p><pre><code>ng serve --open</code></pre><h2 id="6、访问"><a href="#6、访问" class="headerlink" title="6、访问"></a>6、访问</h2><p> <a href="http://localhost:4200/" target="_blank" rel="noopener">http://localhost:4200/</a></p><hr><h2 id="跳过npm安装"><a href="#跳过npm安装" class="headerlink" title="跳过npm安装"></a>跳过npm安装</h2><pre><code>ng new demo2 --skip-install</code></pre><pre><code>cnpm install</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]逻辑分页与物理分页</title>
      <link href="/2020/01/05/JAVA-%E9%80%BB%E8%BE%91%E5%88%86%E9%A1%B5%E4%B8%8E%E7%89%A9%E7%90%86%E5%88%86%E9%A1%B5/"/>
      <url>/2020/01/05/JAVA-%E9%80%BB%E8%BE%91%E5%88%86%E9%A1%B5%E4%B8%8E%E7%89%A9%E7%90%86%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>code：mybatis+springboot</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="逻辑分页"><a href="#逻辑分页" class="headerlink" title="逻辑分页"></a>逻辑分页</h3><p><strong>逻辑分页并不是返回分页结果，而是直接返回全部数据，再通过代码获取分页数据。</strong></p><h3 id="物理分页"><a href="#物理分页" class="headerlink" title="物理分页"></a>物理分页</h3><p><strong>使用mysql的limit关键字，直接返回分页结果。</strong></p><hr><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><pre><code>SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for student-- ----------------------------DROP TABLE IF EXISTS `student`;CREATE TABLE `student`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,  `age` int(11) DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;-- ------------------------------ Records of student-- ----------------------------INSERT INTO `student` VALUES (1, &#39;测试1&#39;, 11);INSERT INTO `student` VALUES (2, &#39;测试2&#39;, 22);INSERT INTO `student` VALUES (3, &#39;测试3&#39;, 14);INSERT INTO `student` VALUES (4, &#39;测试4&#39;, 16);INSERT INTO `student` VALUES (5, &#39;测试5&#39;, 32);INSERT INTO `student` VALUES (6, &#39;测试6&#39;, 23);SET FOREIGN_KEY_CHECKS = 1;</code></pre><h3 id="对应的实体类"><a href="#对应的实体类" class="headerlink" title="对应的实体类"></a>对应的实体类</h3><pre><code>public class Student {    //构造    private int id;    private String name;    private int age;    //get set}</code></pre><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.example&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;mybatis&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;2.1.1&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;!--注意：如果xml文件不放到resources下，那么需要配置以下代码，不然target下找不到--&gt;        &lt;resources&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/resources&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.*&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;true&lt;/filtering&gt;            &lt;/resource&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/java&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                    &lt;include&gt;**/*.yml&lt;/include&gt;                    &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;/includes&gt;            &lt;/resource&gt;        &lt;/resources&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><pre><code>#jdbc驱动spring.datasource.driverClassName = com.mysql.cj.jdbc.Driverspring.datasource.url = jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghaispring.datasource.username = ****spring.datasource.password = ****#mybatis#xml地址mybatis.mapper-locations=classpath:com/example/mybatis/dao/mapping/**.xml#控制台打印sqlmybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><blockquote><p>Controller –&gt; service –&gt; dao –&gt;xml</p></blockquote><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><pre><code>@RestControllerpublic class StudentController {    @Autowired    private SutndentServiceImpl studentService;    /**     * 物理分页     */    @GetMapping(&quot;physical-paging&quot;)    public Object getList1(@RequestParam(value = &quot;start&quot;, required = false, defaultValue = &quot;1&quot;) int start,                           @RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;3&quot;) int limit) {        List&lt;Student&gt; list = studentService.physicalPaging(start, limit);        return list;    }    /**     * 逻辑分页     */    @GetMapping(&quot;logical-paging&quot;)    public Object getList2(@RequestParam(value = &quot;start&quot;, required = false, defaultValue = &quot;1&quot;) int start,                           @RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;3&quot;) int limit) {        List&lt;Student&gt; list = studentService.logicalPaging(start, limit);        return list;    }}</code></pre><h3 id="service-实现类"><a href="#service-实现类" class="headerlink" title="service+实现类"></a>service+实现类</h3><pre><code>public interface StudentService {    /**     * 物理分页     *     * @param start 起始页     * @param limit 每页条数     * @return     */    List&lt;Student&gt; physicalPaging(int start, int limit);    /**     * 逻辑分页     *     * @param start     * @param limit     * @return     */    List&lt;Student&gt; logicalPaging(int start, int limit);}</code></pre><p>注意：实现类的@Service</p><pre><code>@Servicepublic class SutndentServiceImpl implements StudentService {    @Autowired    private StudentDao studentDao;    @Override    public List&lt;Student&gt; physicalPaging(int start, int limit) {        //这里是分页的关键        if (start &lt; 1) {            start = 1;        } else {            start = (start - 1) * limit;        }        List&lt;Student&gt; list = studentDao.getList(start, limit);        return list;    }    @Override    public List&lt;Student&gt; logicalPaging(int start, int limit) {        if (start &lt; 1) {            start = 1;        }        List&lt;Student&gt; list = studentDao.getAllList();        if((start-1)*limit &gt; list.size()){            return Collections.emptyList();        }        return list.subList((start - 1) * limit, ((start * limit) &gt; list.size() ? list.size() : (start * limit)));    }}</code></pre><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><p>注意：类上的@Mapper,文件多时可选择启动类上设置@MapperScan，这样不需要每个mapper加注解。</p><pre><code>@Mapperpublic interface StudentDao {    /**     * 注意:1、有@Mapper注解  2、一个以上的参数需要加@param     *     * @param start 起始页     * @param limit 每页多少条     * @return     */    List&lt;Student&gt; getList(@Param(&quot;start&quot;) int start, @Param(&quot;limit&quot;) int limit);    /**     * 获取全部数据     *     * @return     */    List&lt;Student&gt; getAllList();}</code></pre><h3 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.example.mybatis.dao.StudentDao&quot;&gt;    &lt;!-- 通用查询映射结果 --&gt;    &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.example.mybatis.baen.Student&quot;&gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;        &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;    &lt;/resultMap&gt;    &lt;!-- 通用查询结果列 --&gt;    &lt;sql id=&quot;Base_Column_List&quot;&gt;        id, name, age    &lt;/sql&gt;    &lt;select id=&quot;getList&quot; resultType=&quot;com.example.mybatis.baen.Student&quot;&gt;        select        &lt;include refid=&quot;Base_Column_List&quot;/&gt;        from student limit #{start},#{limit}    &lt;/select&gt;    &lt;select id=&quot;getAllList&quot; resultType=&quot;com.example.mybatis.baen.Student&quot;&gt;        select        &lt;include refid=&quot;Base_Column_List&quot;/&gt;        from student    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="逻辑分页接口测试"><a href="#逻辑分页接口测试" class="headerlink" title="逻辑分页接口测试"></a>逻辑分页接口测试</h3><pre><code>http://127.0.0.1:8080/logical-paging?start=1&amp;limit=2---[    {        &quot;id&quot;: 1,        &quot;name&quot;: &quot;测试1&quot;,        &quot;age&quot;: 11    },    {        &quot;id&quot;: 2,        &quot;name&quot;: &quot;测试2&quot;,        &quot;age&quot;: 22    }]</code></pre><h3 id="物理分页接口测试"><a href="#物理分页接口测试" class="headerlink" title="物理分页接口测试"></a>物理分页接口测试</h3><pre><code>http://127.0.0.1:8080/physical-paging?start=1&amp;limit=2---[    {        &quot;id&quot;: 1,        &quot;name&quot;: &quot;测试1&quot;,        &quot;age&quot;: 11    },    {        &quot;id&quot;: 2,        &quot;name&quot;: &quot;测试2&quot;,        &quot;age&quot;: 22    }]</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]记一次内存溢出</title>
      <link href="/2019/12/21/JAVA-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
      <url>/2019/12/21/JAVA-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>项目部署到服务器后，第二天发现异常，记录下排查过程。</p><h2 id="异常发现"><a href="#异常发现" class="headerlink" title="异常发现"></a>异常发现</h2><p>带有权限的账号，突然ssh连接不上服务器了，项目也出现访问不了的情况。后面尝试用root账号，意外的可以登录上。</p><pre><code>topjps</code></pre><p>发现CPU没啥明显的异常，项目进程也没有挂。于是进入项目，查看日志，发现日志中存在异常。</p><pre><code>2019-12-15 11:36:58.200 default [nioEventLoopGroup-4-2] ERROR o.r.client.handler.CommandsQueue - Exception occured. Channel: [id: 0x2f80895c, L:/172.16.149.12:60435 - R:172.16.149.13/172.16.149.13:6379]java.lang.OutOfMemoryError: unable to create new native thread    at java.lang.Thread.start0(Native Method)    at java.lang.Thread.start(Thread.java:717)    at io.netty.util.concurrent.ThreadPerTaskExecutor.execute(ThreadPerTaskExecutor.java:33)    at io.netty.util.internal.ThreadExecutorMap$1.execute(ThreadExecutorMap.java:57)    at io.netty.util.concurrent.SingleThreadEventExecutor.doStartThread(SingleThreadEventExecutor.java:895)    at io.netty.util.concurrent.SingleThreadEventExecutor.startThread(SingleThreadEventExecutor.java:866)    at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:759)    at io.netty.util.concurrent.AbstractScheduledEventExecutor.schedule(AbstractScheduledEventExecutor.java:232)    at io.netty.util.concurrent.AbstractScheduledEventExecutor.schedule(AbstractScheduledEventExecutor.java:155)    at io.netty.util.concurrent.AbstractEventExecutorGroup.schedule(AbstractEventExecutorGroup.java:50)    at org.redisson.client.RedisConnection.async(RedisConnection.java:205)    at org.redisson.client.RedisConnection.async(RedisConnection.java:191)    at org.redisson.client.RedisConnection.async(RedisConnection.java:183)    at org.redisson.client.handler.BaseConnectionHandler.channelActive(BaseConnectionHandler.java:68)</code></pre><p><strong>竟然内存溢出了</strong>,开始了一段分析过程。</p><hr><p>报错为无法创建线程<code>unable to create new native thread</code>。使用命令查看下是否有问题。</p><pre><code>pstree -a    //查看所有进程相关的线程pstree -p PID|wc -l    //查看指定进程的线程数</code></pre><p>发现一个项目竟然创建了接近3000线程。能大致推出这是代码有问题，线程未释放导致溢出，但是为什么服务器有权限的账号在发生异常时登录不上了，而root可以呢？</p><h3 id="账号登录不上解决方法"><a href="#账号登录不上解决方法" class="headerlink" title="账号登录不上解决方法"></a>账号登录不上解决方法</h3><p>把服务kill之后，发现用权限的账户可以登录了，原因在于最初时用该账户执行的项目，那么也就是说跟权限配置有关了。用ulimit -a查看下，发现max user processes只有<strong>4096</strong>,这样一算的话启动那些java服务加起来创建的线程数正好就超过这个数了，提高该配置之后，未发现之前出现的权限用户登录不上的情况。</p><pre><code>ulimit -a---core file size          (blocks, -c) unlimiteddata seg size           (kbytes, -d) unlimitedscheduling priority             (-e) 0file size               (blocks, -f) unlimitedpending signals                 (-i) 63459max locked memory       (kbytes, -l) 32000max memory size         (kbytes, -m) unlimitedopen files                      (-n) 1000000pipe size            (512 bytes, -p) 8POSIX message queues     (bytes, -q) 8192000real-time priority              (-r) 0stack size              (kbytes, -s) 8192cpu time               (seconds, -t) unlimitedmax user processes              (-u) 4096virtual memory          (kbytes, -v) unlimitedfile locks                      (-x) unlimited</code></pre><hr><h3 id="堆栈分析"><a href="#堆栈分析" class="headerlink" title="堆栈分析"></a>堆栈分析</h3><p>为了排查错误，项目开着，发现线程一直在慢慢累加，最终到了10000多，不再继续，但也没有释放。linux中<strong>jstack</strong>分析下线程堆栈情况。</p><pre><code>jstack -l PID &gt; jstack.log</code></pre><p>日志</p><pre><code>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.212-b10 mixed mode):&quot;nioEventLoopGroup-1240-13&quot; #13017 prio=10 os_prio=0 tid=0x00007f1278f46000 nid=0x374 runnable [0x00007f1264b4a000]   java.lang.Thread.State: RUNNABLE    at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)    at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)    at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93)    at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)    - locked &lt;0x0000000768f9f6d8&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)    - locked &lt;0x0000000768f9f6c8&gt; (a java.util.Collections$UnmodifiableSet)    - locked &lt;0x0000000768f9f6f0&gt; (a sun.nio.ch.EPollSelectorImpl)    at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)    at io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:62)    at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:791)    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:439)    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:906)    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)    at java.lang.Thread.run(Thread.java:748)   Locked ownable synchronizers:    - None&quot;nioEventLoopGroup-1240-16&quot; #13016 prio=10 os_prio=0 tid=0x00007f15700d4800 nid=0x373 runnable [0x00007f1264c4b000]   java.lang.Thread.State: RUNNABLE    at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)    at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)    at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93)    at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)    - locked &lt;0x0000000768fa15e8&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)    - locked &lt;0x0000000768fa15d8&gt; (a java.util.Collections$UnmodifiableSet)    - locked &lt;0x0000000768fa1600&gt; (a sun.nio.ch.EPollSelectorImpl)    at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)    at io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:62)    at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:791)    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:439)    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:906)    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)    at java.lang.Thread.run(Thread.java:748)   Locked ownable synchronizers:    - None&quot;nioEventLoopGroup-1240-14&quot; #13015 prio=10 os_prio=0 tid=0x00007f1578006800 nid=0x362 runnable [0x00007f1264d4c000]   java.lang.Thread.State: RUNNABLE    at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)    at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)    at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93)    at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)    - locked &lt;0x0000000768f9d840&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)    - locked &lt;0x0000000768f9d830&gt; (a java.util.Collections$UnmodifiableSet)    - locked &lt;0x0000000768f9d858&gt; (a sun.nio.ch.EPollSelectorImpl)    at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)    at io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:62)    at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:791)    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:439)    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:906)    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)    at java.lang.Thread.run(Thread.java:748)   Locked ownable synchronizers:    - None</code></pre><p>以上，能看到nioEventLoopGroup一直处于运行状态，为了更加直观的查看，我本地运行，使用jdk自带的jvm分析工具(在jdk安装目录，bin目录下的jvisualvm.exe),，发现随着时间的推移，nioEventLoopGroup创建数量越来越多。<br><img src="http://image.xiaoxinyes.club/2019122101.png" alt></p><h3 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a>代码追踪</h3><p>查询代码后，发现有个定时任务中循环创建了redisson，而每次创建琐时都会new NioEventLoopGroup();正是因为这个每次创建后一直处于执行中，JVM垃圾回收并不会处理，所以溢出了。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我的处理方法<br>1、初始化之创建一个线程池。</p><pre><code>private static NioEventLoopGroup nioEventLoopGroup;private static NioEventLoopGroup getNioEventLoopGroup() {        if (nioEventLoopGroup == null) {            nioEventLoopGroup = new NioEventLoopGroup();        }        return nioEventLoopGroup;    }</code></pre><p>2、或者释放</p><pre><code>nioEventLoopGroup.shutdownGracefully();</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ERROR]关于下划线引发的错误</title>
      <link href="/2019/12/20/ERROR-%E5%85%B3%E4%BA%8E%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%95%E5%8F%91%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2019/12/20/ERROR-%E5%85%B3%E4%BA%8E%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%95%E5%8F%91%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>记录一次关于使用下划线出现的问题。前后端通信，自定义一些请求头参数，但是在调用过程中发现了异常。</p><pre><code>requet.getHeader(&quot;XXX_XXX&quot;);</code></pre><p>发现后端接收到的参数为空，而其他所有参数都可以获取到，唯独这个不行。联调之后，我们试着修改参数名称，改成XXX-XXX，这个时候可以获取到。</p><p>我们是nginx做负载均衡，经过查询一番相关资料，发现请求头中名称包含下划线时，nginx会被标记成无效。而这个也是可以通过nginx配置修改的。</p><pre><code>underscores_in_headers on</code></pre><hr><p>有些东西是规范，因为不规划引起的问题，有时会需要很长时间去寻找处理，就像之前域名解析包含下划线，nginx有些也无法识别。</p>]]></content>
      
      
      <categories>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]重装系统后恢复Hexo博客</title>
      <link href="/2019/12/20/Other-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E6%81%A2%E5%A4%8DHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/20/Other-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E6%81%A2%E5%A4%8DHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>电脑加了个固态，重装了下，所以有些资料需要迁移一下。</p><h2 id="git和nodo安装"><a href="#git和nodo安装" class="headerlink" title="git和nodo安装"></a>git和nodo安装</h2><p>先安装git和nodo.js,git生成密钥添加到自己的git账户</p><hr><h2 id="处理备份的blog文件"><a href="#处理备份的blog文件" class="headerlink" title="处理备份的blog文件"></a>处理备份的blog文件</h2><p>删除不必要的文件，保留如下：<br><img src="http://image.xiaoxinyes.club/201912202.png" alt></p><hr><h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><pre><code>git initgit remote add origin git@github.com:XXX/XXX.github.io.git</code></pre><p><img src="http://image.xiaoxinyes.club/201912201.png" alt></p><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre><code>npm install hexo --save</code></pre><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre><code>npm install  </code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>hexo ghexo shexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MySql]关于查询的一次异常排查</title>
      <link href="/2019/12/05/MySql-%E5%85%B3%E4%BA%8E%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%80%E6%AC%A1%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/"/>
      <url>/2019/12/05/MySql-%E5%85%B3%E4%BA%8E%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%80%E6%AC%A1%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>最近因为一个java项目，其中查询一组数据响应十分慢。后面发现对一张表有40万条左右的数据，单表每次查询速度1S以上。事有蹊跷，开始研究!</p><h2 id="数据40万条"><a href="#数据40万条" class="headerlink" title="数据40万条"></a>数据40万条</h2><pre><code>SELECT count(*) FROM `lz_commodity_info`--条数 350000万左右</code></pre><hr><h2 id="一、SQL查询测试"><a href="#一、SQL查询测试" class="headerlink" title="一、SQL查询测试"></a>一、SQL查询测试</h2><h3 id="执行sql查看执行时间"><a href="#执行sql查看执行时间" class="headerlink" title="执行sql查看执行时间"></a>执行sql查看执行时间</h3><pre><code>SELECT * FROM `lz_commodity_info` where commodity_id=544844787596</code></pre><p>** 响应信息如下,发现竟然查询需要1秒以上。虽然不是主键id,但是也不应该这么慢。**</p><pre><code>SELECT * FROM `lz_commodity_info` where commodity_id=544844787596OK时间: 1.13s</code></pre><hr><h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><p>查看没有添加索引，先加个索引看看。</p><pre><code>alter table `lz_commodity_info` add INDEX(commodity_id)</code></pre><h3 id="再次查询"><a href="#再次查询" class="headerlink" title="再次查询"></a>再次查询</h3><p>** 响应信息如下,竟然还是这么慢，事情没我想得那么简单。**</p><pre><code>SELECT * FROM `lz_commodity_info` where commodity_id=544844787596OK时间: 1.107s</code></pre><hr><h3 id="查看sql"><a href="#查看sql" class="headerlink" title="查看sql"></a>查看sql</h3><p>** 而后查看sql发现，定义的类型是varchar。那么尝试修改下sql语句，加上单引号查询试试。**</p><p><code>`commodity_id` varchar(50)</code></p><pre><code>SELECT * FROM `lz_commodity_info` where commodity_id=&#39;544844787596&#39;</code></pre><p>** 响应信息如下，发现从蜗牛直接到火箭了，直接起飞，那么导致慢的原因也浮现出来了。 **</p><pre><code>SELECT * FROM `lz_commodity_info` where commodity_id=&#39;544844787596&#39;OK时间: 0.002s</code></pre><hr><h2 id="二、疑问开始"><a href="#二、疑问开始" class="headerlink" title="二、疑问开始"></a>二、疑问开始</h2><h3 id="删除索引再测试"><a href="#删除索引再测试" class="headerlink" title="删除索引再测试"></a>删除索引再测试</h3><pre><code>alter table `lz_commodity_info` drop INDEX `commodity_id`</code></pre><h3 id="再次查看速度"><a href="#再次查看速度" class="headerlink" title="再次查看速度"></a>再次查看速度</h3><p>** 发现速度竟然基本差不多，都长达1s以上了 **</p><pre><code>时间: 1.099s------------时间: 1.077s------------</code></pre><hr><h3 id="explain测试"><a href="#explain测试" class="headerlink" title="explain测试"></a>explain测试</h3><p>sql前+explain 查询sql的执行情况。</p><ul><li>1、没加索引<br>不管是加上单引号还是不加。返回如下：</li></ul><p><img src="http://image.xiaoxinyes.club/20191205000538.png" alt="查询结果"></p><hr><ul><li>2、加上索引<br>不加单引号，返回结果跟上面的一样。</li></ul><p>加单引号，可以看到这才走了索引。返回结果如下：<br><img src="http://image.xiaoxinyes.club/20191205001000.png" alt="查询结果"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><blockquote><p>1、查询时添加索引可以极大的优化查询速度；</p><p>2、定义的是varchar类型的字段，添加索引，查询切记要加上单引号；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]缓存之ConcurrentMapCacheManager</title>
      <link href="/2019/11/27/JAVA-%E7%BC%93%E5%AD%98%E4%B9%8BConcurrentMapCacheManager/"/>
      <url>/2019/11/27/JAVA-%E7%BC%93%E5%AD%98%E4%B9%8BConcurrentMapCacheManager/</url>
      
        <content type="html"><![CDATA[<p>我用mybatis+springboot默认的ConcurrentMapCacheManager缓存演示。maven依赖导入mybatis和web相关即可。</p><h2 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h2><p>这里显示打印sql,是方便查看调用方法时是不是走缓存拿去数据，如果是的则不会打印sql日志。</p><pre><code>spring:  datasource:    password: 1579886070    username: root    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsemybatis:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印sql</code></pre><hr><h2 id="二、sql"><a href="#二、sql" class="headerlink" title="二、sql"></a>二、sql</h2><pre><code>CREATE TABLE `student` (  `id` int(11) NOT NULL,  `name` varchar(255) DEFAULT NULL,  `age` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><hr><h2 id="三、service和实现类"><a href="#三、service和实现类" class="headerlink" title="三、service和实现类"></a>三、service和实现类</h2><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><pre><code>package xyz.zx21.demo.service;import xyz.zx21.demo.vo.Student;import java.util.List;public interface StudentService {    Student add(Student student);    boolean deleteById(int id);    Student selectById(Student student);}</code></pre><h3 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h3><p><strong>@CachePut:新增或者将更新的数据存到缓存，名称为student,key为student的id。</strong></p><p><strong>@CacheEvic:删除key为id的缓存</strong></p><p><strong>@Cacheable:将student的id作为Key缓存到student中</strong></p><p>没有指定key的话，方法参数作为key存储到缓存中。</p><pre><code>package xyz.zx21.demo.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import xyz.zx21.demo.mapper.StudentMapper;import xyz.zx21.demo.service.StudentService;import xyz.zx21.demo.vo.Student;import java.util.List;@Servicepublic class StudentServiceImlp implements StudentService {    @Autowired    private StudentMapper studentMapper;    @Override    @CachePut(value = &quot;student&quot;, key = &quot;#student.id&quot;)    public Student add(Student student) {        if(studentMapper.insertStudent(student)&gt;0){            return student;        }        return null;    }    @Override    @CacheEvict(value = &quot;student&quot;)    public boolean deleteById(int id) {        return studentMapper.deleteStudent(id);    }    @Override    @Cacheable(value = &quot;student&quot;, key = &quot;#student.id&quot;)    public Student selectById(Student student) {        return studentMapper.selectById(student);    }}</code></pre><h2 id="四、controller"><a href="#四、controller" class="headerlink" title="四、controller"></a>四、controller</h2><pre><code>package xyz.zx21.demo.controller;import org.apache.ibatis.annotations.Param;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import xyz.zx21.demo.service.StudentService;import xyz.zx21.demo.vo.Student;import xyz.zx21.demo.vo.StudentVO;@RestController@RequestMappingpublic class StudentController {    @Autowired    private StudentVO studentVO;    @Autowired    private StudentService studentService;    /**     * 添加数据     *     * @return     */    @GetMapping(&quot;addStu&quot;)    public Object insertStudent(Student student) {        return studentService.add(student);    }    /**     * 根据id删除数据     *     * @param id     * @return     */    @GetMapping(&quot;delete&quot;)    public Object delete(@Param(&quot;id&quot;) int id) {        return studentService.deleteById(id);    }    /**     * 根据id查找     *     * @param student     * @return     */    @GetMapping(&quot;selectOne&quot;)    public Object selectOne(Student student) {        return studentService.selectById(student);    }}</code></pre><h2 id="五、启动类"><a href="#五、启动类" class="headerlink" title="五、启动类"></a>五、启动类</h2><p>注意加上@EnableCaching注解，开启缓存支持。</p><pre><code>package xyz.zx21.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cache.annotation.EnableCaching;@SpringBootApplication@EnableCachingpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication app = new SpringApplication(DemoApplication.class);        app.run(args);    }}</code></pre><hr><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="1、添加数据存入缓存"><a href="#1、添加数据存入缓存" class="headerlink" title="1、添加数据存入缓存"></a>1、添加数据存入缓存</h3><p>请求：<br><code>http://127.0.0.1:8080/addStu?id=3&amp;name=小信&amp;age=23</code></p><p>返回：</p><pre><code>{    &quot;id&quot;: 3,    &quot;name&quot;: &quot;小信&quot;,    &quot;age&quot;: 23}</code></pre><p>idea日志：</p><pre><code>JDBC Connection [HikariProxyConnection@1383776946 wrapping com.mysql.jdbc.JDBC4Connection@59329e8b] will not be managed by Spring==&gt;  Preparing: insert into student(id,name,age) values (?,?,?) ==&gt; Parameters: 3(Integer), 小信(String), 23(Integer)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@668ffe2e]</code></pre><h3 id="2、根据id去缓存查数据"><a href="#2、根据id去缓存查数据" class="headerlink" title="2、根据id去缓存查数据"></a>2、根据id去缓存查数据</h3><p>请求：<br><code>http://127.0.0.1:8080/selectOne?id=3</code></p><p>返回：</p><pre><code>{    &quot;id&quot;: 3,    &quot;name&quot;: &quot;小信&quot;,    &quot;age&quot;: 23}</code></pre><p>idea日志：</p><pre><code>2019-11-27 22:45:23.211 DEBUG 10040 --- [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET &quot;/selectOne?id=3&quot;, parameters={masked}2019-11-27 22:45:23.211 DEBUG 10040 --- [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to xyz.zx21.demo.controller.StudentController#selectOne(Student)2019-11-27 22:45:23.213 DEBUG 10040 --- [nio-8080-exec-8] m.m.a.RequestResponseBodyMethodProcessor : Using &#39;application/json;q=0.8&#39;, given [text/html, application/xhtml+xml, image/webp, image/apng, application/signed-exchange;v=b3, application/xml;q=0.9, */*;q=0.8] and supported [application/json, application/*+json, application/json, application/*+json]2019-11-27 22:45:23.213 DEBUG 10040 --- [nio-8080-exec-8] m.m.a.RequestResponseBodyMethodProcessor : Writing [Student{id=3, name=&#39;小信&#39;, age=23}]2019-11-27 22:45:23.214 DEBUG 10040 --- [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK</code></pre><blockquote><p>可以看到它并没有去打印sql语句，直接从缓存取的数据</p></blockquote><ul><li>如果查询数据，指定为其他id，第一查询会走数据库，sql会打印到控制台，第二次再同样的请求则直接走缓存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]assembly自定义打包</title>
      <link href="/2019/11/24/JAVA-assembly%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%93%E5%8C%85/"/>
      <url>/2019/11/24/JAVA-assembly%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>在很多场景下，会有很多shell脚本或者需要操作一些配置，可以使用maven的assembly插件打出结构清晰的架构。</p><p>官网参考：<a href="http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html" target="_blank" rel="noopener">点击进入</a></p><h2 id="一、去掉springboot打包方式"><a href="#一、去掉springboot打包方式" class="headerlink" title="一、去掉springboot打包方式"></a>一、去掉springboot打包方式</h2><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><hr><h2 id="二、添加assembly依赖"><a href="#二、添加assembly依赖" class="headerlink" title="二、添加assembly依赖"></a>二、添加assembly依赖</h2><pre><code>    &lt;build&gt;        &lt;finalName&gt;zx-demo&lt;/finalName&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                &lt;configuration&gt;                    &lt;source&gt;1.8&lt;/source&gt;                    &lt;target&gt;1.8&lt;/target&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;                &lt;configuration&gt;                    &lt;archive&gt;                        &lt;manifest&gt;                            &lt;!--运行jar包时运行的主类，要求类全名--&gt;                            &lt;mainClass&gt;com.example.zxdemo.Application&lt;/mainClass&gt;                            &lt;!-- 是否指定项目classpath下的依赖 --&gt;                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;                            &lt;!-- 指定依赖的时候声明前缀 --&gt;                            &lt;classpathPrefix&gt;./&lt;/classpathPrefix&gt;                        &lt;/manifest&gt;                        &lt;manifestEntries&gt;                            &lt;Class-Path&gt;../conf/ ../resources/&lt;/Class-Path&gt;                        &lt;/manifestEntries&gt;                    &lt;/archive&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                &lt;configuration&gt;                    &lt;descriptors&gt;                        &lt;descriptor&gt;src/main/assembly/assembly.xml&lt;/descriptor&gt;                    &lt;/descriptors&gt;                &lt;/configuration&gt;                &lt;executions&gt;                    &lt;execution&gt;&lt;!-- 配置执行器 --&gt;                        &lt;id&gt;make-assembly&lt;/id&gt;                        &lt;phase&gt;package&lt;/phase&gt;&lt;!-- 绑定到package生命周期阶段上 --&gt;                        &lt;goals&gt;                            &lt;goal&gt;single&lt;/goal&gt;&lt;!-- 只运行一次 --&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;</code></pre><ul><li><p>可以看到依赖中写了src/main/assembly/assembly.xml，这是配置文件存放的位置。</p><h2 id="三、assembly-xml"><a href="#三、assembly-xml" class="headerlink" title="三、assembly.xml"></a>三、assembly.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;assembly&gt;  &lt;id&gt;zx-demo&lt;/id&gt;  &lt;formats&gt;      &lt;format&gt;tar&lt;/format&gt;&lt;!--打包的文件格式,也可以有：war zip--&gt;  &lt;/formats&gt;  &lt;!--tar.gz压缩包下是否生成和项目名相同的根目录--&gt;  &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;  &lt;dependencySets&gt;      &lt;dependencySet&gt;          &lt;!--是否把本项目添加到依赖文件夹下--&gt;          &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;          &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;          &lt;!--将scope为runtime的依赖包打包--&gt;          &lt;scope&gt;runtime&lt;/scope&gt;      &lt;/dependencySet&gt;  &lt;/dependencySets&gt;  &lt;fileSets&gt;      &lt;fileSet&gt;          &lt;directory&gt;src/main/bin&lt;/directory&gt;          &lt;outputDirectory&gt;./&lt;/outputDirectory&gt;      &lt;/fileSet&gt;      &lt;fileSet&gt;          &lt;directory&gt;src/main/resources&lt;/directory&gt;          &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;      &lt;/fileSet&gt;  &lt;/fileSets&gt;&lt;/assembly&gt;</code></pre></li><li><p>可以看到 src/main/bin 目录，可以自定义启动脚本。</p><h2 id="四、自定义脚本"><a href="#四、自定义脚本" class="headerlink" title="四、自定义脚本"></a>四、自定义脚本</h2><h3 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h3><pre><code>nohup java -jar -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/urandom ./lib/zx-demo.jar &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="stop-sh"><a href="#stop-sh" class="headerlink" title="stop.sh"></a>stop.sh</h3><pre><code>PID=`ps -ef | grep zx-demo.jar | grep -v grep | awk &#39;{print $2}&#39;`if [ -z $PID ]; then  echo Application is already stoppedelse  echo kill $PID  kill -s 9 $PIDfi</code></pre></li></ul><p>在assembly.xml中可自定义打包格式，打包后，target下会生成相应的压缩文件。<br><img src="http://" alt="图片"></p><p>conf：resources下的文件</p><p>lib：所有依赖的jar包</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="http://image.xiaoxinyes.club/20191124094523.png" alt="项目"></p><h3 id="解压后结构"><a href="#解压后结构" class="headerlink" title="解压后结构"></a>解压后结构</h3><p><img src="http://image.xiaoxinyes.club/20191124094451.png" alt="目录"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Mybatis注解操作表数据</title>
      <link href="/2019/11/21/JAVA-Mybatis%E6%B3%A8%E8%A7%A3%E6%93%8D%E4%BD%9C%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/11/21/JAVA-Mybatis%E6%B3%A8%E8%A7%A3%E6%93%8D%E4%BD%9C%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-mybatis演示"><a href="#springboot-mybatis演示" class="headerlink" title="springboot+mybatis演示"></a>springboot+mybatis演示</h1><p>@Insert/@Delete/@Select/@Update</p><hr><h2 id="一、依赖"><a href="#一、依赖" class="headerlink" title="一、依赖"></a>一、依赖</h2><pre><code>        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;2.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.25&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h2 id="二、启动类"><a href="#二、启动类" class="headerlink" title="二、启动类"></a>二、启动类</h2><pre><code>@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication app = new SpringApplication(DemoApplication.class);        app.run(args);    }}</code></pre><h2 id="三、application-yml"><a href="#三、application-yml" class="headerlink" title="三、application,yml"></a>三、application,yml</h2><pre><code>spring:  datasource:    password: 1579886070    username: root    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsemybatis:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印sql</code></pre><h2 id="四、student数据表"><a href="#四、student数据表" class="headerlink" title="四、student数据表"></a>四、student数据表</h2><pre><code>CREATE TABLE `student` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) DEFAULT NULL,  `age` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;</code></pre><h2 id="五、来一个实体类"><a href="#五、来一个实体类" class="headerlink" title="五、来一个实体类"></a>五、来一个实体类</h2><pre><code>public class Student {    public Student() {    }    public Student(Integer id, String name, Integer age) {        this.id = id;        this.name = name;        this.age = age;    }    private Integer id;    private String name;    private Integer age;    //get    //set}</code></pre><h2 id="六、service和它的实现类"><a href="#六、service和它的实现类" class="headerlink" title="六、service和它的实现类"></a>六、service和它的实现类</h2><pre><code>public interface StudentService {    int add(Student student);    boolean deleteById(int id);    List&lt;Student&gt; selectAll();    boolean updateStudent(Student s);}</code></pre><pre><code>@Servicepublic class StudentServiceImlp implements StudentService {    @Autowired    private StudentMapper studentMapper;    @Override    public int add(Student student) {        return studentMapper.insertStudent(student);    }    @Override    public boolean deleteById(int id) {        return studentMapper.deleteStudent(id);    }    @Override    public List&lt;Student&gt; selectAll() {        return studentMapper.selectStudentAll();    }    @Override    public boolean updateStudent(Student s) {        return studentMapper.update(s);    }}</code></pre><h2 id="七、注入mapper"><a href="#七、注入mapper" class="headerlink" title="七、注入mapper"></a>七、注入mapper</h2><p>包含增删改查，类上加了@mapper,则不用再启动类上@MapperScan()</p><pre><code>@Mapperpublic interface StudentMapper {    @Insert(&quot;insert into student(name,age) values (#{name},#{age})&quot;)    int insertStudent(Student student);    @Delete(&quot;delete from student where id = #{id}&quot;)    boolean deleteStudent(int id);    @Select(&quot;select * from student&quot;)    List&lt;Student&gt; selectStudentAll();    @Update(&quot;update student set name=#{name},age = #{age} where id = #{id}&quot;)    boolean update(Student student);}</code></pre><h2 id="八、最后controller"><a href="#八、最后controller" class="headerlink" title="八、最后controller"></a>八、最后controller</h2><pre><code>@RestController@RequestMappingpublic class StudentController {    @Autowired    private StudentService studentService;    /**     * 添加数据     *     * @param name     * @param age     * @return     */    @GetMapping(&quot;addStu&quot;)    public Object insertStudent(@Param(&quot;name&quot;) String name, @Param(&quot;age&quot;) int age) {        Student student = new Student(null, name, age);        int index = studentService.add(student);        return index;    }    /**     * 根据id删除数据     *     * @param id     * @return     */    @GetMapping(&quot;delete&quot;)    public Object delete(@Param(&quot;id&quot;) int id) {        return studentService.deleteById(id);    }    /**     * 查询所有数据     *     * @return     */    @GetMapping(&quot;select&quot;)    public Object select() {        return studentService.selectAll();    }    /**     * 修改数据     *     * @param id     * @param name     * @param age     * @return     */    @GetMapping(&quot;update&quot;)    public Object update(int id, String name, int age) {        Student s = new Student(id, name, age);        return studentService.updateStudent(s);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]MVC请求映射</title>
      <link href="/2019/11/10/JAVA-MVC%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84/"/>
      <url>/2019/11/10/JAVA-MVC%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-RequestMapping方式"><a href="#一、-RequestMapping方式" class="headerlink" title="一、@RequestMapping方式"></a>一、@RequestMapping方式</h2><p>以前我们controller写请求路劲都是如下格式,指定每个http方法，如get、post等。</p><pre><code>@RequestMapping(value = &quot;v1/get&quot;,method = RequestMethod.GET)</code></pre><p>点击方法，进入源代码中查看一下，可以看到方法包含如下多种：<br><img src="http://image.xiaoxinyes.club/2019-11-10_205659.png" alt="源码"></p><hr><h2 id="二、更简洁的方式"><a href="#二、更简洁的方式" class="headerlink" title="二、更简洁的方式"></a>二、更简洁的方式</h2><p>很多以前的老项目的格式都是上面的那种，而现在新增了@GetMapping，@PostMapping，@PutMapping，@DeleteMapping，@PatchMapping。</p><pre><code>    @GetMapping(&quot;get&quot;)    public String get(){        return &quot;get请求!&quot;;    }    @PostMapping(&quot;post&quot;)    public String post(){        return &quot;post请求!&quot;;    }    @DeleteMapping(&quot;delete&quot;)    public String delete(){        return &quot;delete请求!&quot;;    }    @PutMapping(&quot;put&quot;)    public String put(){        return &quot;put请求!&quot;;    }</code></pre><p>点击任意一个注解进入源码里面，可以看到组合注解。只是简化了，而依旧调用的是RequestMethod。<br><img src="http://image.xiaoxinyes.club/2019-11-10_210259.png" alt="源码"></p><hr><h2 id="三、基于restful接口开发"><a href="#三、基于restful接口开发" class="headerlink" title="三、基于restful接口开发"></a>三、基于restful接口开发</h2><p>Get:对应查询<br>post：对应新增<br>put:对应更新<br>delete:对应删除</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]@Value与@ConfigurationProperties</title>
      <link href="/2019/10/29/JAVA-Value%E4%B8%8E-ConfigurationProperties/"/>
      <url>/2019/10/29/JAVA-Value%E4%B8%8E-ConfigurationProperties/</url>
      
        <content type="html"><![CDATA[<p>有时重要的信息需要写在配置文件中，如application.yml或是如application.preperties，那么可以通过@Value或是@ConfigurationProperties获取到配置文件中的值。</p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="一、-Value"><a href="#一、-Value" class="headerlink" title="一、@Value"></a>一、@Value</h3><h4 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h4><pre><code>person:  name: 小信  age: 20</code></pre><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><pre><code>@RestController@RequestMappingpublic class PersonController {    @Value(&quot;${person.name}&quot;)    private String name;    @Value(&quot;${person.age}&quot;)    private Integer age;    @GetMapping(&quot;getInfo&quot;)    public String Info() {        return name + &quot;:&quot; + age;    }}</code></pre><h4 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h4><p><a href="http://127.0.0.1:8080/getInfo" target="_blank" rel="noopener">http://127.0.0.1:8080/getInfo</a></p><p>响应 <code>小信:20</code></p><hr><p><em>使用该方式可以发现，若配置多个，那么都需要使用@Value注入多次，显得较为繁琐</em></p><hr><h3 id="二、-ConfigurationProperties"><a href="#二、-ConfigurationProperties" class="headerlink" title="二、@ConfigurationProperties"></a>二、@ConfigurationProperties</h3><p>将配置文件中得属性与一个Bean相关联，实现类型安全的配置。</p><h4 id="yml配置-1"><a href="#yml配置-1" class="headerlink" title="yml配置"></a>yml配置</h4><pre><code>student:  name: 小信  email: xiaoxin1218@qq.com</code></pre><h4 id="Bean实体"><a href="#Bean实体" class="headerlink" title="Bean实体"></a>Bean实体</h4><pre><code>@ConfigurationProperties(prefix = &quot;student&quot;)public class StudentVO {    private String name;    private String email;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getEmail() {        return email;    }    public void setEmail(String email) {        this.email = email;    }}</code></pre><p><strong>通过prefix指定配置文件的前缀</strong></p><h4 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h4><pre><code>@RestController@RequestMappingpublic class StudentController {    @Autowired    private StudentVO studentVO;    @GetMapping(&quot;getStu&quot;)    public String studentInfo() {        return studentVO.getName() + &quot;::&quot; + studentVO.getEmail();    }}</code></pre><p><strong>@Autowired可直接注入</strong></p><h4 id="访问地址-1"><a href="#访问地址-1" class="headerlink" title="访问地址"></a>访问地址</h4><p><a href="http://127.0.0.1:8080/getStu" target="_blank" rel="noopener">http://127.0.0.1:8080/getStu</a><br>响应 <code>小信::xiaoxin1218@qq.com</code></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot定制benner</title>
      <link href="/2019/10/27/JAVA-SpringBoot%E5%AE%9A%E5%88%B6benner/"/>
      <url>/2019/10/27/JAVA-SpringBoot%E5%AE%9A%E5%88%B6benner/</url>
      
        <content type="html"><![CDATA[<p>springboot默认启动banner如下：</p><p><img src="http://image.xiaoxinyes.club/2019-10-27_195347.png" alt="默认banner"></p><p>修改步骤也十分简单</p><hr><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>在src/main/resources下新建名为banner.txt的文件。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>文本中写入需要的字符，可通过<a href="http://patorjk.com/software/taag" target="_blank" rel="noopener">点击进入</a>该网站生成字符。<br><img src="http://image.xiaoxinyes.club/2019-10-27_200333.png" alt="生成字符网站"></p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>启动程序即可，可以看到已经发生了变化<br><img src="http://image.xiaoxinyes.club/2019-10-27_200550.png" alt="修改后的benner"></p><h2 id="关闭benner"><a href="#关闭benner" class="headerlink" title="关闭benner"></a>关闭benner</h2><pre><code>@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication app = new SpringApplication(DemoApplication.class);        app.setBannerMode(Banner.Mode.OFF);        app.run(args);      }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Mybatis代码生成</title>
      <link href="/2019/10/27/JAVA-Mybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/2019/10/27/JAVA-Mybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>generatorConfig.xml</p><h3 id="首先在pom-xml中添加插件依赖"><a href="#首先在pom-xml中添加插件依赖" class="headerlink" title="首先在pom.xml中添加插件依赖"></a>首先在pom.xml中添加插件依赖</h3><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;        &lt;!-- mybatis generator 自动生成代码插件 --&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;1.3.1&lt;/version&gt;            &lt;configuration&gt;                &lt;configurationFile&gt;${basedir}/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;                &lt;overwrite&gt;true&lt;/overwrite&gt;                &lt;verbose&gt;true&lt;/verbose&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h3 id="新建generatorConfig-xml"><a href="#新建generatorConfig-xml" class="headerlink" title="新建generatorConfig.xml"></a>新建generatorConfig.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;    &lt;classPathEntry  location=&quot;E:\SSH_SSM\mysql-connector-java-5.1.44\mysql-connector-java-5.1.44\mysql-connector-java-5.1.44-bin.jar&quot;/&gt;    &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库连接驱动类,URL，用户名、密码 --&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1/blogs&quot; userId=&quot;root&quot; password=&quot;密码&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;        &lt;/javaTypeResolver&gt;        &lt;!-- 生成(实体)模型的包名和位置--&gt;        &lt;javaModelGenerator targetPackage=&quot;xyz.xioaxin12.blogs.entity&quot; targetProject=&quot;E:\Idea Project\blogs\src\main\java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;        &lt;/javaModelGenerator&gt;        &lt;!-- 生成XML映射文件的包名和位置--&gt;        &lt;sqlMapGenerator targetPackage=&quot;resources.mapper&quot; targetProject=&quot;E:\Idea Project\blogs\src\main&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- 生成DAO接口的包名和位置--&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;xyz.xioaxin12.blogs.dao&quot; targetProject=&quot;E:\Idea Project\blogs\src\main\java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blogger&quot; domainObjectName=&quot;Blogger&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blogtype&quot; domainObjectName=&quot;BlogType&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_comment&quot; domainObjectName=&quot;Comment&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_link&quot; domainObjectName=&quot;Link&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;t_blog&quot; domainObjectName=&quot;Blog&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>配置信息，包的所在位置等自行更改。</p><hr><p>idea执行步骤，run–&gt;Edit Configurations–&gt;添加maven–&gt;mybatis-generator:generate -e</p><p><img src="http://image.xiaoxinyes.club/2019-02-13_15-18-24.png" alt></p><p><img src="http://image.xiaoxinyes.club/2019-02-13_15-23-07.png" alt></p><p>最后生成即可<br><img src="http://image.xiaoxinyes.club/Snipaste_2019-02-13_15-25-55.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ERROR]SpringBoot+Mybatis一个错误</title>
      <link href="/2019/10/27/ERROR-SpringBoot-Mybatis%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF/"/>
      <url>/2019/10/27/ERROR-SpringBoot-Mybatis%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="异常信息如下"><a href="#异常信息如下" class="headerlink" title="异常信息如下"></a>异常信息如下</h3><pre><code>java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required</code></pre><p>image<br><img src="http://image.xiaoxinyes.club/Snipaste_2019-02-13_19-50-35.png" alt></p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>降低mysql-connector-java的版本即可，我自己试了下5.x的似乎都没问题。</p><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><p>将pom.xml中的jdbc数据库驱动修改下。<br>原</p><pre><code> &lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><p>修改为</p><pre><code> &lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.25&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="关于application-properties配置修改"><a href="#关于application-properties配置修改" class="headerlink" title="关于application.properties配置修改"></a>关于application.properties配置修改</h4><p>原来(mysql6版本以上)</p><pre><code>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></pre><p>修改为(mysql5)</p><pre><code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code></pre>]]></content>
      
      
      <categories>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ERROR]Mybaits传递多个参数</title>
      <link href="/2019/10/27/ERROR-Mybaits%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/"/>
      <url>/2019/10/27/ERROR-Mybaits%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="异常信息如下："><a href="#异常信息如下：" class="headerlink" title="异常信息如下："></a>异常信息如下：</h3><pre><code>2019-02-13 19:33:46.931 ERROR 1992 --- [p-nio-80-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter &#39;username&#39; not found. Available parameters are [arg1, arg0, param1, param2]] with root causeorg.apache.ibatis.binding.BindingException: Parameter &#39;username&#39; not found. Available parameters are [arg1, arg0, param1, param2]</code></pre><p>image<br><img src="http://image.xiaoxinyes.club/Snipaste_2019-02-13_19-40-48.png" alt></p><hr><h3 id="原因在于用mybatis查询时，传递了两个参数。"><a href="#原因在于用mybatis查询时，传递了两个参数。" class="headerlink" title="原因在于用mybatis查询时，传递了两个参数。"></a>原因在于用mybatis查询时，传递了两个参数。</h3><pre><code>Blogger selectByNameAndPassword(String username, String password);</code></pre><p>而这样的话匹配不到，用注解@Param即可。</p><pre><code>Blogger selectByNameAndPassword(@Param(&quot;username&quot;)String username, @Param(&quot;password&quot;) String password)</code></pre>]]></content>
      
      
      <categories>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ERROR]gradle+idea使用时的错误</title>
      <link href="/2019/10/27/ERROR-gradle-idea%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2019/10/27/ERROR-gradle-idea%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>gradle类似于maven，今天(以前的文章，不是当天哦)我下载配置完后发现了许多问题，导致纠结了许久。</p><p>下载官网：<a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">http://services.gradle.org/distributions/</a></p><p>我去下载了最新的版本，解压后配置环境变量。于是开始在idea上创建项目，无奈怎样都有问题，显示无法构建，这个问题真是搞了许久，检查环境变量，idea搭建过程是否有误等等因素。一直没看出来…..<br><code>1Failed to notify build listener</code></p><p>无奈之下，重新下载了另一个版本，再次测试，同样的结果，我都开始怀疑是不是idea版本的原因了~</p><hr><p>先去忙其他事情…</p><p>临近晚上…</p><hr><p>想着不解决心里不舒服，于是把原来下载的删去，又去下载一个低版本的，不过这次下载的是4.0版本(发现在结合spring boot有问题后修改成4.6)的。系统环境配置依旧。idea开启!</p><p><img src="http://image.xiaoxinyes.club/2019-01-13_190710.png" alt></p><hr><p>选择自动导入，和本地已有的gradle路径。<br><img src="http://image.xiaoxinyes.club/2019-01-13_191241.png" alt></p><hr><p>刷新，目录如下。<br><img src="http://image.xiaoxinyes.club/2019-01-13_191534.png" alt></p><hr><p>发现用了该版本，没有报错了，这里暂时不纠结确实是否版本的原因，有时间我下次再下载一个试试。</p><p>能够发现，没有呈现src目录，这里有两个方法解决。</p><hr><p><strong>方法一：</strong></p><p>file–&gt;settings<br><img src="http://image.xiaoxinyes.club/2019-01-13_192126.png" alt></p><p><strong>方法二：</strong></p><p>build.gradle添加下列代码</p><pre><code>task &quot;create-dirs&quot; &lt;&lt; {    sourceSets*.java.srcDirs*.each {        it.mkdirs()    }    sourceSets*.resources.srcDirs*.each{        it.midirs()    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ERROR]未识别mapper配置文件</title>
      <link href="/2019/10/27/ERROR-%E6%9C%AA%E8%AF%86%E5%88%ABmapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/10/27/ERROR-%E6%9C%AA%E8%AF%86%E5%88%ABmapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>学习就是从错误中不断吸取知识!在springboot+mybatis整合中，发现一个异常。</p><h2 id="如下"><a href="#如下" class="headerlink" title="如下"></a>如下</h2><pre><code>context with path [] threw exception [Request processing failed; nested exception is org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): xyz.xioaxin12.mapper.StudentMapper.insetStudent] with root causeorg.apache.ibatis.binding.BindingException: Invalid bound statement (not found): xyz.xioaxin12.mapper.StudentMapper.insetStudent</code></pre><p><img src="http://image.xiaoxinyes.club/2019-01-12_142810.png" alt><br><br><br>发现并没有调用到mapper.xml文件，而我是将mapper.xml和接口写在同包下。<br><img src="http://image.xiaoxinyes.club/2019-01-12_143343.png" alt><br><br><br>发现别名，路径等信息无误之后，我注意到classes文件，果然编译后的xml并那个不存在。<br><img src="http://image.xiaoxinyes.club/2019-01-12_143633.png" alt><br><br></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>pom.xml中加入以下代码,这样不论是java下还是resourecs下编译后都会加载进去。</p><pre><code>resources&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/resources&lt;/directory&gt;        &lt;/resource&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/java&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;false&lt;/filtering&gt;        &lt;/resource&gt;&lt;/resources&gt;</code></pre><p>若放在指定的resources文件下，需要指定mapper的位置。</p><pre><code>mybatis.mapper-locations=classpath:mapper/*.xml</code></pre>]]></content>
      
      
      <categories>
          
          <category> ERROR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Logback日志级别</title>
      <link href="/2019/10/24/JAVA-Logback%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/"/>
      <url>/2019/10/24/JAVA-Logback%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。例如： --&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;true&quot;&gt;    &lt;!-- 项目名称 --&gt;    &lt;property name=&quot;PROJECT_NAME&quot; value=&quot;XXXXX&quot; /&gt;    &lt;!-- 文件输出格式 --&gt;    &lt;property name=&quot;PATTERN&quot; value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot;/&gt;    &lt;!-- 输出文件路径 --&gt;    &lt;property name=&quot;OPEN_FILE_PATH&quot; value=&quot;./logs/&quot;/&gt;    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;encoder&gt;            &lt;pattern&gt;${PATTERN}&lt;/pattern&gt;            &lt;charset&gt;UTF-8&lt;/charset&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出 --&gt;    &lt;appender name=&quot;OPEN-FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;!--不能有这项配置！！！！！--&gt;        &lt;!--&lt;Encoding&gt;UTF-8&lt;/Encoding&gt;--&gt;        &lt;!--&lt;File&gt;${OPEN_FILE_PATH}/zqread.log&lt;/File&gt;--&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;!--日志文件输出的文件名--&gt;            &lt;FileNamePattern&gt;${OPEN_FILE_PATH}/all/%d{yyyy-MM-dd}-%i.log&lt;/FileNamePattern&gt;            &lt;!--日志文件保留天数--&gt;            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;            &lt;TimeBasedFileNamingAndTriggeringPolicy                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;!--日志文件最大的大小--&gt;                &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &lt;pattern&gt;${PATTERN}&lt;/pattern&gt;        &lt;/layout&gt;    &lt;/appender&gt;    &lt;!--输出到debug--&gt;    &lt;appender name=&quot;debug&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;${OPEN_FILE_PATH}/debug/%d{yyyy-MM-dd}-%i.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;            &lt;TimeBasedFileNamingAndTriggeringPolicy                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;append&gt;true&lt;/append&gt;        &lt;encoder&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;            &lt;charset&gt;utf-8&lt;/charset&gt;        &lt;/encoder&gt;        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 只打印DEBUG日志 --&gt;            &lt;level&gt;DEBUG&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;!--输出到info--&gt;    &lt;appender name=&quot;info&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;${OPEN_FILE_PATH}/info/%d{yyyy-MM-dd}-%i.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;            &lt;TimeBasedFileNamingAndTriggeringPolicy                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;append&gt;true&lt;/append&gt;        &lt;encoder&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;            &lt;charset&gt;utf-8&lt;/charset&gt;        &lt;/encoder&gt;        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 只打印INFO日志 --&gt;            &lt;level&gt;INFO&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;!--输出到error--&gt;    &lt;appender name=&quot;error&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;${OPEN_FILE_PATH}/error/%d{yyyy-MM-dd}-%i.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;            &lt;TimeBasedFileNamingAndTriggeringPolicy                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;append&gt;true&lt;/append&gt;        &lt;encoder&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;            &lt;charset&gt;utf-8&lt;/charset&gt;        &lt;/encoder&gt;        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 只打印ERROR日志 --&gt;            &lt;level&gt;ERROR&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;!--输出到warn--&gt;    &lt;appender name=&quot;warn&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;${OPEN_FILE_PATH}/warn/%d{yyyy-MM-dd}-%i.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;            &lt;TimeBasedFileNamingAndTriggeringPolicy                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;            &lt;/TimeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;append&gt;true&lt;/append&gt;        &lt;encoder&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;            &lt;charset&gt;utf-8&lt;/charset&gt;        &lt;/encoder&gt;        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 只打印WARN日志 --&gt;            &lt;level&gt;WARN&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;root level=&quot;info&quot;&gt;        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;        &lt;appender-ref ref=&quot;OPEN-FILE&quot;/&gt;        &lt;appender-ref ref=&quot;debug&quot; /&gt;        &lt;appender-ref ref=&quot;info&quot; /&gt;        &lt;appender-ref ref=&quot;error&quot; /&gt;        &lt;appender-ref ref=&quot;warn&quot; /&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Maven打包到本地仓库</title>
      <link href="/2019/10/24/JAVA-Maven%E6%89%93%E5%8C%85%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
      <url>/2019/10/24/JAVA-Maven%E6%89%93%E5%8C%85%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>有些jar中央仓库没得，那么可以自己把jar添加到本地maven仓库使用。<a id="more"></a></p><pre><code>mvn install:install-file -DgroupId=signalr-client-sdk -DartifactId=signalr-client-sdk -Dversion=1.0.0 -Dfile=G:\signalr-client-sdk-1.0.0.jar -Dpackaging=jar</code></pre><p>&nbsp;</p><p>-DgroupId：组织名<br>-DartifactId：项目名<br>-Dversion：版本号<br>-Dfile：jar包路径<br>-Dpackaging：jar</p><p>&nbsp;</p><p>maven依赖</p><pre class="lang:default decode:true ">&lt;dependency&gt;    &lt;groupId&gt;signalr-client-sdk&lt;/groupId&gt;    &lt;artifactId&gt;signalr-client-sdk&lt;/artifactId&gt;    &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt;</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合thymeleaf</title>
      <link href="/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88thymeleaf/"/>
      <url>/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88thymeleaf/</url>
      
        <content type="html"><![CDATA[<p>本篇将通过java实例，详细举出thymeleaf常用语法。</p><p>pom添加thymeleaf依赖</p><pre><code>&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>html导入头标签，这样编写的时候会有相关提示。</p><pre><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></pre><hr><p>&nbsp;</p><p>&nbsp;</p><p>好了，接下来我们通过代码来看效果吧!</p><h2 id="一-创建Student对象"><a href="#一-创建Student对象" class="headerlink" title="一.创建Student对象"></a>一.创建Student对象</h2><p>这是为了后面演示thymeleaf中迭代遍历的语法。</p><pre><code>package xyz.xioaxin12.springboot.student;public class Student {    private Integer id;    private String name;    public Student() {    }    public Student(Integer id, String name) {        this.id = id;        this.name = name;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return &quot;Student{&quot; +                &quot;id=&quot; + id +                &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>&nbsp;</p><h2 id="二-编写Controller"><a href="#二-编写Controller" class="headerlink" title="二.编写Controller"></a>二.编写Controller</h2><p>该controller存储了一些字符串、日期、list、map等数据。</p><pre><code>package xyz.xioaxin12.springboot.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import xyz.xioaxin12.springboot.student.Student;import javax.servlet.http.HttpServletRequest;import java.util.*;@Controllerpublic class SutdentController {    @RequestMapping(&quot;/show&quot;)    public String showStudent(Model model){        //演示文本        model.addAttribute(&quot;msg&quot;,&quot;thymeleay&lt;hr/&gt;！SHOW&quot;);        //演示日期        model.addAttribute(&quot;date&quot;,new Date());        //演示条件判断        model.addAttribute(&quot;age&quot;,20);        //演示迭代遍历list        List&lt;Student&gt; list = new ArrayList&lt;&gt;();        list.add(new Student(1,&quot;王五&quot;));        list.add(new Student(2,&quot;赵六&quot;));        list.add(new Student(3,&quot;李四&quot;));        model.addAttribute(&quot;list&quot;,list);        //演示迭代遍历map        Map&lt;String,Student&gt; map = new HashMap&lt;&gt;();        map.put(&quot;s1&quot;,new Student(1,&quot;芳芳&quot;));        map.put(&quot;s2&quot;,new Student(2,&quot;娇娇&quot;));        map.put(&quot;s3&quot;,new Student(3,&quot;美美&quot;));        model.addAttribute(&quot;map&quot;,map);        return &quot;index&quot;;    }</code></pre><h3 id="三-编写视图"><a href="#三-编写视图" class="headerlink" title="三.编写视图"></a>三.编写视图</h3><p>通过上面的controller，发现返回到index页面。</p><p>代码看上去或许比较乱，演示thymeleaf中对文本、字符串、日期、条件判断、迭代遍历的语法。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;文本+字符串+日期+条件+遍历&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;1.文本操作&lt;/h2&gt;&lt;br/&gt;普通字符串：&lt;span th:text=&quot;${msg}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;可转义字符：&lt;span th:utext=&quot;${msg}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;显示input标签的value中：&lt;input type=&quot;text&quot; th:value=&quot;${msg}&quot;/&gt;&lt;hr/&gt;&lt;br/&gt;&lt;h2&gt;2.字符串操作&lt;/h2&gt;判断字符串是否为空：&lt;span th:text=&quot;${#strings.isEmpty(msg)}&quot; &gt;&lt;/span&gt;&lt;hr/&gt;判断字符串是否包含指定字串：&lt;span th:text=&quot;${#strings.contains(msg,&#39;me&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;判断是否是指定的子串开头：&lt;span th:text=&quot;${#strings.startsWith(msg,&#39;thy&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;判断是否是指定的子串结尾：&lt;span th:text=&quot;${#strings.endsWith(msg,&#39;SHOW&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;返回该字符串的长度：&lt;span th:text=&quot;${#strings.length(msg)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;查找子串下标位置：&lt;span th:text=&quot;${#strings.indexOf(msg,&#39;hy&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;截取子串：&lt;span th:text=&quot;${#strings.substring(msg,5,10)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;字符串转大写：&lt;span th:text=&quot;${#strings.toUpperCase(msg)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;字符串转小写：&lt;span th:text=&quot;${#strings.toLowerCase(msg)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;&lt;br/&gt;&lt;h2&gt;3.日期操作&lt;/h2&gt;系统默认格式日期：&lt;span th:text=&quot;${#dates.format(date)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;自定义日期格式：&lt;span th:text=&quot;${#dates.format(date,&#39;yyy-mm-dd&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;分别取年月日：&lt;select&gt;    &lt;option th:text=&quot;${#dates.year(date)}&quot;&gt;&lt;/option&gt;    &lt;option th:text=&quot;${#dates.month(date)}&quot;&gt;&lt;/option&gt;    &lt;option th:text=&quot;${#dates.day(date)}&quot;&gt;&lt;/option&gt;&lt;/select&gt;&lt;hr/&gt;&lt;br/&gt;&lt;h2&gt;4.条件判断&lt;/h2&gt;if演示：&lt;span th:if=&quot;${age}&gt;30&quot;&gt;超过30岁呢&lt;/span&gt;&lt;span th:if=&quot;${age}&lt;30&quot;&gt;没有30岁呢&lt;/span&gt;&lt;hr/&gt;&lt;div th:switch=&quot;${age}&quot;&gt;    swith演示：    &lt;span th:case=&quot;10&quot;&gt;10岁&lt;/span&gt;    &lt;span th:case=&quot;20&quot;&gt;20岁&lt;/span&gt;&lt;/div&gt;&lt;hr/&gt;&lt;br/&gt;&lt;h2&gt;5.遍历迭代&lt;/h2&gt;list方式一：&lt;table border=&quot;1&quot;&gt;    &lt;tr&gt;        &lt;th&gt;ID&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;    &lt;/tr&gt;    &lt;tr th:each=&quot;u : ${list}&quot;&gt;        &lt;td th:text=&quot;${u.id}&quot;&gt;&lt;/td&gt;        &lt;td th:text=&quot;${u.name}&quot;&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;hr/&gt;list方式二，可以取index,size,count等信息&lt;table border=&quot;1&quot;&gt;    &lt;tr&gt;        &lt;th&gt;ID&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;Index&lt;/th&gt;    &lt;/tr&gt;    &lt;tr th:each=&quot;u,var : ${list}&quot;&gt;        &lt;td th:text=&quot;${u.id}&quot;&gt;&lt;/td&gt;        &lt;td th:text=&quot;${u.name}&quot;&gt;&lt;/td&gt;        &lt;td th:text=&quot;${var.index}&quot;&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;hr/&gt;map迭代:&lt;table border=&quot;1&quot;&gt;    &lt;tr&gt;        &lt;th&gt;ID&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;    &lt;/tr&gt;    &lt;tr th:each=&quot;maps : ${map}&quot;&gt;      &lt;td th:each=&quot;entry : ${maps}&quot; th:text=&quot;${entry.value.id}&quot;&gt;&lt;/td&gt;      &lt;td th:each=&quot;entry : ${maps}&quot; th:text=&quot;${entry.value.name}&quot;&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="四-启动类"><a href="#四-启动类" class="headerlink" title="四.启动类"></a>四.启动类</h2><pre><code>package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBoot05ThymeleafApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot05ThymeleafApplication.class, args);    }}</code></pre><p>&nbsp;</p><h2 id="五-浏览器访问路径"><a href="#五-浏览器访问路径" class="headerlink" title="五.浏览器访问路径"></a>五.浏览器访问路径</h2><p>效果如下</p><p><a href="http://image.xiaoxinyes.club/2019-01-10_103057.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-10_103057.png" alt></a></p><hr><p>&nbsp;</p><p>接下来在原controller类中添加一个方法，用于演示thymeleaf中的其他语法。</p><pre><code>123456789@RequestMapping(&quot;/show2&quot;)public String show2(Model model, HttpServletRequest request){    request.setAttribute(&quot;req&quot;,&quot;HttpServletRequest&quot;);    request.getSession().setAttribute(&quot;sess&quot;,&quot;HttpSession&quot;);    request.getSession().getServletContext().setAttribute(&quot;app&quot;,&quot;Application&quot;);    return &quot;show2&quot;;}</code></pre><p>返回到show.html页面</p><p>该页面举出了thymeleaf对域对象、路径等语法</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;域对象+路径+图片&lt;/title&gt;&lt;/head&gt;&lt;body&gt;HttpServletRequest：&lt;span th:text=&quot;${#httpServletRequest.getAttribute(&#39;req&#39;)}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;HttpSession：&lt;span th:text=&quot;${session.sess}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;Application：&lt;span th:text=&quot;${application.app}&quot;&gt;&lt;/span&gt;&lt;hr/&gt;绝对路径：&lt;a th:href=&quot;@{http://www.xioaxin12.xyz}&quot;&gt;爱生活爱技术&lt;/a&gt;&lt;hr/&gt;相对路径：&lt;a th:href=&quot;@{/show}&quot;&gt;相对于项目上下文路径&lt;/a&gt;&lt;hr/&gt;相对路径：&lt;a th:href=&quot;@{~/show}&quot;&gt;相对于服务器上的根路径&lt;/a&gt;&lt;hr/&gt;相对路径：&lt;a th:href=&quot;@{/show(id=1,name=zhagnsan)}&quot;&gt;传参&lt;/a&gt;&lt;hr/&gt;图片：&lt;img th:src=&quot;@{https://www.baidu.com/img/baidu_jgylogo3.gif}&quot; th:alt=&quot;百度&quot;/&gt;&lt;hr/&gt;th:attr设置属性值：&lt;img th:attr=&quot;src=@{https://www.baidu.com/img/baidu_jgylogo3.gif},alt=@{百度},title=@{百度}&quot;/&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>浏览器访问该路径</p><p><a href="http://image.xiaoxinyes.club/2019-01-10_103722.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-10_103722.png" alt></a></p><hr><p>&nbsp;</p><p>&nbsp;</p><p>关于上面的thymeleaf语法，我弄了一张图，详细如下图。</p><p><a href="http://image.xiaoxinyes.club/thymeleaf.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/thymeleaf.png" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合freemarker</title>
      <link href="/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88freemarker/"/>
      <url>/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88freemarker/</url>
      
        <content type="html"><![CDATA[<p>FreeMarker是一款模板引擎： 即一种基于模板和要改变的数据<a id="more"></a>， 并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。–百度百科</p><p>&nbsp;</p><p>首先pom.xml导入freemarker依赖</p><pre class="lang:default decode:true " title="pom.xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;        &lt;/dependency&gt;</pre><p>&nbsp;</p><p>跟<span style="text-decoration: underline;"><a href="http://www.xioaxin12.xyz/1226.html" target="_blank" rel="noopener">Spring Boot整合Jsp</a></span>该篇文章类似，一个实体类用户返回结果，controller和启动类。</p><p><span style="font-size: 10pt;">Student.java</span></p><pre class="lang:java decode:true " title="Student.java">package xyz.xioaxin12.springboot.controller.student;public class Student {    private Integer id;    private String name;    private int age;    public Student() {    }    public Student(Integer id, String name, int age) {        this.id = id;        this.name = name;        this.age = age;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }}</pre><p>&nbsp;</p><p><span style="font-size: 10pt;">StudentController .java </span></p><pre class="lang:java decode:true" title="StudentController ">package xyz.xioaxin12.springboot.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import xyz.xioaxin12.springboot.controller.student.Student;import java.util.ArrayList;import java.util.List;@Controllerpublic class StudentController {    @RequestMapping("/show")    public String showStudent(Model model){        List&lt;Student&gt; list = new ArrayList&lt;&gt;();        list.add(new Student(1,"小信",22));        list.add(new Student(2,"天天",25));        list.add(new Student(1,"赵六",20));        model.addAttribute("list",list);        return "show";    }}</pre><p>&nbsp;</p><p><span style="font-size: 10pt;">启动类</span></p><pre class="lang:java decode:true ">package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * @author 爱生活爱技术 */@SpringBootApplicationpublic class SpringBoot04FreemarkerApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot04FreemarkerApplication.class, args);    }}</pre><p>&nbsp;</p><p>最后编写视图</p><p><span style="color: #ff0000;">注意：模板形式的文件必须放在templates下，外界不可直接访问的！</span></p><pre class="lang:default decode:true " title="show.ftl">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;freemarker&lt;/title&gt;        &lt;meta charset="utf-8"/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;table border="2" align="center" width="50%"&gt;            &lt;tr&gt;                &lt;th&gt;ID&lt;/th&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;年龄&lt;/th&gt;            &lt;/tr&gt;            &lt;#list list as s&gt;                &lt;tr&gt;                    &lt;td&gt;${s.id}&lt;/td&gt;                    &lt;td&gt;${s.name}&lt;/td&gt;                    &lt;td&gt;${s.age}&lt;/td&gt;                &lt;/tr&gt;            &lt;/#list&gt;        &lt;/table&gt;    &lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><p><a href="http://image.xiaoxinyes.club/2019-01-08_120014.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-08_120014.png" alt></a></p><hr><p>freemarker官方在线手册：<a href="http://freemarker.foofun.cn/ref_directive_switch.html#ref.directive.case" target="_blank" rel="noopener">点击</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合Jsp</title>
      <link href="/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88Jsp/"/>
      <url>/2019/10/24/JAVA-SpringBoot%E6%95%B4%E5%90%88Jsp/</url>
      
        <content type="html"><![CDATA[<p>springboot并不推荐使用jsp，不推荐!<a id="more"></a></p><h3 id="1-首先idea快速构建一个springboot项目。"><a href="#1-首先idea快速构建一个springboot项目。" class="headerlink" title="1.首先idea快速构建一个springboot项目。"></a>1.首先idea快速构建一个springboot项目。</h3><p>我们需要手动添加WEB-INF这些文件夹。</p><p><a href="http://image.xiaoxinyes.club/2019-01-07_162623.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-07_162623.png" alt></a></p><hr><p>&nbsp;</p><h3 id="2-配置视图解析"><a href="#2-配置视图解析" class="headerlink" title="2.配置视图解析"></a>2.配置视图解析</h3><p><span style="font-size: 10pt;">application.properties</span></p><pre class="lang:default decode:true ">spring.mvc.view.prefix=/WEB-INF/jsp/spring.mvc.view.suffix=.jspserver.port=8081</pre><hr><p>&nbsp;</p><h3 id="3-编写一个实体类，用户传数据。"><a href="#3-编写一个实体类，用户传数据。" class="headerlink" title="3.编写一个实体类，用户传数据。"></a>3.编写一个实体类，用户传数据。</h3><pre class="lang:java decode:true " title="Student.java">package xyz.xioaxin12.springboot.student;public class Student {    private Integer id;    private String name;    private int age;    public Student() {    }    public Student(Integer id, String name, int age) {        this.id = id;        this.name = name;        this.age = age;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return "Student{" +                "id=" + id +                ", name='" + name + '\'' +                ", age='" + age + '\'' +                '}';    }}</pre><hr><p>&nbsp;</p><h3 id="4-controller视图层"><a href="#4-controller视图层" class="headerlink" title="4.controller视图层"></a>4.controller视图层</h3><p>注意注解是@Controller,可以直接返回一个视图，由于已经设置了视图的”前后缀”，return便是返回到WEB-INF/jsp/index.jsp页面。</p><pre class="lang:java decode:true " title="JspContreller.java">package xyz.xioaxin12.springboot.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import xyz.xioaxin12.springboot.student.Student;import java.util.ArrayList;import java.util.List;@Controllerpublic class JspContreller {    @RequestMapping("/show")    public String Show(Model model){        List&lt;Student&gt; students = new ArrayList&lt;&gt;();        students.add(new Student(1,"小信",33));        students.add(new Student(2,"小田",25));        students.add(new Student(3,"小夏",19));        students.add(new Student(4,"小方",23));        model.addAttribute("student",students);        return "index";    }}</pre><hr><p>&nbsp;</p><h3 id="5-jsp页面的编写"><a href="#5-jsp页面的编写" class="headerlink" title="5.jsp页面的编写"></a>5.jsp页面的编写</h3><pre class="lang:default decode:true" title="index.jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border="1" width="600px" style="margin: auto;text-align: center"&gt;        &lt;tr&gt;            &lt;th&gt;id&lt;/th&gt;            &lt;th&gt;姓名&lt;/th&gt;            &lt;th&gt;年龄&lt;/th&gt;        &lt;/tr&gt;        &lt;c:forEach items="${student}" var="s"&gt;            &lt;tr&gt;                &lt;td&gt;${s.id}&lt;/td&gt;                &lt;td&gt;${s.name}&lt;/td&gt;                &lt;td&gt;${s.age}&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><p>用到了jsp中的<span style="color: #ff0000;">jstl</span>，所以我们需要提前在pom.xml中引入下列依赖。</p><pre class="lang:default decode:true " title="pom.xml">        &lt;!-- jstl --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;jstl&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!-- jasper --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;            &lt;scope&gt;provided&lt;/scope&gt;        &lt;/dependency&gt;</pre><hr><p>&nbsp;</p><h3 id="6-查看"><a href="#6-查看" class="headerlink" title="6.查看"></a>6.查看</h3><p>浏览器地址：<a href="http://localhost:8081/show" target="_blank" rel="noopener">http://localhost:8081/show</a></p><p><a href="http://image.xiaoxinyes.club/2019-01-07_193614.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-07_193614.png" alt></a></p><p>&nbsp;</p><p><span style="color: #ff0000;">补充</span>：关于webapp文件的生成。idea在构建springboot项目中，是没有这个文件的，我们可以按照下图直接生成。</p><p><a href="http://image.xiaoxinyes.club/2019-01-07_194025.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-07_194025.png" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]文件上传</title>
      <link href="/2019/10/22/JAVA-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/10/22/JAVA-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>关于文件上传有几个需要注意的地方！<a id="more"></a></p><ul><li>静态资源需要放到static文件下。</li><li>form表单提交属性为enctype=”multipart/form-data”。</li><li>设置上传文件的默认大小值。<br>&nbsp;</li></ul><h2 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h2><p>static文件下建立index.htnl页面</p><pre class="lang:default decode:true" title="index.html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="upload" method="post" enctype="multipart/form-data"&gt;    &lt;input type="file" name="fileupload"&gt;&lt;br/&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><h2 id="2-编写Contorller"><a href="#2-编写Contorller" class="headerlink" title="2.编写Contorller"></a>2.编写Contorller</h2><pre class="lang:java decode:true" title="FileUploadController.java">package xyz.xioaxin12.springboot.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;/** * @author 爱生活爱技术 */@RestControllerpublic class FileUploadController {    @RequestMapping("/upload")    public String fileUpload(@RequestParam("fileupload") MultipartFile file) throws IOException {        System.out.println(file.getOriginalFilename());        //保存到本地g盘        file.transferTo(new File("g://"+file.getOriginalFilename()));        return "OK！";    }}</pre><p>&nbsp;</p><h2 id="3-启动类"><a href="#3-启动类" class="headerlink" title="3.启动类"></a>3.启动类</h2><pre class="lang:java decode:true">package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBootUploadApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBootUploadApplication.class, args);    }}</pre><p>&nbsp;</p><p>关于文件大小</p><p>当上传的文件超出时，需要自己设置最大值。</p><p>application.properties设置如下配置</p><pre class="lang:default decode:true">#设置单个上传文件的大小spring.servlet.multipart.max-file-size=100MB#设置一次请求上传文件的总容量spring.servlet.multipart.max-request-size=100MB</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合Listener</title>
      <link href="/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Listener/"/>
      <url>/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Listener/</url>
      
        <content type="html"><![CDATA[<p>还是两种方式，注解与方法注册。<a id="more"></a></p><h2 id="1-注解形式"><a href="#1-注解形式" class="headerlink" title="1.注解形式"></a>1.注解形式</h2><p>很简单，添加@WebListener()即可。</p><pre class="lang:java decode:true">package xyz.xioaxin12.springboot.listener;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import javax.servlet.annotation.WebListener;@WebListener()public class MyListener implements ServletContextListener{    @Override    public void contextDestroyed(ServletContextEvent sce) {    }    @Override    public void contextInitialized(ServletContextEvent sce) {        System.out.println("listener...init......");    }}</pre><p>&nbsp;</p><p>启动类</p><p>添加@ServletComponentScan就行了。</p><pre class="lang:java decode:true">package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.web.servlet.ServletComponentScan;import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;import org.springframework.context.annotation.Bean;import xyz.xioaxin12.springboot.listener.MyListener;@SpringBootApplication@ServletComponentScanpublic class SpringBoot02FilterApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot02FilterApplication.class, args);    }}</pre><p>这样在项目启动的时候就会打印listener…init……</p><hr><p>&nbsp;</p><h2 id="2-方法注册"><a href="#2-方法注册" class="headerlink" title="2.方法注册"></a>2.方法注册</h2><p>1).删除MyListener上的注解。</p><p>2).修改启动类。</p><p>在原启动类上添加如下代码即可!</p><pre class="lang:java decode:true">@Bean                                                                                                                      public ServletListenerRegistrationBean&lt;MyListener&gt; getListenerServletListenerRegistrationBean(){                               ServletListenerRegistrationBean&lt;MyListener&gt; bean = new ServletListenerRegistrationBean&lt;MyListener&gt;(new MyListener());     return bean;                                                                                                            }</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合Filter</title>
      <link href="/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Filter/"/>
      <url>/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Filter/</url>
      
        <content type="html"><![CDATA[<p>同样有注解扫描与方法注册两种方式。<a id="more"></a></p><h2 id="1-注解扫描"><a href="#1-注解扫描" class="headerlink" title="1.注解扫描"></a>1.注解扫描</h2><p>编写filter类</p><pre class="lang:java decode:true ">package xyz.xioaxin12.springboot.filter;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import java.io.IOException;@WebFilter(filterName = "MyFilter",urlPatterns = "/hello")public class MyFilter implements Filter {    public void destroy() {    }    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {        System.out.println("进入doFilter...");        chain.doFilter(req, resp);        System.out.println("退出doFilter...");    }    public void init(FilterConfig config) throws ServletException {    }}</pre><p>&nbsp;</p><p>拦截MyServlet</p><pre class="lang:java decode:true">package xyz.xioaxin12.springboot.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = "MyServlet",urlPatterns = "/hello")public class MyServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {       doGet(request,response);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        System.out.println("MyServlet...");    }}</pre><p>&nbsp;</p><p>启动类</p><pre class="lang:java decode:true ">package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.web.servlet.ServletComponentScan;@SpringBootApplication@ServletComponentScanpublic class SpringBoot02FilterApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot02FilterApplication.class, args);    }}</pre><p>&nbsp;</p><p>启动运行</p><p><img src="http://image.xiaoxinyes.club/2019-01-06_144153.png" alt></p><hr><p>&nbsp;</p><h2 id="2-方法注册"><a href="#2-方法注册" class="headerlink" title="2.方法注册"></a>2.方法注册</h2><p>1).删除原filter类上的注解。</p><p>2).将原Servlet类修改成方法注册形式。</p><p>3).修改启动类，如下</p><pre class="lang:java decode:true ">package xyz.xioaxin12.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import xyz.xioaxin12.springboot.filter.MyFilter;import xyz.xioaxin12.springboot.servlet.MyServlet;@SpringBootApplicationpublic class SpringBoot02FilterApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot02FilterApplication.class, args);    }    @Bean    public ServletRegistrationBean getregistrationBean(){        ServletRegistrationBean bean = new ServletRegistrationBean(new MyServlet());        bean.addUrlMappings("/hello");        return bean;    }    @Bean    public FilterRegistrationBean getfilterRegistrationBean(){        FilterRegistrationBean bean = new FilterRegistrationBean(new MyFilter());        bean.addUrlPatterns("/hello");        return bean;    }}</pre><p>&nbsp;</p><p>还可以拦截多个请求：</p><pre class="lang:default decode:true ">@WebFilter(filterName = "MyFilter",urlPatterns = {"*.do","*.jsp","/hello"})</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]SpringBoot整合Servlet</title>
      <link href="/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Servlet/"/>
      <url>/2019/10/22/JAVA-SpringBoot%E6%95%B4%E5%90%88Servlet/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot整合Servlet有两种方式。<a id="more"></a></p><p>1.通过注解扫描.</p><p>2.通过编写一个方法.</p><p>&nbsp;</p><h2 id="1-注解扫描"><a href="#1-注解扫描" class="headerlink" title="1.注解扫描"></a>1.注解扫描</h2><p>以前我们在web写select，需要在web.xml配置&lt;servlet&gt;&lt;/servlet&gt;和&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;等信息。那么使用springboot不必了。</p><p><span style="font-size: 10pt;">AnnotationServlet.java</span></p><p>这里我们设置的路径是/hello</p><pre class="lang:java decode:true" title="AnnotationServlet">package xyz.xioaxin12.springboot01servlet.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name="AnnotationServlet",urlPatterns = "/hello")public class AnnotationServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        resp.setCharacterEncoding("UTF-8");        resp.setContentType("text/html;charset=utf-8");        resp.getWriter().append("这是springboot整合servlet注解的方式!");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        super.doPost(req, resp);    }}</pre><p>&nbsp;</p><p><span style="font-size: 10pt;">SpringBoot01ServletApplication.java</span></p><p>启动类，这里能看到加了@ServletComponentScan注解，它会自动注册带有@WebServlet的注解。</p><pre class="lang:default decode:true">package xyz.xioaxin12.springboot01servlet;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.web.servlet.ServletComponentScan;@SpringBootApplication@ServletComponentScanpublic class SpringBoot01ServletApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot01ServletApplication.class, args);    }}</pre><p>&nbsp;</p><p>由于我的8080被占用了，我在application.properties修改成8081端口。</p><pre class="lang:default decode:true ">server.port=8081</pre><p>&nbsp;</p><p>启动访问localhost:8081/hello</p><p><a href="http://image.xiaoxinyes.club/2019-01-06_112731.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-06_112731.png" alt></a></p><hr><p>&nbsp;</p><p>&nbsp;</p><h2 id="2-通过编写一个方法"><a href="#2-通过编写一个方法" class="headerlink" title="2.通过编写一个方法"></a>2.通过编写一个方法</h2><p>为了测试明显，不在原类上修改，重写一个servlet与启动类。</p><p><span style="font-size: 10pt;">DeployServlet.java </span></p><p>去除了注解。</p><pre class="lang:java decode:true">package xyz.xioaxin12.springboot01servlet.servlet;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class DeployServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        resp.setCharacterEncoding("UTF-8");        resp.setContentType("text/html;charset=utf-8");        resp.getWriter().append("这是springboot整合servlet另一种方式!");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        super.doPost(req, resp);    }}</pre><p>&nbsp;</p><p><span style="font-size: 10pt;">SpringBoot01ServletApplication2.java</span></p><p>一定要添加@Bean</p><pre class="lang:java decode:true " title="SpringBoot01ServletApplication2 ">package xyz.xioaxin12.springboot01servlet;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import xyz.xioaxin12.springboot01servlet.servlet.DeployServlet;@SpringBootApplicationpublic class SpringBoot01ServletApplication2 {    public static void main(String[] args) {        SpringApplication.run(SpringBoot01ServletApplication2.class, args);    }    @Bean    public ServletRegistrationBean getRegistrationBean(){        ServletRegistrationBean bean = new ServletRegistrationBean(new DeployServlet());        bean.addUrlMappings("/hello2");        return bean;    }}</pre><p>&nbsp;</p><p>启动访问localhost:8081/hello2</p><p><a href="http://image.xiaoxinyes.club/2019-01-06_113424.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-06_113424.png" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Session监听在线人数</title>
      <link href="/2019/10/21/JAVA-Session%E7%9B%91%E5%90%AC%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/"/>
      <url>/2019/10/21/JAVA-Session%E7%9B%91%E5%90%AC%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>统计网站在线人数，我们可以判断是否存在新的session被创建，创建则+1，销毁则-1。<a id="more"></a></p><p>首先建立监听类实现HttpSessionListener。监听session的创建和销毁。<br>sessionCreated–创建<br>sessionDestroyed–销毁</p><pre class="lang:java decode:true ">package xyz.xioaxin12.listener;import javax.servlet.ServletContext;import javax.servlet.http.HttpSessionEvent;import javax.servlet.http.HttpSessionListener;public class MyListener implements HttpSessionListener {    @Override    public void sessionCreated(HttpSessionEvent se) {        ServletContext context = se.getSession().getServletContext();        Integer num = (Integer) context.getAttribute("num");        if(num == null){            context.setAttribute("num",1);        }else {            context.setAttribute("num",++num);        }        System.out.println(num);    }    @Override    public void sessionDestroyed(HttpSessionEvent se) {        ServletContext context = se.getSession().getServletContext();        Integer num = (Integer) context.getAttribute("num");        if(num == null){            context.setAttribute("num",1);        }else {            context.setAttribute("num",--num);        }        System.out.println(num);    }}</pre><hr><p>&nbsp;</p><p>web.xml 配置监听器</p><pre class="lang:default decode:true ">  &lt;listener&gt;    &lt;listener-class&gt;xyz.xioaxin12.listener.MyListener&lt;/listener-class&gt;  &lt;/listener&gt;</pre><hr><p>&nbsp;</p><p>jsp El 接受数据<br><strong>在线人数:${num}</strong></p><p>&nbsp;</p><p>如图</p><p><a href="http://image.xiaoxinyes.club/2018-12-7.gif" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-12-7.gif" alt></a></p><hr><p>&nbsp;</p><p>session过期默认时间为30分钟。否则需要额外的操作，如点击按钮调用方法清除session等等。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]第一个JFinal例子</title>
      <link href="/2019/10/21/JAVA-%E7%AC%AC%E4%B8%80%E4%B8%AAJFinal%E4%BE%8B%E5%AD%90/"/>
      <url>/2019/10/21/JAVA-%E7%AC%AC%E4%B8%80%E4%B8%AAJFinal%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>通过IDEA+Maven下搭建。<a id="more"></a></p><p>首先创建一个maven项目。</p><p><img src="http://image.xiaoxinyes.club/2018-12-02_162449.png" alt="爱生活爱技术"></p><hr><p>&nbsp;</p><p>下一步下一步，环境搭建好之后，开始添加maven依赖。</p><pre class="lang:default decode:true">&lt;dependency&gt;    &lt;groupId&gt;com.jfinal&lt;/groupId&gt;    &lt;artifactId&gt;jfinal-undertow&lt;/artifactId&gt;    &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;</pre><hr><p>&nbsp;</p><p>创建DemoConfig类继承JFinalConfig。</p><pre class="lang:default decode:true" title="DemoConfig">package xyz.xioaxin12.demo;import com.jfinal.config.*;import com.jfinal.server.undertow.UndertowServer;import com.jfinal.template.Engine;import xyz.xioaxin12.controller.HelloController;public class DemoConfig extends JFinalConfig {    public static void main(String[] args) {        UndertowServer.start(DemoConfig.class,80,true);    }    @Override    public void configConstant(Constants me) {        me.setDevMode(true);    }    @Override    public void configRoute(Routes me) {        me.add("/hello",HelloController.class);    }    @Override    public void configEngine(Engine me) {    }    @Override    public void configPlugin(Plugins me) {    }    @Override    public void configInterceptor(Interceptors me) {    }    @Override    public void configHandler(Handlers me) {    }}</pre><p>&nbsp;</p><p>HelloController类</p><pre class="lang:default decode:true " title="HelloController ">package xyz.xioaxin12.controller;import com.jfinal.core.Controller;public class HelloController extends Controller {    public void index(){        renderText("hello JFinal!");    }}</pre><p>&nbsp;</p><p>启动访问localhost/hello即可，如下：</p><p><a href="http://image.xiaoxinyes.club/2018-12-02_165651.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-12-02_165651.png" alt></a></p><p>通过阅读官方文档，HelloController类可以使用注解，如下：</p><pre class="lang:default decode:true ">public class HelloController extends Controller {    @ActionKey("/test")    public void index(){        renderText("hello JFinal!");    }}</pre><p>&nbsp;</p><p>访问的路径则是localhost/test，但是发现配置了注解，configRoute下的映射路径即失效了，但是又不能不写，所以感觉注解并没有多大的用处。</p><pre class="lang:default decode:true ">public void configRoute(Routes me) {    me.add("/hello",HelloController.class);}</pre><p>&nbsp;</p><p>发现该框架配置起来的确很简便。</p><p>JFinal官网：<a href="http://www.jfinal.com/" target="_blank" rel="noopener">http://www.jfinal.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]web.xml配置404,500</title>
      <link href="/2019/10/21/JAVA-web-xml%E9%85%8D%E7%BD%AE404-500/"/>
      <url>/2019/10/21/JAVA-web-xml%E9%85%8D%E7%BD%AE404-500/</url>
      
        <content type="html"><![CDATA[<p>javaWeb项目中，配置404，500，简简单单几句话就解决了。<a id="more"></a></p><p><strong>web.xml</strong></p><pre class="lang:default decode:true ">&lt;error-page&gt;    &lt;error-code&gt;404&lt;/error-code&gt;    &lt;location&gt;/404.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;error-page&gt;    &lt;error-code&gt;500&lt;/error-code&gt;    &lt;location&gt;/505.jsp&lt;/location&gt;&lt;/error-page&gt;</pre><p>&nbsp;</p><p>同时我的404.jsp直接接入腾讯公益的404页面。</p><p>腾讯404公益平台:<a href="http://www.qq.com/404/" target="_blank" rel="noopener">http://www.qq.com/404/</a>。</p><p>&nbsp;</p><p><strong>404.jsp</strong></p><pre class="lang:default decode:true">&lt;%--  Created by IntelliJ IDEA.  User: 小信  Date: 2018/9/10  Time: 15:12  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" isErrorPage="true"%&gt;&lt;html&gt;&lt;script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8"        homePageUrl="/index.jsp" homePageName="重新回到主页"&gt;&lt;/script&gt;&lt;head&gt;    &lt;title&gt;发生了错误&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Jsp通过JSTL遍历数据</title>
      <link href="/2019/10/21/JAVA-Jsp%E9%80%9A%E8%BF%87JSTL%E9%81%8D%E5%8E%86%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/10/21/JAVA-Jsp%E9%80%9A%E8%BF%87JSTL%E9%81%8D%E5%8E%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>视图层获取到数据库的中数据后，存入List集合中，通过JSTL的c:foErch遍历。<a id="more"></a></p><p>&nbsp;</p><pre class="lang:java decode:true" title="View">@RequestMapping("/selectAll.do")public ModelAndView doSelectAll(){    List&lt;Student&gt; student = service.findAllStudents();    ModelAndView view = new ModelAndView();    view.addObject("student",student);    view.setViewName("/main.jsp");    return view;}</pre><p>&nbsp;</p><h3 id="main-jsp"><a href="#main-jsp" class="headerlink" title="main.jsp"></a>main.jsp</h3><pre class="lang:default decode:true ">&lt;%@ page contentType="text/html; charset=UTF-8" language="java" %&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;&lt;html&gt;&lt;title&gt;查询&lt;/title&gt;&lt;body&gt;&lt;h2 align="center"&gt;查询成功&lt;/h2&gt;&lt;table width="100%" border=1&gt;    &lt;c:forEach items="${student}" var="c"&gt;        &lt;tr&gt;            &lt;td&gt;${c.id }&lt;/td&gt;            &lt;td&gt;${c.name }&lt;/td&gt;            &lt;td&gt;${c.age }&lt;/td&gt;        &lt;/tr&gt;    &lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><h3 id="遍历结果"><a href="#遍历结果" class="headerlink" title="遍历结果"></a>遍历结果</h3><p><img src="http://image.xiaoxinyes.club/2018-09-07_1.png" alt title="爱生活爱技术"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Mybatis-Mapper动态代理</title>
      <link href="/2019/10/21/JAVA-Mybatis-Mapper%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/10/21/JAVA-Mybatis-Mapper%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>基于[<span style="text-decoration: underline;"><span style="color: #ff0000; text-decoration: underline;">[Mybatis增删改查]</span></span>]这篇文章基础上进行更改，详细步骤请先了解后在看本文。<a id="more"></a></p><h2 id="1，新建一个工具类MyBatisUtils-java用于获取sqlSessionFactory对象"><a href="#1，新建一个工具类MyBatisUtils-java用于获取sqlSessionFactory对象" class="headerlink" title="1，新建一个工具类MyBatisUtils.java用于获取sqlSessionFactory对象"></a>1，新建一个工具类MyBatisUtils.java用于获取sqlSessionFactory对象</h2><pre class="lang:java decode:true">package xyz.xioaxin12.utils;/** * @author 小信 */public class MyBatisUtils {    private static SqlSessionFactory sqlSessionFactory;    public static SqlSession getSqlsession(){        try {            InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");            if(sqlSessionFactory == null){                sqlSessionFactory =  new SqlSessionFactoryBuilder().build(inputStream);            }            return sqlSessionFactory.openSession();        } catch (IOException e) {            e.printStackTrace();        }        return null;    }}</pre><hr><p>&nbsp;</p><h2 id="2，删除StudentDaoImpl的接口实现类。"><a href="#2，删除StudentDaoImpl的接口实现类。" class="headerlink" title="2，删除StudentDaoImpl的接口实现类。"></a>2，删除StudentDaoImpl的接口实现类。</h2><p>&nbsp;</p><h2 id="3，修改测试类"><a href="#3，修改测试类" class="headerlink" title="3，修改测试类"></a>3，修改测试类</h2><pre class="lang:java decode:true">package xyz.xioaxin12.test;/** * @author 小信 */public class TestMybatis {    private static StudentDao dao;    private static SqlSession sqlSession;    static{        //获取配置接口        sqlSession = MyBatisUtils.getSqlsession();        dao = sqlSession.getMapper(StudentDao.class);    }    public static void main(String[] args) {        //增        addStu();        //删//        deleteStu();        //改//        updateStu();        //查//       selectStu();    }    public static void addStu(){        Student student = new Student("小信",19);        dao.insertStudent(student);        sqlSession.commit();        closeSqlsession();    }    public static void deleteStu(){        dao.deleteStudent(1);        sqlSession.commit();        closeSqlsession();    }    public static void updateStu(){        Student student = new Student("阿六",20);        student.setId(2);        dao.updateStudent(student);        sqlSession.commit();        closeSqlsession();    }    public static void selectStu(){        List&lt;Student&gt; students = dao.selectStudent();        for (Student student: students) {            System.out.println(student.getId()+"-"+student.getName()+"-"+student.getAge());        }        closeSqlsession();    }    /**     * 关闭资源     */    public static void closeSqlsession(){        if(sqlSession!=null){            sqlSession.close();        }    }}</pre><hr><p>&nbsp;</p><p>&nbsp;</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><strong>mapper映射文件namespace为接口的全类名；</strong></li><li><strong>接口中的每个方法名分别与mapper映射文件每个处理数据的id一致。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Mybatis增删改查</title>
      <link href="/2019/10/21/JAVA-Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2019/10/21/JAVA-Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>建立test数据库，student_数据表，含有id，name，age字段。<a id="more"></a></p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><pre><code>CREATE TABLE `student_`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  `age` int(11) NOT NULL,  PRIMARY KEY (`id`) USING BTREE)</code></pre><hr><p>&nbsp;</p><h2 id="定义实体类Student-java"><a href="#定义实体类Student-java" class="headerlink" title="定义实体类Student.java"></a>定义实体类Student.java</h2><pre><code>package xyz.xioaxin12.bean;/** * @author 小信 */public class Student {    private Integer id;    private String name;    private int age;    public Student() {    }    public Student(String name, int age) {        this.name = name;        this.age = age;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }}</code></pre><hr><p>&nbsp;</p><h2 id="定义StudentDao接口，含增删改查方法"><a href="#定义StudentDao接口，含增删改查方法" class="headerlink" title="定义StudentDao接口，含增删改查方法"></a>定义StudentDao接口，含增删改查方法</h2><pre><code>package xyz.xioaxin12.dao;import xyz.xioaxin12.bean.Student;/** * @author 小信 */public interface StudentDao {    void insertStudent(Student student);    void deleteStudent(int id);    void updateStudent(Student student);    List&amp;lt;Student&amp;gt; selectStudent();}</code></pre><hr><p>&nbsp;</p><h2 id="StudentDao的实现类StudentDaoImpl"><a href="#StudentDao的实现类StudentDaoImpl" class="headerlink" title="StudentDao的实现类StudentDaoImpl"></a>StudentDao的实现类StudentDaoImpl</h2><pre><code>package xyz.xioaxin12.dao;/** * @author 小信 */public class StudentDaoImpl implements StudentDao {    private SqlSession sqlSession;    @Override    public void insertStudent(Student student) {        try {            InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            sqlSession=sqlSessionFactory.openSession();            sqlSession.insert(&quot;insertStudent&quot;,student);            sqlSession.commit();        } catch (IOException e) {            e.printStackTrace();        }finally {            if(sqlSession != null){                sqlSession.close();            }        }    }    @Override    public void deleteStudent(int id) {        try {            InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            sqlSession=sqlSessionFactory.openSession();            sqlSession.insert(&quot;deleteStudent&quot;,id);            sqlSession.commit();        } catch (IOException e) {            e.printStackTrace();        }finally {            if(sqlSession != null){                sqlSession.close();            }        }    }    @Override    public void updateStudent(Student student) {        try {            InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            sqlSession=sqlSessionFactory.openSession();            sqlSession.update(&quot;updateStudent&quot;,student);            sqlSession.commit();        } catch (IOException e) {            e.printStackTrace();        }finally {            if(sqlSession != null){                sqlSession.close();            }        }    }    @Override    public List&amp;lt;Student&amp;gt; selectStudent() {        List&amp;lt;Student&amp;gt; students = null;        try {            InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            sqlSession=sqlSessionFactory.openSession();            students = sqlSession.selectList(&quot;selectStudent&quot;);        } catch (IOException e) {            e.printStackTrace();        }finally {            if(sqlSession != null){                sqlSession.close();            }        }        return students;    }}</code></pre><hr><p>&nbsp;</p><h2 id="映射文件mapper-xml-放在dao包下"><a href="#映射文件mapper-xml-放在dao包下" class="headerlink" title="映射文件mapper.xml,放在dao包下"></a>映射文件mapper.xml,放在dao包下</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;xyz.xioaxin12.dao.StudentDao&quot;&gt;    &lt;insert id=&quot;insertStudent&quot; parameterType=&quot;Student&quot;&gt;        insert into student_(name,age) values (#{name},#{age})    &lt;/insert&gt;    &lt;delete id=&quot;deleteStudent&quot;&gt;        delete from student_ where id=#{id}    &lt;/delete&gt;    &lt;update id=&quot;updateStudent&quot;&gt;        update student_ set name=#{name},age=#{age} where id=#{id}    &lt;/update&gt;    &lt;select id=&quot;selectStudentId&quot; resultType=&quot;Student&quot;&gt;        select id,name,age from student_ where id=#{id}    &lt;/select&gt;    &lt;select id=&quot;selectStudent&quot; resultType=&quot;Student&quot;&gt;        select * from student_    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p><strong><span style="font-size: 10pt;">id跟StudentDaoImpl中的参数一致</span></strong></p><hr><p>&nbsp;</p><h2 id="主配置文件mybatis-xml"><a href="#主配置文件mybatis-xml" class="headerlink" title="主配置文件mybatis.xml"></a>主配置文件mybatis.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;xyz.xioaxin12.dao.StudentDao&quot;&gt;    &lt;insert id=&quot;insertStudent&quot; parameterType=&quot;Student&quot;&gt;        insert into student_(name,age) values (#{name},#{age})    &lt;/insert&gt;    &lt;delete id=&quot;deleteStudent&quot;&gt;        delete from student_ where id=#{id}    &lt;/delete&gt;    &lt;update id=&quot;updateStudent&quot;&gt;        update student_ set name=#{name},age=#{age} where id=#{id}    &lt;/update&gt;    &lt;select id=&quot;selectStudentId&quot; resultType=&quot;Student&quot;&gt;        select id,name,age from student_ where id=#{id}    &lt;/select&gt;    &lt;select id=&quot;selectStudent&quot; resultType=&quot;Student&quot;&gt;        select * from student_    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p><strong><span style="font-size: 10pt;">&lt;package name=”xyz.xioaxin12.bean”/&gt; ：定义别名，该包中的实体类简单类名作为别名</span></strong></p><p><strong><span style="font-size: 10pt;">&lt;environments&gt;…&lt;/environments&gt;：运行环境，提供驱动，账号，密码，数据库信息。</span></strong></p><p><strong><span style="font-size: 10pt;">&lt;mapper resource=”xyz/xioaxin12/dao/mapper.xml”/&gt;： 映射到mapper.xml文件</span></strong></p><hr><p>&nbsp;</p><h2 id="logo4j-properties日志文件"><a href="#logo4j-properties日志文件" class="headerlink" title="logo4j.properties日志文件"></a>logo4j.properties日志文件</h2><pre><code>log4j.logger.xyz.xioaxin12.dao.StudentDao=DEBUG, stdout  log4j.appender.stdout=org.apache.log4j.ConsoleAppender  log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  log4j.appender.stdout.layout.ConversionPattern=%d [%-5p] %c - %m%n#show sqllog4j.logger.java.sql.ResultSet=INFO   log4j.logger.org.apache=INFO   log4j.logger.java.sql.Connection=DEBUG   log4j.logger.java.sql.Statement=DEBUG   log4j.logger.java.sql.PreparedStatement=DEBUG</code></pre><hr><p>&nbsp;</p><h2 id="测试类TestMybaties-java"><a href="#测试类TestMybaties-java" class="headerlink" title="测试类TestMybaties.java"></a>测试类TestMybaties.java</h2><pre><code>package xyz.xioaxin12.test;import xyz.xioaxin12.bean.Student;import xyz.xioaxin12.dao.StudentDao;import xyz.xioaxin12.dao.StudentDaoImpl;/** * @author 小信 */public class TestMybatis {    private static StudentDao dao;    static{        dao = new StudentDaoImpl();    }    public static void main(String[] args) {        //增        addStu();        //删//        deleteStu();        //改//        updateStu();        //查//       selectStu();    }    public static void addStu(){        Student student = new Student(&quot;小信&quot;,19);        dao.insertStudent(student);    }    public static void deleteStu(){        dao.deleteStudent(1);    }    public static void updateStu(){        Student student = new Student(&quot;阿六&quot;,20);        student.setId(2);        dao.updateStudent(student);    }    public static void selectStu(){        List&amp;lt;Student&amp;gt; students = dao.selectStudent();        for (Student student: students             ) {            System.out.println(student.getId()+&quot;-&quot;+student.getName()+&quot;-&quot;+student.getAge());        }    }}</code></pre><p>&nbsp;</p><p><span style="font-size: 12pt;"><em>本案例用了dao接口的实现类。可以删除以mapper动态代理的方式完成，无需实现dao接口。</em></span></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Hibernate案例</title>
      <link href="/2019/10/17/JAVA-Hibernate%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/10/17/JAVA-Hibernate%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Hibernate是操作数据库的框架，实现了对JDBC的封装。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>建立test数据库，准备表为student_，字段为id,name,age,结构如下</p><pre><code>DROP TABLE IF EXISTS `student_`;CREATE TABLE `student_`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  `age` int(11) NOT NULL,  PRIMARY KEY (`id`) USING BTREE)</code></pre><hr><p>&nbsp;</p><h2 id="第二步，创建java项目，导入jar包。"><a href="#第二步，创建java项目，导入jar包。" class="headerlink" title="第二步，创建java项目，导入jar包。"></a>第二步，创建java项目，导入jar包。</h2><p><a href="http://image.xiaoxinyes.club/2018-09-02_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-09-02_1.png" alt></a></p><hr><p>&nbsp;</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>实体类</p><pre><code>package xyz.xioaxin12.bean;/** * @author 小信 */public class Student {    private int id;    private String name;    private int age;    public Student(int id, String name, int age) {        this.id = id;        this.name = name;        this.age = age;    }    public Student() {    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }}</code></pre><hr><p>&nbsp;</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>实体类同包下建立Student.hbm.xml映射文件</p><pre class="lang:default decode:true ">&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping package="xyz.xioaxin12.bean"&gt;    &lt;class name="Student" table="student_"&gt;        &lt;id name="id" column="id"&gt;            &lt;generator class="native"&gt;&lt;/generator&gt;        &lt;/id&gt;        &lt;property name="name"/&gt;        &lt;property name="age"/&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</pre><p>&nbsp;</p><p><span style="font-size: 10pt; color: #ff0000;">Student.hbm.xml文件首字母大写，与类名一致。</span></p><p><span style="font-size: 10pt; color: #ff0000;">&lt;class name=”Student” table=”student_”&gt; ：类名对应表名。</span></p><hr><p>&nbsp;</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>src目录下建立hibernate.cfg.xml用于配置数据</p><pre><code>&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;&lt;!--数据库配置--&gt;&lt;hibernate-configuration&gt;    &lt;session-factory&gt;        &lt;!-- Database connection settings --&gt;        &lt;property name=&quot;connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;        &lt;property name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&lt;/property&gt;        &lt;property name=&quot;connection.username&quot;&gt;root&lt;/property&gt;        &lt;property name=&quot;connection.password&quot;&gt;1579886070&lt;/property&gt;        &lt;!-- SQL dialect --&gt;        &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;        &lt;!--Hibernate事务管理方式，即每个线程一个事务--&gt;        &lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt;        &lt;!--这表示是否在控制台显示执行的sql语句--&gt;        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;        &lt;!--自动更新数据库的表结构--&gt;        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;        &lt;mapping resource=&quot;xyz/xioaxin12/bean/Student.hbm.xml&quot; /&gt;    &lt;/session-factory&gt;&lt;/hibernate-configuration&gt;</code></pre><p>前面包括加载驱动，账号密码等。其他含义看注释。</p><hr><p>&nbsp;</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>测试类TestStudentHibernate</p><pre><code>package xyz.xioaxin12.test;import org.hibernate.SessionFactory;import org.hibernate.cfg.Configuration;import org.hibernate.classic.Session;import xyz.xioaxin12.bean.Student;/** * @author 小信 */public class TestStudentHibernate {    public static void main(String[] args) {        SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();        Session session = sessionFactory.openSession();        session.beginTransaction();        Student student = new Student();        student.setName(&quot;小信&quot;);        student.setAge(19);        session.save(student);        session.getTransaction().commit();        session.close();        sessionFactory.close();    }}</code></pre><p><strong>实现步骤</strong>：</p><p><span style="color: #ff0000;">1，获取SessionFactory ;</span><br><span style="color: #ff0000;">2，通过SessionFactory获取Session;</span><br><span style="color: #ff0000;">3，开启事务;</span><br><span style="color: #ff0000;">4，保存到数据库;</span><br><span style="color: #ff0000;">5，提交;</span><br><span style="color: #ff0000;">6，关闭Session和SessionFactory</span></p><hr><p>&nbsp;</p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>查看数据表</p><p><a href="http://image.xiaoxinyes.club/2018-09-02_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-09-02_2.png" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]JDBC-事务的处理</title>
      <link href="/2019/10/17/JAVA-JDBC-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/10/17/JAVA-JDBC-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>假设我现在有1000元，借给王五500，同时赵六还钱给我500，那么现在我所拥有的钱还是1000。若是没有事务会出现怎样的情况呢？假设在赵六还钱时出现了错误，那么我借出了500，而未收到500，现在自己只有500了。</p><pre class="lang:java decode:true">public class JdbcDemo {    public static void main(String[] args) {        Connection connection = null;        Statement Statement = null;        try {            Class.forName("com.mysql.jdbc.Driver");        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        try {            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8",                    "root", "1579886070");            //手动提交            connection.setAutoCommit(false);            Statement = connection.createStatement();            String sql1 = "update moneys set money=money-500 where name='小信'";            Statement.execute(sql1);            String sql2 = "update moneys set money=money+500 where name='小信'";            Statement.execute(sql2);            //提交事务            connection.commit();        } catch (SQLException e) {            e.printStackTrace();        }        finally {            if(Statement != null){                try {                    Statement.close();                } catch (Exception e) {                    e.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }}</pre><p>&nbsp;</p><p>connection.setAutoCommit(false);关闭自动提交，开启事务。<br>connection.commit();手动提交。</p><p>这样的话，多个数据操作时，成功一起成功，有任意一条数据操作失败便不会提交。</p><p>假如第二条SQL语句update moneys set money=money+500 where name=’小信’,其中的单词写错，没使用事务的话，就只会执行第一条sql语句，造成非期待的结果。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]JDBC-ResultSet查询数据</title>
      <link href="/2019/10/17/JAVA-JDBC-ResultSet%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/10/17/JAVA-JDBC-ResultSet%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>executeQuery 执行SQL语句</p><pre><code>public class JdbcDemo {    public static void main(String[] args) {        Connection connection = null;        Statement Statement = null;        try {//注册驱动            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        try {//获取连接            connection = DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&quot;,                    &quot;root&quot;, &quot;1579886070&quot;);            Statement = connection.createStatement();            String sql = &quot;select *from student&quot;;            //返回结果集            ResultSet resultSet = Statement.executeQuery(sql);//遍历集合            while (resultSet.next()){                //可以用字段名                int id = resultSet.getInt(&quot;id&quot;);                //可以用字段的位置                String name = resultSet.getString(2);                int age = resultSet.getInt(&quot;age&quot;);                System.out.println(&quot;id:&quot;+id+&quot;,name:&quot;+name+&quot;,age:&quot;+age);            }        } catch (SQLException e) {            e.printStackTrace();        }        finally {            if(Statement != null){                try {                    Statement.close();                } catch (Exception e) {                    e.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }}</code></pre><p>&nbsp;</p><p>遍历时可以使用字段名或者字段的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Statement与PreparedStatement</title>
      <link href="/2019/10/16/JAVA-Statement%E4%B8%8EPreparedStatement/"/>
      <url>/2019/10/16/JAVA-Statement%E4%B8%8EPreparedStatement/</url>
      
        <content type="html"><![CDATA[<p>Statement和PreparedStatement都是用来执行sql语句的,那我们在使用的时候选择谁呢？</p><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><pre class="lang:java decode:true ">public class JdbcDemo {    public static void main(String[] args) {        Connection connection = null;        Statement statement = null;        try {            Class.forName("com.mysql.jdbc.Driver");        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        try {            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8",                    "root", "1579886070");            statement = connection.createStatement();            String sql = "insert into student values(null,"+"'小信'"+","+"18)";            statement.execute(sql);        } catch (SQLException e) {            e.printStackTrace();        }        finally {            if(statement != null){                try {                    statement.close();                } catch (Exception e) {                    e.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }}</pre><hr><p>&nbsp;</p><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><pre class="lang:java decode:true ">public class JdbcDemo {    public static void main(String[] args) {        Connection connection = null;        PreparedStatement preparedStatement = null;        try {            Class.forName("com.mysql.jdbc.Driver");        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        try {            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8",                    "root", "1579886070");            String sql = "insert into student values(null,?,?)";            preparedStatement = connection.prepareStatement(sql);            //设置参数值            preparedStatement.setString(1,"小天");            preparedStatement.setInt(2,20);            //执行            preparedStatement.execute();        } catch (SQLException e) {            e.printStackTrace();        }        finally {            if(preparedStatement != null){                try {                    preparedStatement.close();                } catch (Exception e) {                    e.printStackTrace();                }            }            if(connection != null){                try {                    connection.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }}</pre><p>&nbsp;</p><p>&nbsp;</p><p>以上分别用Statement和PreparedStatement实现数据库插入数据的案例。</p><p>对比明显总结：</p><ul><li><p><span style="font-size: 12pt;"><strong>Statement使用繁琐的字符串拼接，不但不易阅读，当字段比较多时容易出错。可读性与维护性都不好;</strong></span></p></li><li><p><span style="font-size: 12pt;"><strong>PreparedStatement使用设置参数的形式，简单易读，不易出错。</strong></span><br>其他优点：</p></li><li><p><strong>PreparedStatement执行效率高于Statement，假设一次要插入10条数据，那么Statement需要执行10次，把10次全部传输到数据库端。</strong></p></li><li><p><strong>PreparedStatement防止Sql注入。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]jsp表单非空校验</title>
      <link href="/2019/10/16/JAVA-jsp%E8%A1%A8%E5%8D%95%E9%9D%9E%E7%A9%BA%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/10/16/JAVA-jsp%E8%A1%A8%E5%8D%95%E9%9D%9E%E7%A9%BA%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>弹窗式提示，在点击提交后，为空则弹出提示框。<a id="more"></a></p><h3 id="jsp表单"><a href="#jsp表单" class="headerlink" title="jsp表单"></a>jsp表单</h3><pre class="lang:default decode:true ">&lt;body&gt;&lt;h1&gt;提交&lt;/h1&gt;&lt;form class="form" action="/aa" method="post"&gt;    &lt;input type="text" name="name" id="name" placeholder="用户名" onblur="validateNonEmpty(this)" /&gt;    &lt;input type="password" name="password" id="password" placeholder="密码"/&gt;    &lt;button type="submit" name="regist" onclick="return valid()" &gt;注册&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;</pre><p>&nbsp;</p><h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><pre class="lang:js decode:true ">&lt;script type="text/javascript"&gt;    function valid() {        var name = document.getElementById("name").value;        var pas = document.getElementById("password").value;        if(name=="" || name==null){            alert("用户名不能为空！");            return false;        }        else if(pas=="" || pas==null){            alert("密码不能为空！");            return false;        }        else{            return true;        }    }&lt;/script&gt;</pre><p>&nbsp;</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://image.xiaoxinyes.club/8_15_1.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]实现成语验证码</title>
      <link href="/2019/10/16/JAVA-%E5%AE%9E%E7%8E%B0%E6%88%90%E8%AF%AD%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2019/10/16/JAVA-%E5%AE%9E%E7%8E%B0%E6%88%90%E8%AF%AD%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="生成验证码，WEB-INF下一个idiom-txt文件，存放四字成语。"><a href="#生成验证码，WEB-INF下一个idiom-txt文件，存放四字成语。" class="headerlink" title="生成验证码，WEB-INF下一个idiom.txt文件，存放四字成语。"></a>生成验证码，WEB-INF下一个idiom.txt文件，存放四字成语。</h2><pre class="lang:java decode:true ">package xyz.xioaxin12.utils;import ...public class ImgToolServlet extends HttpServlet {    // 集合中保存所有成语    private List&lt;String&gt; words = new ArrayList&lt;String&gt;();    @Override    public void init() throws ServletException {        // 初始化阶段，读取new_words.txt        // web工程中读取 文件，必须使用绝对磁盘路径        String path = getServletContext().getRealPath("/WEB-INF/idiom.txt");        try {            BufferedReader reader = new BufferedReader(new InputStreamReader(                    new FileInputStream(path), "utf-8"));            String line;            while ((line = reader.readLine()) != null) {                words.add(line);            }            reader.close();        } catch (IOException e) {            e.printStackTrace();        }    }    @Override    public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        // 禁止缓存        // response.setHeader("Cache-Control", "no-cache");        // response.setHeader("Pragma", "no-cache");        // response.setDateHeader("Expires", -1);        int width = 120;        int height = 30;        // 步骤一 绘制一张内存中图片        BufferedImage bufferedImage = new BufferedImage(width, height,                BufferedImage.TYPE_INT_RGB);        // 步骤二 图片绘制背景颜色 ---通过绘图对象        Graphics graphics = bufferedImage.getGraphics();// 得到画图对象 --- 画笔        // 绘制任何图形之前 都必须指定一个颜色        graphics.setColor(getRandColor(200, 250));        graphics.fillRect(0, 0, width, height);        // 步骤三 绘制边框        graphics.setColor(Color.WHITE);        graphics.drawRect(0, 0, width - 1, height - 1);        // 步骤四 四个随机数字        Graphics2D graphics2d = (Graphics2D) graphics;        // 设置输出字体        graphics2d.setFont(new Font("宋体", Font.BOLD, 18));        Random random = new Random();// 生成随机数        int index = random.nextInt(words.size());        String word = words.get(index);// 获得成语        // 定义x坐标        int x = 10;        for (int i = 0; i &lt; word.length(); i++) {            // 随机颜色            graphics2d.setColor(new Color(20 + random.nextInt(110), 20 + random                    .nextInt(110), 20 + random.nextInt(110)));            // 旋转 -30 --- 30度            int jiaodu = random.nextInt(60) - 30;            // 换算弧度            double theta = jiaodu * Math.PI / 180;            // 获得字母数字            char c = word.charAt(i);            // 将c 输出到图片            graphics2d.rotate(theta, x, 20);            graphics2d.drawString(String.valueOf(c), x, 20);            graphics2d.rotate(-theta, x, 20);            x += 30;        }        // 将验证码内容保存session        request.getSession().setAttribute("checkcode_session", word);        System.out.println(word);        // 步骤五 绘制干扰线        graphics.setColor(getRandColor(160, 200));        int x1;        int x2;        int y1;        int y2;        for (int i = 0; i &lt; 30; i++) {            x1 = random.nextInt(width);            x2 = random.nextInt(12);            y1 = random.nextInt(height);            y2 = random.nextInt(12);            graphics.drawLine(x1, y1, x1 + x2, x2 + y2);        }        // 将上面图片输出到浏览器 ImageIO        graphics.dispose();// 释放资源        ImageIO.write(bufferedImage, "jpg", response.getOutputStream());    }    @Override    public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        doGet(request, response);    }    /**     * 取其某一范围的color     *     * @param fc int 范围参数1     * @param bc int 范围参数2     * @return Color     */    private Color getRandColor(int fc, int bc) {        // 取其随机颜色        Random random = new Random();        if (fc &gt; 255) {            fc = 255;        }        if (bc &gt; 255) {            bc = 255;        }        int r = fc + random.nextInt(bc - fc);        int g = fc + random.nextInt(bc - fc);        int b = fc + random.nextInt(bc - fc);        return new Color(r, g, b);    }}</pre><hr><p>&nbsp;</p><h2 id="index-jsp表单"><a href="#index-jsp表单" class="headerlink" title="index.jsp表单"></a>index.jsp表单</h2><pre class="lang:default decode:true">&lt;%--  Created by IntelliJ IDEA.  User: 小信  Date: 2018/8/10  Time: 7:45  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;script type="text/javascript"&gt;    function change() {        document.getElementById("im").src = "${pageContext.request.contextPath}/tool?time"            + new Date().getTime();    };&lt;/script&gt;&lt;body&gt;${requestScope["regist.message"] }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;form action="${pageContext.request.contextPath }/validation" method="post"&gt;    &lt;input type="text" name="checkcode" id="checkcode"&gt;    &lt;input type="submit" value="验证"/&gt;&lt;/form&gt;&lt;img        src='${pageContext.request.contextPath}/tool' id="im"        onclick="change();"&gt;&lt;span id="checkcode_span"&gt;&lt;a        href="javascript:void(0)" onclick="change();"&gt;&lt;font        color='black'&gt;换一张&lt;/font&gt;&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</pre><hr><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"         version="4.0"&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;imgtool&lt;/servlet-name&gt;        &lt;servlet-class&gt;xyz.xioaxin12.utils.ImgToolServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;ValidationServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;xyz.xioaxin12.dao.ValidationServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;ValidationServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/validation&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;imgtool&lt;/servlet-name&gt;        &lt;url-pattern&gt;/tool&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</pre><hr><p>&nbsp;</p><h2 id="实现检验验证码，错误输出错误信息，重新回到本页面。正确则转发到login-jsp页面。"><a href="#实现检验验证码，错误输出错误信息，重新回到本页面。正确则转发到login-jsp页面。" class="headerlink" title="实现检验验证码，错误输出错误信息，重新回到本页面。正确则转发到login.jsp页面。"></a>实现检验验证码，错误输出错误信息，重新回到本页面。正确则转发到login.jsp页面。</h2><pre class="lang:java decode:true">package xyz.xioaxin12.dao;import ...public class ValidationServlet extends HttpServlet {    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        doGet(request,response);    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        //解决乱码        request.setCharacterEncoding("utf-8");        response.setCharacterEncoding("utf-8");        response.setContentType("text/html; charset=utf-8");        // 验证码操作        String checkcode = request.getParameter("checkcode");        String _checkcode = (String) request.getSession().getAttribute(                "checkcode_session");        System.out.println("checkcode--" + checkcode);        System.out.println("checkcode_session--" + _checkcode);        request.getSession().removeAttribute("checkcode_session");        if (_checkcode == null || (!_checkcode.equals(checkcode))) {            request.setAttribute("regist.message", "验证码不正确");            request.getRequestDispatcher("/index.jsp").forward(request,                    response);            return;        }        request.getRequestDispatcher("/login.jsp").forward(request,response);    }}</pre><p>&nbsp;</p><p>如图：</p><p><img src="http://image.xiaoxinyes.club/2018_8_13.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Cookie常用API</title>
      <link href="/2019/10/14/JAVA-Cookie%E5%B8%B8%E7%94%A8API/"/>
      <url>/2019/10/14/JAVA-Cookie%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<p>Cookie：访问Servlet，记录访问的信息，关闭浏览器后再次访问，前面的记录的信息自动销毁了。</p><p><strong>会话级别</strong>：（<span style="color: #ff0000;">默认级别</span>）浏览器访问某个站点，到关闭这个浏览器的整个过程，未一次会话。只要关闭了浏览器，cookie也将销毁。<br><strong>持久级别</strong>：将cookie保存到硬盘上。下次再次打开浏览器，cookie不会消失。</p><p>&nbsp;</p><h2 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h2><p><span style="color: #ff0000;"><strong>Cookie cookie = new Cookie(String cookieName,String cookieValue);</strong></span></p><p>举例</p><p><span style="color: #ff0000;"><strong>Cookie cookie = new Cookie(“name”,”xiaoxin”);</strong></span></p><p>&nbsp;</p><h2 id="常用的方法："><a href="#常用的方法：" class="headerlink" title="常用的方法："></a>常用的方法：</h2><ul><li><p>设置Cookie在客户端的持久化时间,单位:秒。时间设置0,代表删除cookie<br><span style="color: #ff0000;"><strong>cookie.setMaxAge(60);</strong></span><br>&nbsp;</p></li><li><p>设置Cookie的携带路径,访问这个路径时才携带cookie</p></li><li><p>*<span style="color: #ff0000;">cookie.setPath(request.getContextPath()+”/setcookie”);</span>**<br>&nbsp;</p></li><li><p>向客户端发送cookie<br><span style="color: #ff0000;"><strong>response.addCookie(cookie);</strong></span><br>&nbsp;</p></li></ul><p>&nbsp;</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>若不设置持久化时间，cookie默认存储在浏览器的内存当中，当退出浏览器，cookie信息销毁。</li><li>手动删除cookie，覆盖同名同路径，将持久化时间设置成0即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]谈谈重定向与转发</title>
      <link href="/2019/10/14/JAVA-%E8%B0%88%E8%B0%88%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91/"/>
      <url>/2019/10/14/JAVA-%E8%B0%88%E8%B0%88%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>转发与重定向都能指定到另外一个URl。</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><pre class="lang:java decode:true">response.sendRedirect(request.getContextPath()+"/redirect.jsp");</pre><p>&nbsp;</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><pre class="lang:java decode:true">request.getRequestDispatcher(request.getContextPath()+"/forwarding.jsp").forward(request,response);</pre><p>&nbsp;</p><p>request.getContextPath()获得的是web项目的根路径。</p><hr><p>&nbsp;</p><p>&nbsp;</p><p>演示说明：</p><p>web.xml配置的是&lt;url-pattern&gt;/aaa&lt;/url-pattern&gt;。<br>为了区分明显，项目中有一个redirect.jsp(表示重定向)和forwarding.jsp(表示转发),接下来通过动图分别查看路径得变化情况。</p><p>&nbsp;</p><p><strong>重定向：</strong></p><p><a href="http://image.xiaoxinyes.club/redirect.gif" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/redirect.gif" alt></a></p><p>&nbsp;</p><p>&nbsp;</p><p><strong>转发：</strong></p><p><a href="http://image.xiaoxinyes.club/forwarding.gif" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/forwarding.gif" alt></a></p><p>&nbsp;</p><p>可以很清楚的看到<strong>重定向的地址发生变化而转发的未改变</strong>。</p><p>接下来看一张简单的图</p><p><a href="http://image.xiaoxinyes.club/2018-08-10_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-10_1.png" alt></a></p><p>&nbsp;</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="转发与重定向的区别："><a href="#转发与重定向的区别：" class="headerlink" title="转发与重定向的区别："></a><span style="color: #ff0000;">转发与重定向的区别：</span></h3><ul><li><strong>重定向是两次请求，转发只有一次请求;</strong></li><li><strong>重新定向可以访问外部网站 转发只能访问内部资源;</strong></li><li><strong>重定向的地址会发生改变变化，转发地址不变;</strong></li><li><strong>转发性能高于重定向。</strong><br>&nbsp;</li></ul><p>我们可以抽象理解：</p><p><strong>重定向</strong>：你问我借钱，我没钱，我告诉你谁有钱你去找他。</p><p><strong>转发</strong>：你问我借钱，我没钱，我去帮你借给你。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]IDEA部署web项目添加tomcat</title>
      <link href="/2019/10/14/JAVA-IDEA%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0tomcat/"/>
      <url>/2019/10/14/JAVA-IDEA%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，进入Intellij-Idea。点击！"><a href="#第一步，进入Intellij-Idea。点击！" class="headerlink" title="第一步，进入Intellij Idea。点击！"></a>第一步，进入Intellij Idea。点击！</h2><p><a href="http://image.xiaoxinyes.club/2018-08-07_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_1.png" alt></a></p><hr><h2 id="第二步，按图步骤勾选。"><a href="#第二步，按图步骤勾选。" class="headerlink" title="第二步，按图步骤勾选。"></a>第二步，按图步骤勾选。</h2><h2 id><a href="#" class="headerlink" title></a><a href="http://image.xiaoxinyes.club/2018-08-07_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_2.png" alt></a></h2><hr><p>&nbsp;</p><h2 id="第三步，选择路径名称。"><a href="#第三步，选择路径名称。" class="headerlink" title="第三步，选择路径名称。"></a>第三步，选择路径名称。</h2><p><a href="http://image.xiaoxinyes.club/2018-08-07_3.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_3.png" alt></a></p><hr><p>&nbsp;</p><h2 id="到此之后，一个空项目就完成了。默认的index-jsp如下"><a href="#到此之后，一个空项目就完成了。默认的index-jsp如下" class="headerlink" title="到此之后，一个空项目就完成了。默认的index.jsp如下:"></a>到此之后，一个空项目就完成了。默认的index.jsp如下:</h2><pre class="lang:default decode:true ">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  $END$  &lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><p>&nbsp;</p><h2 id="接下来将项目部署Tomcat。"><a href="#接下来将项目部署Tomcat。" class="headerlink" title="接下来将项目部署Tomcat。"></a>接下来将项目部署Tomcat。</h2><p><a href="http://image.xiaoxinyes.club/2018-08-07_4.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_4.png" alt></a></p><hr><p>&nbsp;</p><h2 id="添加Tomcat步骤如下列图"><a href="#添加Tomcat步骤如下列图" class="headerlink" title="添加Tomcat步骤如下列图"></a>添加Tomcat步骤如下列图</h2><p><a href="http://image.xiaoxinyes.club/2018-08-08_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-08_1.png" alt></a></p><p>&nbsp;</p><p><a href="http://image.xiaoxinyes.club/2018-08-08_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-08_2.png" alt></a></p><p>&nbsp;</p><p><a href="http://image.xiaoxinyes.club/2018-08-08_3.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-08_3.png" alt></a></p><p>&nbsp;</p><h2 id="Server界面根据自己情况配置"><a href="#Server界面根据自己情况配置" class="headerlink" title="Server界面根据自己情况配置"></a>Server界面根据自己情况配置</h2><p><a href="http://image.xiaoxinyes.club/2018-08-08_4.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-08_4.png" alt></a></p><p>&nbsp;</p><h2 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h2><p><a href="http://image.xiaoxinyes.club/2018-08-08_5.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-08_5.png" alt></a></p><p>&nbsp;</p><p><img src="http://image.xiaoxinyes.club/2018-08-08_6.png" alt></p><hr><h2 id="最后，全部完成测试运行看下。"><a href="#最后，全部完成测试运行看下。" class="headerlink" title="最后，全部完成测试运行看下。"></a>最后，全部完成测试运行看下。</h2><p><a href="http://image.xiaoxinyes.club/2018-08-07_5.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_5.png" alt></a></p><p>&nbsp;</p><h2 id="显示如下，完成！"><a href="#显示如下，完成！" class="headerlink" title="显示如下，完成！"></a>显示如下，完成！</h2><p><a href="http://image.xiaoxinyes.club/2018-08-07_61.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-08-07_61.png" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]修改数据库中数据</title>
      <link href="/2019/10/13/JAVA-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/10/13/JAVA-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>首先，创建一个名为test的数据库，库中创建一个student的表。将修改表中NAME字段中的”Tom”。</p><p><strong>添加数据</strong></p><p><a href="http://image.xiaoxinyes.club/4_26_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/4_26_1.png" alt="爱生活爱语录"></a></p><hr><p>&nbsp;</p><p>*<em>我将连接数据库，调用数据库和关闭资源分了三个方法，<br>*</em></p><pre class="lang:java decode:true">/** 连接数据库方法 * */public Connection getCconnection() throws Exception {    //数据信息    String user = "root";    String password = "1579886070";    String jdbcUrl = "jdbc:mysql://127.0.0.1:3360/test";    String driverClass = "com.mysql.jdbc.Driver";    //加载驱动    Class.forName(driverClass);    Connection connection = DriverManager.getConnection(jdbcUrl, user, password);    return connection;}</pre><hr><p>&nbsp;</p><p><strong>然后我们建立主方法，在其中调用</strong></p><pre class="lang:java decode:true">public void testUpdate(){    Connection connection = null;    Statement statement = null;    try {        //连接数据库        connection = getCconnection();            //调用 Connection 对象的 createStatement() 方法获取Statement 对象        statement = connection.createStatement();                    //准备SQL语句        String sql = "UPDATE student SET name = 'XiaoXin' WHERE id = 1";                    //4.发送SQL语句：调用Statement 对象的 executeUpdate(sql)方法        statement.executeUpdate(sql);            } catch (Exception e) {        e.printStackTrace();    }finally {        //调用关闭资源方法        getRelease(null, statement, connection);    }    }</pre><hr><p>&nbsp;</p><p><strong>在finally块中调用关闭资源的方法</strong></p><pre class="lang:java decode:true">/** 关闭资源方法* */public void getRelease(ResultSet resultSet,Statement statement,Connection connection){    if(resultSet != null){        try {            resultSet.close();        } catch (Exception e) {            e.printStackTrace();        }    }    if(statement != null){        try {            statement.close();        } catch (Exception e) {            e.printStackTrace();        }    }    if(connection != null){        try {            connection.close();        } catch (Exception e) {            e.printStackTrace();        }    }}</pre><hr><p>&nbsp;</p><p><strong>运行，执行完后查看数据表</strong></p><p><a href="http://image.xiaoxinyes.club/4_26_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/4_26_2.png" alt="爱生活爱语录"></a></p><p>好啦，将原本NAME中的”Tom”修改为”XiaoXin”了。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]java连接数据库</title>
      <link href="/2019/10/13/JAVA-java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/10/13/JAVA-java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Driver 是一个接口：数据库厂商必须提供实现得接口。能从其中获取数据库连接。可以通过Driver 的实现类对象获取数据库连接。</p><p>1，加入mysql驱动<br>1),解压mysql-connector-java-5.1.44<br>2),在当前项目下新建lib目录<br>3),把mysql-connector-java-5.1.44-bin.jar 复制到lib目录下<br>4),右键build-path，add to buildpath 加入到类路径下</p><p><strong>说明：博主用的mysql连接的，默认端口为3306，我修改过：为3360。</strong></p><pre class="lang:java decode:true">public void testDriver() throws SQLException {        //1,创建一个Driver实现类的对象        Driver driver = new com.mysql.jdbc.Driver();        //2,准备连接数据库的基本信息:url,user,password        String url = "jdbc:mysql://127.0.0.1:3360/test";        Properties info = new Properties();            info.put("user", "root");        info.put("password", "1579886070");        //3,调用Driver接口的 connect(url,info) 获取数据库连接        Connection connection = driver.connect(url, info);        System.out.println(connection);    }</pre><p>&nbsp;</p><hr><p><strong>另一种方式，用读取配置文件的方式</strong><br>** 好处：这样提高了复用性，如要将MySql换成Oracle，只需要修改配置文件中的信息即可**</p><p>首先建立一个配置文件为：jdbc.properties</p><p><a href="http://image.xiaoxinyes.club/java_4_25_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_4_25_1.png" alt="爱生活爱语录"></a></p><p>然后使用类加载器加载bin目录 (类路径下的)文件</p><pre class="lang:java decode:true ">public void testGetConnection2() throws Exception{    //1.读取jdbc.properties    Properties properties = new Properties();    InputStream inStream = ReviewTest.class.getClassLoader().getResourceAsStream("jdbc.properties");    properties.load(inStream);    //2.获取连接的4个字符串    String user = properties.getProperty("user");    String password = properties.getProperty("password");    String jdbcUrl = properties.getProperty("jdbcUrl");    String driverClass = properties.getProperty("driverClass");    //3.加载驱动            Class.forName(driverClass);    //4.调用获取    Connection connection = DriverManager.getConnection(jdbcUrl, user, password);    System.out.println(connection);}</pre><hr><p><strong>方法说明：</strong></p><ul><li><span style="font-size: 10pt;">getClassLoader()是取得该Class对象的类装载器;</span></li><li><span style="font-size: 10pt;">getResourceAsStream(“database.properties”) 调用类加载器的方法加载 资源，返回的是字节流。使用Properties类是为了可以从.properties属性文件对应的文件输入流中，加载属性列表到Properties类对象，然后通过getProperty方法用指定的键在此属性列表中搜索属性.</span></li><li><span style="font-size: 10pt;">getProperty ( String key)，用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。</span></li><li><span style="font-size: 10pt;">load ( InputStream inStream)，从输入流中读取属性列表（键和元素对）。</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]switch结构语句</title>
      <link href="/2019/10/13/JAVA-switch%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/10/13/JAVA-switch%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>讲过if语句，接下来讲讲switch，它也是常用的选择语句，作用于对一个表达式进行判断，来决定执行什么代码。<br><strong>来看下语句的基本格式</strong></p><p><a href="http://image.xiaoxinyes.club/java_3_15_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_15_1.png" alt></a></p><p>在上面的格式中,switch中的表达式的值会和每个case的值进行匹配，如果值相同，则会执行对应的case后的执行语句若都没有找到，则会执行default后的语句。break在这里起到的跳出switch语句的作用。</p><p>&nbsp;</p><p><strong>接下来做一个练习更加了解switch语句</strong></p><p><a href="http://image.xiaoxinyes.club/java_3_15_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_15_2.png" alt></a></p><p>分析：定义了一个变量n值为3，将3传入swithc()中，代码会先执行第一条case语句，看是否值与定义的3相等，不相等的话执行下一条，假如都不匹配，最后执行default后的代码。我定义的值是3，所以会匹配case 3后面的语句，打印”星期三”。</p><p>&nbsp;</p><p><strong>接下来看switch中另一种情况，如图</strong></p><p><a href="http://image.xiaoxinyes.club/java_3_15_3.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_15_3.png" alt></a></p><p>这种情况属于当n值为1.2.3.4.5中的任意一个值得时候，都打印”上学”，当n为6.7任意值都打印”休息”。</p><p>&nbsp;</p><p><span style="color: #999999; font-size: 8pt;">内容声明：博主原创</span></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]if结构语句</title>
      <link href="/2019/10/11/JAVA-if%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/10/11/JAVA-if%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>我们经常遇到某种事需要做出判断，像过马路需要对路况进行判断，红灯停绿灯行。而在java中<a id="more"></a>，可以用选择语句来作出判断。</p><p>选择语句有if语句与switch语句，现在对if语句进行说明。</p><h3 id="1-if条件语句"><a href="#1-if条件语句" class="headerlink" title="1. if条件语句"></a><strong>1. if条件语句</strong></h3><p>if语句是指如果满足某条件就执行什么动作。语法格式如下：<br><img src="http://image.xiaoxinyes.club/java_3_14.png" alt><br>如上图的三段伪代码所示，分解理解。“如果”相当于java关键字中的”if”。获取的值是一个布尔值，非真即假。分析上图可知。当前方是红灯的时候，接下来执行”我就停下来”的操作。<br>接下来简单看下if语句的用法</p><p><a href="http://image.xiaoxinyes.club/java_3_14_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_14_2.png" alt></a></p><p>如上图所示，给n变量赋值了10，其运行思路为：如果10大于5，那么打印，显而易见结果是”这是一个大于5的数呢”!</p><p>&nbsp;</p><h3 id="2-if…else语句条件语句"><a href="#2-if…else语句条件语句" class="headerlink" title="2. if…else语句条件语句"></a><strong>2. if…else语句条件语句</strong></h3><p>if…else语句如果满足某种条件，就进行某种处理，否则进行另一种处理。，语法格式如下：<br><a href="http://image.xiaoxinyes.club/java_3_14__3_1.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_14__3_1.png" alt></a></p><p>通过一个实例来了解</p><p><a href="http://image.xiaoxinyes.club/java_3_14_3.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_14_3.png" alt></a></p><p>上面代码中，实现的是判断一个数是偶数还是奇数。思路是：定义一个数为10，假如10除以2的余数正好等于0，那么打印”这个数是偶数”，否则就是10除以2不等于0的情况(else相当于否则)，那么打印”这个数是奇数”。</p><p>&nbsp;</p><h3 id="3-if…else-if…else条件语句"><a href="#3-if…else-if…else条件语句" class="headerlink" title="3. if…else if…else条件语句"></a><strong>3. if…else if…else条件语句</strong></h3><p>if…else if…else是在多个选择中进行多种不同的处理。语法格式如下：</p><p><a href="http://image.xiaoxinyes.club/java_3_14_3_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_14_3_2.png" alt></a><br>通过一个实例来了解if…else if…else的具体用法</p><p><a href="http://image.xiaoxinyes.club/java_3_14_4.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_3_14_4.png" alt></a></p><p>其结果如图。<br>定义成绩如果这个成绩大于90，则输入”成绩为优！”，不然会执行下面的else if看是否大于60，假如也不是，则最后输出”成绩为差”。(定义的变量值为75，所以成绩为良)</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]代码基本格式</title>
      <link href="/2019/10/11/JAVA-%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/10/11/JAVA-%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="就像每个人的性格爱好或许有不同，java在语言中相比也有它的代码格式"><a href="#就像每个人的性格爱好或许有不同，java在语言中相比也有它的代码格式" class="headerlink" title="就像每个人的性格爱好或许有不同，java在语言中相比也有它的代码格式"></a>就像每个人的性格爱好或许有不同，java在语言中相比也有它的代码格式</h1><p>人的肩上都是扛着我们脑袋，我们可以先简单得理解为java中的代码需要放在类当中，而类就是用class定义，class前面可以加上一些修饰符。格式如下：</p><p><a href="http://image.xiaoxinyes.club/java_2_5.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_2_5.png" alt></a></p><p>修饰符你可以理解为权限，自己能做什么，自己的范围领域。</p><p>如：</p><p>public：公开，支持任何包中的任何类。</p><p>protected：同一个包中的类和不同包中这个类的子类可以访问。</p><p>private：私有，表示除了你自己所在的类以外全部都不能访问。</p><p>没有修饰符：同一包中的任何类都能访问。</p><p>&nbsp;</p><p>以上说了修饰符的特点，来说下类名。就相当于我们每个人都有每个人的姓名，你总不能看见谁都叫‘喂’，这样是不行的。</p><p>而类名的定义规则：</p><p>由字母、数字、下划线(_)或美元符($)组成，且第一个字符不能是数字。</p><p>首字母要大写。</p><p>不能使用java中的关键字。</p><p>尽量使用有意义的单词来定义。</p><p>不要用中文不要用中文不要用中文。</p><p>&nbsp;</p><p>接下来再说下代码格式，人靠衣装佛靠金装，代码也一样，美观的代码能让人看着舒服，错误示范如下(这也是能编译运行的)：</p><p><a href="http://image.xiaoxinyes.club/java_2_5_3.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_2_5_3.png" alt></a></p><p>但是代码多起来，试问别人看着一群全拥挤在一块的字母，会连看下去的欲望都没有了。像下面的同样的代码不同排版就显得好多了，这也是通常的形式。</p><p><a href="http://image.xiaoxinyes.club/java_2_5_2.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/java_2_5_2.png" alt></a></p><p>出于可读性的考虑，我们应当养成良好的编写习惯，让自己写的代码整齐美观，层次清晰。所有换行也是非常重要的，虽然不是必需，但良好的排版习惯应该从一开始就养成……</p><p>&nbsp;</p><p>另外：</p><p>每条执行语句的最后都应该用分号(;)结束，并且是英文格式下的。</p><p>java是严格区分大小写的，如不能将class错写成Class，定义的类名大小写不同含义也有所不同。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JAVA]Main</title>
      <link href="/2019/10/11/JAVA-Main/"/>
      <url>/2019/10/11/JAVA-Main/</url>
      
        <content type="html"><![CDATA[<p>主函数的意义</p><p>如下图,接下来将分析</p><p><img src="http://image.xiaoxinyes.club/java_1.png" alt></p><p>&nbsp;</p><p>小白博主(哈哈，这是最开始写的文章，现在回过头看，重新迁移到这个博客)，前期一直用的EditPlus工具+命令行敲的，使用开发工具可以提高相当大的效率…</p><p>主函数：它是一个特殊的函数，作为程序的入口，可以被jvm所调用。</p><p>public：权限最大。</p><p>static：随着类的加载就已经存在了。</p><p>void：无返回值。</p><p>main：特殊单词。</p><p>String[] args：数组元素 String类型的名为 args的数组</p><p>args：它只是一个默认名，改成其他的也可以，但是由于别人都这样写，你也可以理解为规范了。</p><p>最后运行结果以字符串形式输出到控制台</p><p><img src="http://image.xiaoxinyes.club/java_1_1.png" alt="图"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]github修改显示语言</title>
      <link href="/2019/10/11/Other-github%E4%BF%AE%E6%94%B9%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/10/11/Other-github%E4%BF%AE%E6%94%B9%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>将一个java项目git到GitHub上，语言显示的css。也许是css文件比较多吧，自动识别成了css的了。</p><p>&nbsp;</p><h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>在目录创建一个<span style="color: #ff0000;">.gitattributes</span>文件。</p><p><img src="http://image.xiaoxinyes.club/2019-01-04_134342.png" alt></p><p>&nbsp;</p><p>创建之后，添加需要指定的语言即可。</p><p><img src="http://image.xiaoxinyes.club/2019-01-04_134514.png" alt></p><p>&nbsp;</p><pre class="lang:default decode:true" title=".gitattributes">*.js linguist-language=java*.css linguist-language=java*.html linguist-language=java</pre><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Other]IDEA上传github</title>
      <link href="/2019/10/11/Other-IDEA%E4%B8%8A%E4%BC%A0github/"/>
      <url>/2019/10/11/Other-IDEA%E4%B8%8A%E4%BC%A0github/</url>
      
        <content type="html"><![CDATA[<p>关于如何在idea中同步到github上去。</p><a id="more"></a><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>idea安装并且分别配置git和github的信息。</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_103516.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_103516.png" alt></a></p><hr><p>&nbsp;</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>github–&gt;new repository–&gt;获得链接</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_104045.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_104045.png" alt></a></p><hr><p>&nbsp;</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>创建本地仓库</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_104224.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_104224.png" alt></a></p><p>ok即可</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_104419.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_104419.png" alt></a></p><p>我们可以看到项目路径中就有生成的.git文件了。</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_104655.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_104655.png" alt></a></p><hr><p>&nbsp;</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>idea右键项目名–&gt;git–&gt;add。加入本地仓库！</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_105200.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_105200.png" alt></a></p><p>然后再Commit Directory。提交项目！<br><a href="http://image.xiaoxinyes.club/2019-01-05_104810.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_104810.png" alt></a><br>&nbsp;<br><a href="http://image.xiaoxinyes.club/2019-01-05_105647.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_105647.png" alt></a></p><hr><p>&nbsp;</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>等待一会，接下来会询问你要提交到哪，点击Define remote,把GitHub地址填写上去，push就行了。</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_105930.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_105930.png" alt></a></p><hr><p>&nbsp;</p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><p>打开github地址，就能看到已经push上去了，如果原项目修改了，需要重新传到GitHub上去，重新Commit Directory即可。</p><p><a href="http://image.xiaoxinyes.club/2019-01-05_110547.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2019-01-05_110547.png" alt></a></p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Oracle]基本操作-2</title>
      <link href="/2019/10/09/Oracle-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-2/"/>
      <url>/2019/10/09/Oracle-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-2/</url>
      
        <content type="html"><![CDATA[<p>继<span style="text-decoration: underline;"><a href="http://zx21.xyz/2019/10/09/Oracle-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-1/">Oracle基本操作-1</a></span>该篇文章的后续与补充！<a id="more"></a></p><h2>select语句</h2><h3>1.查询全部列</h3><pre class="lang:default decode:true " title="a_table表">select * from a_table</pre>[caption id="" align="aligncenter" width="296"]<a href="http://image.xiaoxinyes.club/2019-01-04_092517.png" target="_blank" rel="noopener"><img class="size-medium" src="http://image.xiaoxinyes.club/2019-01-04_092517.png" width="296" height="74"></a> a_table[/caption]<p>&nbsp;</p><h3>2.查询特定的列</h3><pre class="lang:default decode:true" title="b_table">select b_id,b_name,a_id from b_table</pre>[caption id="" align="aligncenter" width="224"]<a href="http://image.xiaoxinyes.club/2019-01-04_092912.png" target="_blank" rel="noopener"><img class="size-medium" src="http://image.xiaoxinyes.club/2019-01-04_092912.png" width="224" height="77"></a> b_table[/caption]<p>&nbsp;</p><h3>3.别名</h3>在查询中，给查询结果的列起一个自定义名称。<pre class="lang:default decode:true">select a_money as "月薪" from a_table</pre><a href="http://image.xiaoxinyes.club/2019-01-04_093250.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_093250.png" width="99" height="77"></a><p>&nbsp;</p><h3>4.算术运算符</h3><table class=" aligncenter" style="height: 157px;" width="177"><tbody><tr><td style="width: 80.15px;">运算符</td><td style="width: 80.15px;">描述</td></tr><tr><td style="width: 80.15px;">+</td><td style="width: 80.15px;">加</td></tr><tr><td style="width: 80.15px;">-</td><td style="width: 80.15px;">减</td></tr><tr><td style="width: 80.15px;">*</td><td style="width: 80.15px;">乘</td></tr><tr><td style="width: 80.15px;">/</td><td style="width: 80.15px;">除</td></tr></tbody></table>举例：计算年薪<pre class="lang:default decode:true ">select a_id,a_name,a_age,a_money*12 as "年薪" from a_table</pre><a href="http://image.xiaoxinyes.club/2019-01-04_093732.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_093732.png" width="275" height="79"></a><p>&nbsp;</p><h3>5.字符串连接</h3>能将指定的列进行连接。<pre class="lang:default decode:true ">select a_id,a_name ||'-'|| a_money as "姓名与工资" from a_table</pre><a href="http://image.xiaoxinyes.club/2019-01-04_094122.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_094122.png" width="205" height="81"></a><p>&nbsp;</p><h3>6.消除重复行</h3>先查询下a_table表<pre class="lang:default decode:true ">select a_money from a_table</pre><a href="http://image.xiaoxinyes.club/2019-01-04_094651.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_094651.png" width="124" height="74"></a><p>能看到有相同的数额，现在使用关键字<span style="color: #ff0000;">distinct</span></p><pre class="lang:default decode:true ">select distinct a_money from a_table</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_094830.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_094830.png" width="125" height="66"></a></p><p>&nbsp;</p><h3>7.where限定</h3>我们可以使用where进行过滤。<p>1).查询工资大于4000的所有信息。</p><pre class="lang:default decode:true">select * from a_table where a_money&gt;4000</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_095212.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_095212.png" width="292" height="35"></a></p><p>&nbsp;</p><p>2).查询姓名为“wangwu”的信息。</p><pre class="lang:default decode:true ">select * from a_table where a_name='wangwu'</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_095419.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_095419.png" width="298" height="34"></a></p><p>&nbsp;</p><p>除了常用的&gt;、&lt;、&gt;=等等这类比较运算符还包括下列的：</p><table class="NormalTable aligncenter" style="width: 239.35px;"><tbody><tr><td style="width: 90px;"><span class="fontstyle0">操作符</span></td><td style="width: 133.35px;"><span class="fontstyle0">含义</span></td></tr><tr><td style="width: 90px;"><span class="fontstyle1">BETWEEN...AND...</span></td><td style="width: 133.35px;"><span class="fontstyle0">在两个值之间 </span><span class="fontstyle3">(</span><span class="fontstyle0">包含边界</span><span class="fontstyle3">)</span></td></tr><tr><td style="width: 90px;"><span class="fontstyle1">IN(set)</span></td><td style="width: 133.35px;"><span class="fontstyle0">等于值列表中的一个</span></td></tr><tr><td style="width: 90px;"><span class="fontstyle1">LIKE</span></td><td style="width: 133.35px;"><span class="fontstyle0">模糊查询</span></td></tr><tr><td style="width: 90px;"><span class="fontstyle1">IS NULL</span></td><td style="width: 133.35px;"><span class="fontstyle0">空值</span></td></tr></tbody></table>&nbsp;<p>3).查询年龄在20-28之间的信息。</p><pre class="lang:default decode:true" title="between...and">select * from a_table where a_age between 20 and 28</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_100247.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_100247.png" width="301" height="65"></a></p><p>&nbsp;</p><p>4).查询金额是3400与3500。</p><pre class="lang:default decode:true" title="in">select * from a_table where a_money in(3400,3500)</pre><p>&nbsp;</p><p>5).模糊查询姓名以w开头的人的信息。</p><pre class="lang:default decode:true" title="like">select * from a_table where a_name like 'w%'</pre><p>&nbsp;</p><p>6).模糊查询倒数第二个字母的姓名为o的人的信息。</p><pre class="lang:default decode:true" title="like">select * from a_table where a_name like '%o_'</pre><p>&nbsp;</p><p>7).查询姓名中包含0的所有人的信息。</p><pre class="lang:default decode:true " title="like">select * from a_table where a_name like '%o%'</pre><p>&nbsp;</p><p>8).查询是否为空和不为空。</p><pre class="lang:default decode:true ">select * from a_table where a_name is nullselect * from a_table where a_name is not null</pre><p>&nbsp;</p><h3>8.逻辑运算</h3><table class="NormalTable"><tbody><tr><td width="43"><span class="fontstyle0">操作符</span></td><td width="43"><span class="fontstyle0">含义</span></td></tr><tr><td width="91"><span class="fontstyle1">AND</span></td><td width="91"><span class="fontstyle0">逻辑并</span></td></tr><tr><td width="86"><span class="fontstyle1">OR</span></td><td width="86"><span class="fontstyle0">逻辑或</span></td></tr><tr><td width="82"><span class="fontstyle1">NOT</span></td><td width="82"><span class="fontstyle0">逻辑否</span></td></tr></tbody></table>&nbsp;<p>1).查询年龄大于20并且工资大于4000的人。</p><pre class="lang:default decode:true" title="and">select * from a_table where a_age &gt; 20 and a_money &gt; 4000</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_101628.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_101628.png" width="286" height="30"></a></p><p>&nbsp;</p><p>2).查询年龄为20或者工资大于4000的人。</p><pre class="lang:default decode:true ">select * from a_table where a_age = 20 or a_money &gt; 4000</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_101839.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_101839.png" width="288" height="47"></a></p><p>&nbsp;</p><h3>9.排序查询</h3><p style="padding-left: 30px;"><span style="color: #ff0000;"> <span class="fontstyle0">使用 </span><span class="fontstyle2">ORDER BY </span><span class="fontstyle0">子句排序</span><span class="fontstyle3">– </span><span class="fontstyle4">ASC: </span><span class="fontstyle0">升序</span><span class="fontstyle3">– </span><span class="fontstyle4">DESC: </span><span class="fontstyle0">降序</span><span class="fontstyle3">• </span><span class="fontstyle2">ORDER BY </span><span class="fontstyle0">子句在</span><span class="fontstyle4">SELECT</span><span class="fontstyle0">语句的结尾</span></span></p><pre class="lang:default decode:true ">select * from a_table  order by a_money desc</pre><p>&nbsp;</p><h3>10.等值连接</h3>可以从多张表中取出数据，但是表中必须要有所关联。<pre class="lang:default decode:true ">select * from b_table b,a_table a where b.a_id=a.a_id</pre><a href="http://image.xiaoxinyes.club/2019-01-04_103033.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_103033.png" width="470" height="77"></a><p>&nbsp;</p><h3>11.子查询</h3>查询谁的工资高于wangwu。<pre class="lang:default decode:true ">select a_name from a_table where a_money&gt;(       select a_money  from a_table where a_name='wangwu' )</pre><a href="http://image.xiaoxinyes.club/2019-01-04_103655.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_103655.png" width="112" height="31"></a><hr><p>&nbsp;</p><h2>分组函数</h2><h3>1.统计函数</h3><p style="padding-left: 30px;"><span style="color: #ff0000;"> <span class="fontstyle0">• </span><span class="fontstyle2">AVG</span><span class="fontstyle0">• </span><span class="fontstyle2">COUNT</span><span class="fontstyle0">• </span><span class="fontstyle2">MAX</span><span class="fontstyle0">• </span><span class="fontstyle2">MIN</span><span class="fontstyle0">• </span><span class="fontstyle2">STDDEV</span><span class="fontstyle0">• </span><span class="fontstyle2">SUM</span></span></p><pre class="lang:default decode:true ">select max(a_money),min(a_money),avg(a_money),sum(a_money) from a_table</pre><p>&nbsp;</p><p>查询年龄大于20的人数。(<span style="color: #ff0000;"> <span class="fontstyle0">COUNT(DISTINCT expr) </span><span class="fontstyle2">返回 </span><span class="fontstyle3">expr</span><span class="fontstyle2">非空且不重复的记录总数</span></span> )</p><pre class="lang:default decode:true ">select count(*) from a_table where a_age&gt;20</pre><p><a href="http://image.xiaoxinyes.club/2019-01-04_104441.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_104441.png" width="124" height="34"></a></p><p>&nbsp;</p><h3>2.分组查询</h3><pre class="lang:default decode:true " title="group by">select a_id,avg(a_money) from a_table group by a_id</pre><a href="http://image.xiaoxinyes.club/2019-01-04_105327.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_105327.png" width="197" height="77"></a><p>&nbsp;</p><h3>3.过滤分组</h3><span class="fontstyle0" style="color: #ff0000;">having</span><pre class="lang:default decode:true " title="having">select a_id,max(a_money) from a_table group by a_id       having max(a_money) &gt;= 3500</pre><a href="http://image.xiaoxinyes.club/2019-01-04_105718.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_105718.png" width="202" height="66"></a><hr><p>&nbsp;</p><h2>视图</h2><h3>1.创建视图</h3><pre class="lang:default decode:true">create view a_viewas(   select a.a_id,a.a_name,a.a_age,a.a_money from a_table a)</pre>&nbsp;<h3>2.查询视图</h3><pre class="lang:default decode:true ">select * from a_view</pre><a href="http://image.xiaoxinyes.club/2019-01-04_110303.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2019-01-04_110303.png" width="293" height="76"></a><p>&nbsp;</p><h3>3.删除视图</h3><pre class="lang:default decode:true ">drop view a_view</pre>&nbsp;]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Oracle]基本操作-1</title>
      <link href="/2019/10/09/Oracle-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-1/"/>
      <url>/2019/10/09/Oracle-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-1/</url>
      
        <content type="html"><![CDATA[<p>此篇文章包含sql语句增删改查，表结构的更改等，其他操作将在下篇数据库的文章列出。<a id="more"></a></p><h2>管理表</h2><h3>1.创建表</h3><h4>命名规则</h4><p style="padding-left: 30px;"><span style="color: #ff0000;">表名和列名:</span><span style="color: #ff0000;">• 必须以字母开头</span><span style="color: #ff0000;">• 必须在 1–30 个字符之间</span><span style="color: #ff0000;">• 必须只能包含 A–Z, a–z, 0–9, _, $, 和 #</span><span style="color: #ff0000;">• 必须不能和用户定义的其他对象重名</span><span style="color: #ff0000;">• 必须 不能是Oracle 的保留字</span></p><pre class="lang:default decode:true" title="a_table">create table a_table(       a_id int not null primary key,       a_name varchar2(20),       a_age int,       a_money varchar2(30))</pre><p>&nbsp;</p><h3>2.添加新列add</h3><pre class="lang:default decode:true ">alter table a_table add(sex varchar2(2))</pre>&nbsp;<h3>3.修改列modify</h3><pre class="lang:default decode:true ">alter table a_table  modify(a_money number)</pre>&nbsp;<h3>4.删除列drop column</h3><pre class="lang:default decode:true">alter table a_table drop column sex</pre>&nbsp;<h3>5.删除表</h3><pre class="lang:default decode:true ">drop table a_table</pre>&nbsp;<h3>6.清空表</h3><p style="padding-left: 30px;"><span style="color: #ff0000;">• TRUNCATE TABLE </span><span style="color: #ff0000;">– 删除表中所有的数据</span><span style="color: #ff0000;">– 释放表的存储空间</span><span style="color: #ff0000;">• TRUNCATE语句不能回滚</span><span style="color: #ff0000;">• 可以使用 DELETE 语句删除数据</span></p><pre class="lang:default decode:true ">truncate  table a_table</pre><hr><p>&nbsp;</p><h2>关于约束</h2><p style="padding-left: 30px;"><span style="color: #ff0000;">– NOT NULL，不为空</span><span style="color: #ff0000;">– UNIQUE，唯一不可重复</span><span style="color: #ff0000;">– PRIMARY KEY，主键</span><span style="color: #ff0000;">– FOREIGN KEY，外键</span><span style="color: #ff0000;">– CHECK，添加条件</span></p><p style="padding-left: 30px;"><span class="fontstyle0">创建约束</span><span class="fontstyle1"></span><span class="fontstyle2">– </span><span class="fontstyle0">建表的同时</span><span class="fontstyle2">– </span><span class="fontstyle0">建表之后</span><span class="fontstyle0">表级或列级定义约束</span></p><h3>1.not null</h3><pre class="lang:default decode:true ">a_id int not null</pre>&nbsp;<h3>2.UNIQUE</h3><pre class="lang:default decode:true ">a_name varchar2(20) unique</pre>或者<pre class="lang:default decode:true ">create table a_table(       a_id int not null primary key,       a_name varchar2(20),       a_age int,       a_money varchar2(30),       constraint a_name_uk unique(a_name))</pre>&nbsp;<h3>3.PRIMARY KEY</h3><pre class="lang:default decode:true">a_id int primary key</pre>或者<pre class="lang:default decode:true ">create table a_table(       a_id int not null,       a_name varchar2(20),       a_age int,       a_money varchar2(30),       constraint a_name_uk unique(a_name),       constraint a_id_pk_ primary key(a_id))</pre>&nbsp;<h3>4.FOREIGN KEY</h3>外键来自另一张表进行关联。插入数据时，需要先插入不是外键表的那张表。删除表时，需要先删除外键表。<pre class="lang:default decode:true">create table a_table(       a_id int not null,       a_name varchar2(20),       a_age int,       a_money number,       constraint a_name_uk unique(a_name),       constraint a_id_pk_ primary key(a_id))create table b_table(       b_id int not null,       b_name varchar2(20),       a_id int,       constraint b_id_fk foreign key(a_id) references a_table(a_id))</pre>&nbsp;<h3>5.CHECK</h3><pre class="lang:default decode:true ">create table a_table(       a_id int not null,       a_name varchar2(20),       a_age int,       a_money number(2),       constraint a_money_min check (a_money&gt;0))</pre>&nbsp;<h3>6.添加约束</h3><pre class="lang:default decode:true ">alter table a_table add constraint a_name_uk unique(a_name)</pre><pre class="lang:default decode:true ">alter table a_table add constraint a_id_fk primary key(a_id)</pre><pre class="lang:default decode:true ">alter table b_table add constraint b_id_fk foreign key(a_id) references a_table(a_id)</pre>&nbsp;<h3>7.删除约束</h3><pre class="lang:default decode:true ">alter table a_table drop constraint a_name_uk</pre><hr><h2></h2><h2>数据的增删改查</h2><p style="padding-left: 30px;"><span style="color: #ff0000;">insert</span><span style="color: #ff0000;">delete</span><span style="color: #ff0000;">update</span><span style="color: #ff0000;">select</span></p><h3>1.插入数据</h3><pre class="lang:default decode:true ">insert into a_table values(1,'xiaoxin',22,3)</pre>&nbsp;<h3>2.删除数据</h3>如果省略where，将删除表中所有数据<pre class="lang:default decode:true ">delete from a_table where a_name='xiaoxin'</pre><pre class="lang:default decode:true ">delete from a_table</pre>&nbsp;<h3>3.更新数据</h3>如果省略where，将更新表中所有数据<pre class="lang:default decode:true ">update  a_table set a_name='zhaoliu' where a_id=2</pre><pre class="lang:default decode:true ">update  a_table set a_name='zhaoliu'</pre>&nbsp;<h3>4.查询数据</h3>查询所有数据<pre class="lang:default decode:true ">select * from a_table</pre>查询指定的数据<pre class="lang:default decode:true ">select a_name from a_table</pre>&nbsp;<p>&nbsp;</p><p><span style="color: #808080;">由于查询单独涉及的内容比较多，下次会将逻辑运算，常用的函数和查询以及视图总结下。</span></p>]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]方法与接口-7</title>
      <link href="/2019/10/09/GO-%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8E%A5%E5%8F%A3-7/"/>
      <url>/2019/10/09/GO-%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8E%A5%E5%8F%A3-7/</url>
      
        <content type="html"><![CDATA[<p>方法能给用户定义的类型添加新的行为，方法实际以包含了接收者的函数。但是函数在go中不等同于方法。<a id="more"></a></p><h2>方法</h2>我们可以看到自定义了一个user类型，然后将这个类型作为接收者给了一个名为notify的函数。通过对user类型的初始化再调用该方法。<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>//定义一个用户类型<br>type user struct {<br>    name string<br>    age  int<br>}</p><p>//使用值接收者实现一个方法<br>func (u user) notify() {<br>    fmt.Printf(“方法执行–&gt;%s-%d\n”, u.name, u.age)<br>}</p><p>func main() {<br>    user := user{<br>        name: “xiaoxin”,<br>        age:  20,<br>    }<br>    user.notify()</p><h2 id><a href="#" class="headerlink" title="}"></a>}</h2><p>方法执行–&gt;xiaoxin-20</p></pre><br>&nbsp;<p></p><p>上面这个例子是值接收，如果使用值接收者声明方法，调用时会使这个值的一个副本来执行，那么当前值修改不会影响原来的值。接下来看下值接收和指针类型的接收有何区别。</p><pre class="lang:default decode:true">package mainimport (    "fmt")//定义一个用户类型type user struct {    name string    age  int}//使用值接收者实现一个方法func (u user) notify() {    fmt.Printf("notify方法执行--&gt;%s-%d\n", u.name, u.age)}//使用值接收者实现一个方法func (u user) newnotify(name string) {    u.name = name}//使用指针接收者实现一个方法func (u *user) newnotify2(name string) {    u.name = name}func main() {    user := user{"wangwu", 20}    user.notify()    user.newnotify("zhaoliu")    user.notify()    user.newnotify2("zhaoliu")    user.notify()}------------方法执行--&gt;wangwu-20方法执行--&gt;wangwu-20方法执行--&gt;zhaoliu-20</pre><p>&nbsp;</p><p>我们能发现，使用指针接收者的方法时，这个方法会共享调用方法接收时接收者所指向的值。从而改变。</p><p>值接收者使用的值的副本来调用方法，而指针接收者使用实际的值来调用方法。</p><hr><p>&nbsp;</p><h2>接口</h2>接口定义着对象所具有的行为。<h4>创建与实现接口</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>//定义了一个接口<br>type notifier interface {<br>    notify()<br>}</p><p>//定义一个用户类型<br>type user struct {<br>    name string<br>    age  int<br>}</p><p>func (u user) notify() {<br>    fmt.Printf(“notify()执行了–&gt;%s-%d\n”, u.name, u.age)<br>}</p><p>func main() {<br>    user := user{“lisi”, 20}<br>    var n notifier<br>    n = user<br>    n.notify()<br>}</p><hr><p>notify()执行了–&gt;lisi-20</p></pre><br>&nbsp;<p></p><p>如果时使用<span style="color: #ff0000;">指针接收者</span>来实现一个接口，那么只有指向那个类型的指针才能实现相对应的接口。如果是使用的<span style="color: #ff0000;">值接收者</span>来实现接口的话，那么那个类型的值和指针都能够实现相对应的接口。接下来对上面的例子稍微改变即可看到指针作为接收者的不同。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")//定义了一个接口type notifier interface {    notify()}//定义一个用户类型type user struct {    name string    age  int}//使用指针接收者实现方法func (u *user) notify() {    fmt.Printf("notify()执行了--&gt;%s-%d\n", u.name, u.age)}func main() {    user := user{"lisi", 20}    var n notifier    //需要传递user的地址，否者报错    n = &amp;user    n.notify()}-----------notify()执行了--&gt;lisi-20</pre><hr><p>&nbsp;</p><h2>多态</h2>我们看下接口的多态案例，新增一个admin类型。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>//定义了一个接口<br>type notifier interface {<br>    notify()<br>}</p><p>//user<br>type user struct {<br>    name string<br>    age  int<br>}</p><p>//admin<br>type admin struct {<br>    name string<br>    age  int<br>}</p><p>//使用指针接收者实现方法,接收者为user<br>func (u *user) notify() {<br>    fmt.Printf(“user–&gt;%s-%d\n”, u.name, u.age)<br>}</p><p>//使用指针接收者实现方法,接受为为admin<br>func (a *admin) notify() {<br>    fmt.Printf(“admin–&gt;%s-%d\n”, a.name, a.age)<br>}</p><p>//接收实现notifier接口的值，通知<br>func show(n notifier) {<br>    n.notify()<br>}<br>func main() {<br>    user := user{“user”, 20}<br>    show(&amp;user)</p><pre><code>admin := admin{&quot;admin&quot;, 22}show(&amp;amp;admin)</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title="}"></a>}</h2><p>user–&gt;user-20<br>admin–&gt;admin-22</p></pre><br>可以看到，user、admin两个实体类型都可以实现notify接口。<p></p><p>&nbsp;</p><h2>类型的嵌入</h2>嵌入是将已经有的类型直接声明到新的结构体类型当中，被嵌入的类型被称为新的外部类型的内部类型。对外部类型来说，内部类型总是存在的，所以没有指定内部类型对应的字段名，我们还可以直接使用内部类型的类型名来访问。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>//user<br>type user struct {<br>    name string<br>    age  int<br>}</p><p>//admin<br>type admin struct {<br>    user    //嵌入类型<br>    email string<br>}</p><p>//使用指针接收者实现方法<br>func (u *user) notify() {<br>    fmt.Printf(“user–&gt;%s-%d\n”, u.name, u.age)<br>}</p><p>func main() {<br>    //创建admin用户<br>    admin := admin{<br>        user: user{<br>            name: “xiaoxin”,<br>            age:  20,<br>        },<br>        email: “<a href="mailto:123456@qq.com" target="_blank" rel="noopener">123456@qq.com</a>“,<br>    }<br>    //两种访问访问都可以<br>    admin.user.notify()</p><pre><code>admin.notify()</code></pre><h2 id="-2"><a href="#-2" class="headerlink" title="}"></a>}</h2><p>user–&gt;xiaoxin-20<br>user–&gt;xiaoxin-20</p></pre><br>&nbsp;<p></p><h4>看看接口是否如此</h4>我们能看到下方案例，admin类型并没有实现该接口，通过user也是可以访问的。那么由于内部类型的提升，内部类型的接口会自动提升到外部类型。意味着由于内部类型的实现，外部类型同样可以实现该接口。<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>type notifier interface {<br>    notify()<br>}</p><p>//user<br>type user struct {<br>    name string<br>    age  int<br>}</p><p>//admin<br>type admin struct {<br>    user<br>    email string<br>}</p><p>//使用指针接收者实现方法 user<br>func (u *user) notify() {<br>    fmt.Printf(“user–&gt;%s-%d\n”, u.name, u.age)<br>}</p><p>func main() {<br>    admin := admin{<br>        user: user{<br>            name: “xiaoxin”,<br>            age:  20,<br>        },<br>        email: “<a href="mailto:123456@qq.com" target="_blank" rel="noopener">123456@qq.com</a>“,<br>    }<br>    show(&amp;admin)<br>}<br>func show(n notifier) {<br>    n.notify()<br>}</p><hr><p>user–&gt;xiaoxin-20</p></pre><br>&nbsp;<p></p><p>但是如果外部类型实现了notify方法，内部类型的实现将不会被提升。但是内部类型的值还一直存在，仍然可以直接访问方法。</p><hr><p>&nbsp;</p><h2>标识符</h2><strong>当一个标识符的名称是以小写字母开头时，那么这个标识符是未公开的，包外不可访问；</strong><p><strong>当一个标识符的名称是以大写字母开头时，那么这个标识符就是公开的，包外可以访问。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]结构体分析-6</title>
      <link href="/2019/10/09/GO-%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90-6/"/>
      <url>/2019/10/09/GO-%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90-6/</url>
      
        <content type="html"><![CDATA[<p>结构体有点类似与java中的类，是用户定义的类型。<a id="more"></a></p><p>当用户声明一个新的类型时，这个声明就给编译器提供了一个框架，告知必要的内存大小和表示的信息。</p><p>&nbsp;</p><h2 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h2><h4 id="1-使用关键字struct"><a href="#1-使用关键字struct" class="headerlink" title="1.使用关键字struct"></a>1.使用关键字struct</h4><p>使用关键字type，后面时类型的名称，然后时struct。这个结构体中有3个字段。</p><pre class="lang:default decode:true">type user struct {    name  string    age   int    email string}</pre><hr><p>&nbsp;</p><h4 id="2-结构类型声明变量，初始化为零值"><a href="#2-结构类型声明变量，初始化为零值" class="headerlink" title="2.结构类型声明变量，初始化为零值"></a>2.结构类型声明变量，初始化为零值</h4><p>当声明的user类型给变量的值时，这个值要么用指定的值初始化，要么是变量类型的默认值(数值类型为0，字符串为空，布尔为false)。(:=)含义为声明一个变量，并且初始化。</p><pre class="lang:default decode:true">package mainimport (    "fmt")type user struct {    name  string    age   int    email string}func main() {    u := user{}    fmt.Println(u)}------------{ 0 }</pre><hr><p>&nbsp;</p><h4 id="3-字面量初始化"><a href="#3-字面量初始化" class="headerlink" title="3.字面量初始化"></a>3.字面量初始化</h4><p>可以指定字段并且初始化值得方式，这种形式对声明的顺序是没有要求的。注意逗号！</p><pre class="lang:default decode:true ">package mainimport (    "fmt")type user struct {    name  string    age   int    email string}func main() {    u := user{        name:  "xiaoxin",        email: "xiaoxin1218@qq.com",        age:   19,    }    fmt.Println(u)}--------------{xiaoxin 19 xiaoxin1218@qq.com}</pre><p>&nbsp;</p><p>这里我们还可以采用第二种形式，无需字段名，只声明对应的值。但是这种形式顺序必须要和结构体中字段的顺序一致才行。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")type user struct {    name  string    age   int    email string}func main() {    u := user{"aaa", 19, "123456@163.com"}    fmt.Println(u)}----------{aaa 19 123456@163.com}</pre><p>&nbsp;</p><p>不在同一行也是可行的。</p><pre class="lang:default decode:true ">func main() {    u := user{        "aaa",        11,        "123456@163.com",    }</pre><hr><p>&nbsp;</p><h4 id="4-赋值取值"><a href="#4-赋值取值" class="headerlink" title="4.赋值取值"></a>4.赋值取值</h4><p>可以使用这种方式取值。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")type user struct {    name  string    age   int    email string}func main() {    u := user{        name: "xiaoxin",    }    u.age = 20    u.email = "88888@qq.com"    fmt.Println(u)    fmt.Println(u.name)}----------{xiaoxin 20 88888@qq.com}xiaoxin</pre><hr><p>&nbsp;</p><h4 id="5-内嵌结构体"><a href="#5-内嵌结构体" class="headerlink" title="5.内嵌结构体"></a>5.内嵌结构体</h4><p>把一个结构体放入另一个结构体当作字段来用。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")type user struct {    name  string    age   int    email string}type admin struct {    person     user    profession string}func main() {    u := admin{        person: user{            name:  "wangwu",            age:   20,            email: "9999@qq.com",        },        profession: "java",    }    fmt.Println(u)    fmt.Println(u.person.name)}-------------&nbsp;同时也可以匿名写成下面这种<pre class="lang:default decode:true ">package mainimport (    "fmt")type admin struct {    person struct {        name string        age  int    }    profession string}func main() {    u := admin{        profession: "c",    }    u.person.name = "lisi"    u.person.age = 20    fmt.Println(u)}</pre><p>&nbsp;</p></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]何为映射-5</title>
      <link href="/2019/10/08/GO-%E4%BD%95%E4%B8%BA%E6%98%A0%E5%B0%84-5/"/>
      <url>/2019/10/08/GO-%E4%BD%95%E4%B8%BA%E6%98%A0%E5%B0%84-5/</url>
      
        <content type="html"><![CDATA[<p>映射是一种数据结构，用来存储无序的键值对，键值对那么最方便的便是检索数据。<a id="more"></a></p><h2>映射的创建</h2><h4>1.通过make函数</h4>创建一个映射，键和值的类型都是int。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := make(map[int]int)<br>    fmt.Println(dict, len((dict)))</p><h2 id><a href="#" class="headerlink" title="}"></a>}</h2><p>map[] 0</p></pre><br>&nbsp;<p></p><h4>2.通过映射字面量创建</h4>通过这种方式，映射的初始长度会根据你初始的指定的键值对的数量确定。另外注意逗号！<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[string]int{<br>        “apple”:  5,<br>        “banana”: 2,<br>        “peach”:  8, //注意这里的逗号，不然会报错<br>    }<br>    fmt.Println(dict, len((dict)))</p><pre><code>dict2 := map[int]int{1: 2, 2: 3}fmt.Println(dict2, len((dict2)))</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title="}"></a>}</h2><p>map[apple:5 banana:2 peach:8] 3<br>map[2:3 1:2] 2</p></pre><br>&nbsp;<p></p><h4>3.键值的类型</h4>映射的键可以是任何值。可以用==运算符作比较的。但是切片，函数等不能作为key，如下。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[[]string]int{}</p><pre><code>fmt.Println(dict, len((dict)))</code></pre><h2 id="-2"><a href="#-2" class="headerlink" title="}"></a>}</h2><p>invalid map key type []string</p></pre><br>&nbsp;<p></p><p>但是能作为值value。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")func main() {    dict := map[string][]int{}    fmt.Println(dict, len((dict)))}</pre><hr><p>&nbsp;</p><h2>映射的使用</h2><h4>1.赋值</h4>通过指定映射的键来对值进行修改。这里我们能看到，如果没有的话会自动添加，已经存在的key会进行修改。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[string]int{<br>        “apple”:  5,<br>        “banana”: 2,<br>        “peach”:  8,<br>    }<br>    dict[“apple”] = 9</p><pre><code>//如果没有会自动添加dict[&quot;app&quot;] = 10fmt.Println(dict, len((dict)))</code></pre><h2 id="-3"><a href="#-3" class="headerlink" title="}"></a>}</h2><p>map[apple:9 banana:2 peach:8 app:10] 4</p></pre><br>&nbsp;<p></p><h4>2.判断是否存在当前键</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[string]int{<br>        “apple”:  5,<br>        “banana”: 2,<br>        “peach”:  8,<br>    }</p><pre><code>value, exists := dict[&quot;apple&quot;]if exists {    fmt.Println(value)} else {    fmt.Println(&quot;不存在&quot;)}</code></pre><h2 id="-4"><a href="#-4" class="headerlink" title="}"></a>}</h2><p>5</p></pre><br>&nbsp;<p></p><h4>3.遍历映射</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[string]int{<br>        “apple”:  5,<br>        “banana”: 2,<br>        “peach”:  8,<br>    }<br>    for key, value := range dict {<br>        fmt.Printf(“key:%s,value:%d\n”, key, value)<br>    }</p><h2 id="-5"><a href="#-5" class="headerlink" title="}"></a>}</h2><p>key:apple,value:5<br>key:banana,value:2<br>key:peach,value:8</p></pre><br>&nbsp;<p></p><h4>4.映射的删除</h4>如果要把一个键值对从映射中删去，那么使用内置函数delete。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    dict := map[string]int{<br>        “apple”:  5,<br>        “banana”: 2,<br>        “peach”:  8,<br>    }<br>    fmt.Println(dict, len(dict))<br>    delete(dict, “banana”)</p><pre><code>fmt.Println(dict, len(dict))</code></pre><h2 id="-6"><a href="#-6" class="headerlink" title="}"></a>}</h2><p>map[apple:5 banana:2 peach:8] 3<br>map[apple:5 peach:8] 2</p></pre><br>&nbsp;<p></p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]切片的使用-4</title>
      <link href="/2019/10/08/GO-%E5%88%87%E7%89%87%E7%9A%84%E4%BD%BF%E7%94%A8-4/"/>
      <url>/2019/10/08/GO-%E5%88%87%E7%89%87%E7%9A%84%E4%BD%BF%E7%94%A8-4/</url>
      
        <content type="html"><![CDATA[<p>切片可以理解为动态的数组，可以按需求自动增长或者是缩小，无疑比数组更加灵活多变，首先看下图。<a id="more"></a></p><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2018-12-19_110758.png" alt="爱生活爱技术" width="697" height="329"><p>上图中，有3个字段，分别是指向底层数组的指针、切片访问的元素的长度和切片允许增长的元素个数(即容量)。如果当后面的表示0的格子满了，底层的数组就会更换。</p><p>&nbsp;</p><h2>切片的创建</h2><h4>1.使用内置的make函数创建</h4>使用make时，需要指定切片的类型、长度与容量大小。<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    //长度和容量都为5<br>    s1 := make([]int, 5)<br>    fmt.Println(s1)<br>    //长度为3，容量为5<br>    s2 := make([]int, 3, 5)<br>    fmt.Println(s2)</p><h2 id><a href="#" class="headerlink" title="}"></a>}</h2><p>[0 0 0 0 0]<br>[0 0 0]</p></pre><br>&nbsp;<p></p><h3>2.容量小于长度将会报错。</h3><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    //长度和容量都为5<br>    s1 := make([]int, 5, 3)<br>    fmt.Println(s1)<br>    //长度为3，容量为5</p><h2 id="-1"><a href="#-1" class="headerlink" title="}"></a>}</h2><p> len larger than cap in make([]int)</p></pre><br>&nbsp;<p></p><h3>3.通过初始化赋值的方式创建切片</h3>这种方式创建，初始的长度与容量会根据初始化提供的元素个数确定，即时满容的。内置函数 len() 和 cap() 可以直接获得切片的长度和容量属性。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    s1 := []string{“haha”, “hehe”, “oo”}<br>    fmt.Println(s1, len(s1), cap(s1))<br>}</p><hr><p>[haha hehe oo] 3 3</p></pre><br>&nbsp;<p></p><h4>4.使用索引声明切片</h4>01，02字符串分别初始化第4和3个元素。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    s1 := []string{4: “01”, 3: “02”}<br>    fmt.Println(s1, len(s1), cap(s1))<br>}</p><hr><p>[   02 01] 5 5</p></pre><p></p><hr><p>&nbsp;</p><h2>nil与空切片</h2>在声明时不做任何的初始化，即创建一个nil切片。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    //    nil切片<br>    var s1 []int<br>    fmt.Println(s1, len(s1), cap(s1))<br>    //空切片<br>    var s2 []int = make([]int, 0)<br>    fmt.Println(s2, len(s2), cap(s2))<br>    //空切片<br>    s3 := []int{}<br>    fmt.Println(s3, len(s3), cap(s3))<br>}</p><hr><p>[] 0 0<br>[] 0 0<br>[] 0 0</p></pre><p></p><hr><p>&nbsp;</p><h2>切片的使用</h2><h4>1.赋值</h4>如同对数组的索引指向的元素赋值一样。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{1, 2, 3, 4, 5}s1[2] = 11s1[3] = 99fmt.Println(s1, len(s1), cap(s1))</code></pre><h2 id="-2"><a href="#-2" class="headerlink" title="}"></a>}</h2><p>[1 2 11 99 5] 5 5</p></pre><br>&nbsp;<p></p><h4>2.使用切片来创建切片</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{1, 2, 3, 4, 5}s2 := s1[1:3]fmt.Println(s1, len(s1), cap(s1))fmt.Println(s2, len(s2), cap(s2))</code></pre><h2 id="-3"><a href="#-3" class="headerlink" title="}"></a>}</h2><p>[1 2 3 4 5] 5 5<br>[2 3] 2 4</p></pre><br>&nbsp;<p></p><p>当我们有了两个切片，实际上它们共享了同一段底层数组，如图。对于s1我们能知道它的全部容量，但是之后s2就是中间到切片末尾的长度。</p><p><a href="http://image.xiaoxinyes.club/2018-12-19_115237.png" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2018-12-19_115237.png" alt="爱生活爱技术" width="738" height="416"></a></p><p>起始值和结束值都是可选的。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")func main() {    s1 := []int{1, 2, 3, 4, 5}    s2 := s1[1:]    s3 := s1[:3]    s4 := s1[:]    fmt.Println(s1, len(s1), cap(s1))    fmt.Println(s2, len(s2), cap(s2))    fmt.Println(s3, len(s3), cap(s3))    fmt.Println(s4, len(s4), cap(s4))}----------[1 2 3 4 5] 5 5[2 3 4 5] 4 4[1 2 3] 3 5[1 2 3 4 5] 5 5</pre><p>&nbsp;</p><h4>3.长度和容量的计算</h4>对于底层数组容量是k的切片s1[i:j]来说<p style="padding-left: 30px;">长度：j-i</p><p style="padding-left: 30px;">容量：k-i</p>举例：容量是5的切片s1[1:3]<p style="padding-left: 30px;">长度：3-1=2</p><p style="padding-left: 30px;">容量：5-1=4</p><hr><p>&nbsp;</p><h2>切片增长</h2><h4>1.append向切片增加元素</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{1, 2, 3, 4, 5}//长度为2，容量为4s2 := s1[1:3]s2 = append(s2, 7)fmt.Println(s2, len(s2), cap(s2))</code></pre><p>}<br>//[2 3 7] 3 4</p></pre><br>&nbsp;<p></p><h4>2.切片追加</h4>前面说了切片是动态的，可以进行增长。若底层数组扩容了，append操作完成后，会拥有一个全新的底层数组。<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{1, 2, 3, 4, 5}fmt.Println(s1, len(s1), cap(s1))s2 := append(s1, 6)fmt.Println(s2, len(s2), cap(s2))s3 := append(s2, 8)fmt.Println(s3, len(s3), cap(s3))</code></pre><h2 id="-4"><a href="#-4" class="headerlink" title="}"></a>}</h2><p>[1 2 3 4 5] 5 5<br>[1 2 3 4 5 6] 6 10<br>[1 2 3 4 5 6 8] 7 10</p></pre><br>&nbsp;<p></p><p>在切片的容量小于1000个元素时，总会成倍的增加容量。一旦超过1000，容量每次增长25%。</p><p>&nbsp;</p><h4>3.使用3个索引创建切片</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{1, 2, 3, 4, 5}s2 := s1[2:3:4]fmt.Println(s1, len(s1), cap(s1))fmt.Println(s2, len(s2), cap(s2))</code></pre><h2 id="-5"><a href="#-5" class="headerlink" title="}"></a>}</h2><p>[1 2 3 4 5] 5 5<br>[3] 1 2</p></pre><br>&nbsp;<p></p><p>我们可以用之前定义的公式，对于s1[2:3:4]就是s1[i:j:k]</p><p style="padding-left: 30px;">长度：j-i=3-2-1</p><p style="padding-left: 30px;">容量：k-i=4-2=2</p><hr><p>&nbsp;</p><h2>切片的遍历</h2><h4>1.for的形式</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{10, 20, 30, 40, 50}for i := 0; i &amp;lt; len(s1); i++ {    fmt.Println(i, s1[i])}</code></pre><h2 id="-6"><a href="#-6" class="headerlink" title="}"></a>}</h2><p>0 10<br>1 20<br>2 30<br>3 40<br>4 50</p></pre><br>&nbsp;<p></p><h4>2.range形式</h4><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {</p><pre><code>s1 := []int{10, 20, 30, 40, 50}for i, v := range s1 {    fmt.Println(i, v)}</code></pre><h2 id="-7"><a href="#-7" class="headerlink" title="}"></a>}</h2><p>0 10<br>1 20<br>2 30<br>3 40<br>4 50</p></pre><br>&nbsp;<p></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]数组的使用-3</title>
      <link href="/2019/10/08/GO-%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8-3/"/>
      <url>/2019/10/08/GO-%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8-3/</url>
      
        <content type="html"><![CDATA[<p>数组是一个长度确定的数据类型，可以理解为一排排格子放置着物品，可以是不同类型的物品。本节讲解数组的基本使用<a id="more"></a>（因为数组长度不可变的关系，Golang中提供了“动态数组”–切片。使用更广，将在以后说明）</p><p>&nbsp;</p><h2>数组的定义与初始化</h2>一但声明，该数组的类型与长度不能改变了，当没手动赋初值的时候，会自动将每个元素的值初始化为0。结果在注释中!<pre class="lang:default decode:true">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    var arr [5]int<br>    fmt.Println(arr)</p><p>//{0 0 0 0 0}<br>}<br></p></pre><br>&nbsp;<p></p><p>下面是几种不同的定义形式</p><pre class="lang:default decode:true ">package mainimport (    "fmt")func main() {    var arr = [5]int{1, 2, 3, 4, 5}    var arr2 [5]int = [5]int{1, 2, 3, 4, 5}    arr3 := [5]int{1, 2, 3, 4, 5}    arr4 := [...]int{1, 2, 3, 4, 5}    fmt.Println("arr: ", arr)    fmt.Println("arr2: ", arr2)    fmt.Println("arr3: ", arr3)    fmt.Println("arr4: ", arr4)/*arr:  [1 2 3 4 5]arr2:  [1 2 3 4 5]arr3:  [1 2 3 4 5]arr4:  [1 2 3 4 5]*/}</pre><hr><p>&nbsp;</p><h2>声明数组时同时指定特定的元素</h2>数组下标都是从0开始的。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    arr := [5]int{1: 22, 4: 99}<br>    fmt.Println(arr)</p><p>//[0 22 0 0 99]<br>}<br></p></pre><p></p><hr><p>&nbsp;</p><h2>数组的赋值</h2>按照对应的下标，即可修改数组元素的值。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    arr := [5]int{1, 2, 3, 4, 5}<br>    arr[0] = 66<br>    arr[3] = 99<br>    fmt.Println(arr)</p><p>//[66 2 3 99 5]<br>}<br></p></pre><br>&nbsp;<p></p><p>同时可以将同类型同长度的数组赋值给另一个数组</p><p>我们这里能看出来，对arr的修改并不影响arr2，golang中传递方式为值传递，相当于copy了一份。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")func main() {    arr := [5]string{"hehe", "haha", "xixi", "huhu", "pupu"}    var arr2 [5]string    arr2 = arr    arr[0] = "pipi"    fmt.Println(arr)    fmt.Println(arr2)/*[pipi haha xixi huhu pupu][hehe haha xixi huhu pupu]*/}</pre><hr><p>&nbsp;</p><h2>数组的遍历</h2>我们平时通过下标遍历的方式。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    arr := [5]string{“hehe”, “haha”, “xixi”, “huhu”, “pupu”}</p><pre><code>for i := 0; i &amp;lt; len(arr); i++ {    fmt.Println(arr[i])}</code></pre><p>/*<br>hehe<br>haha<br>xixi<br>huhu<br>pupu<br>*/<br>}</p></pre><br>&nbsp;<p></p><p>这里还可以使用range关键字来遍历，这种方式可以将下标与对应的值全取出来，下面是取值的几种用法。</p><pre class="lang:default decode:true ">package mainimport (    "fmt")func main() {    arr := [...]string{"hehe", "haha", "xixi"}    //取下标    for a := range arr {        fmt.Print(a)    }    fmt.Println()    //取下标和值    fmt.Println()    for a := range arr {        fmt.Println(a, arr[a])    }    //取下标和值    fmt.Println()    for a, v := range arr {        fmt.Println(a, v)    }    //取值    fmt.Println()    for _, v := range arr {        fmt.Println(v)    }/*0120 hehe1 haha2 xixi0 hehe1 haha2 xixihehehahaxixi*/}</pre><p>&nbsp;</p><hr><h2>多维数组</h2>多维的定义与初始化。他们之间许多能理解为父子的对应关系。<pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    var arr [3][2]int<br>    fmt.Println(arr)</p><pre><code>arr2 := [2][2]int{{3, 4}, {6, 9}}fmt.Println(arr2)arr3 := [3][2]int{1: {3, 6}, 2: {9, 11}}fmt.Println(arr3)arr4 := [3][2]int{1: {0: 33}, 2: {1: 55}}fmt.Println(arr4)</code></pre><p>/*<br>[[0 0] [0 0] [0 0]]<br>[[3 4] [6 9]]<br>[[0 0] [3 6] [9 11]]<br>[[0 0] [33 0] [0 55]]<br>*/<br>}<br></p></pre><br>&nbsp;<p></p><h2>二维数组的赋值</h2><pre class="lang:default decode:true ">package main<p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    var arr [2][3]int</p><pre><code>arr[0][0] = 1arr[0][1] = 3arr[1][1] = 9fmt.Println(arr)</code></pre><p>/*<br>[[1 3 0] [0 9 0]]<br>*/<br>}<br></p></pre><br>&nbsp;<p></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]条件与循环语句-2</title>
      <link href="/2019/10/08/GO-%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5-2/"/>
      <url>/2019/10/08/GO-%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5-2/</url>
      
        <content type="html"><![CDATA[<p>go的条件语句和循环语句，是不需要括号括起来的。<a id="more"></a></p><h3>if</h3><pre class="lang:go decode:true ">func main(){    num := 0    if num &gt; 10{        fmt.Println(10)    }else {        fmt.Println(0)    }}</pre>&nbsp;<h3>同样的运算，我们也可以写下面的形式</h3><strong>先执行赋值num=5,在进行判断。这种方式，num的作用域只存在if语句中。</strong><pre class="lang:go decode:true">func main() {    if num := 5;num &gt; 10{        fmt.Println(10)    }else{        fmt.Println(0)    }}</pre><hr><p>&nbsp;</p><p>&nbsp;</p><h3>switch</h3><pre class="lang:go decode:true">func main() {    var result int    var symbol = "*"    a,b := 10,5    switch symbol {    case "+":        result = a + b    case "-":        result = a - b    case "*":        result = a * b    case "/":        result = a / b    default:        panic("有误..."+symbol)    }    fmt.Println(result)}</pre>&nbsp;<p>我们可以看到，不需要break，是因为会自动break。</p><p><strong>switch后面也可以不加表达式。</strong></p><pre class="lang:go decode:true ">func main() {    var result= 80    var level = ""    switch {    case result &lt; 60:        level = "D"    case result &lt; 80:        level = "C"    case result &lt; 90:        level = "B"    case result &lt;= 100:        level = "A"    case result &lt; 0 || result &gt; 100:        panic(fmt.Sprint("错误！"))    }    fmt.Printf("%s\n",level)}</pre><hr><p>&nbsp;</p><p>&nbsp;</p><h3>for语句。</h3><strong>不需要括号，初始条件，结束条件，表达式都可以省略。</strong><p>1加到100</p><pre class="lang:go decode:true">func main() {    sum := 0    for i:=1;i&lt;=100;i++{        sum += i    }    fmt.Println(sum)}</pre><p>&nbsp;</p><h3>go语言中除去了while,直接一个for就完事,如下一个死循环</h3><pre class="lang:go decode:true">for{    fmt.println("aa")}</pre>&nbsp;]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GO]变量与常量定义-1</title>
      <link href="/2019/10/08/GO-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89-1/"/>
      <url>/2019/10/08/GO-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89-1/</url>
      
        <content type="html"><![CDATA[<p>使用的关键字：var,跟常规的编程语言不同，golang定义变量时变量名在前变量类型在后。<a id="more"></a>并且定义的变量必须使用。</p><h3>定义变量</h3><pre class="lang:go decode:true">var a intvar b string</pre><hr><p>&nbsp;</p><h3>定义变量并赋初值</h3><pre class="lang:go decode:true">var a int = 3var b string = "abc"</pre><hr><p>&nbsp;</p><h3>同时赋值多个</h3><pre class="lang:go decode:true">var a,b string = "hehe","haha"</pre><hr><p>&nbsp;</p><h3>直接省略定义的类型，编译器自己识别</h3><pre class="lang:go decode:true">var a = 6var c,d,e = true,"pupu",10</pre><hr><p>&nbsp;</p><h3>使用var集中变量</h3><pre class="lang:go decode:true">var(    bb = 3    cc=true)</pre><hr><p>&nbsp;</p><h3>使用 :=定义变量(只能在函数内部使用)</h3><pre class="lang:go decode:true ">a, b, c, d := 3, 4, true, "heihei"</pre><hr><p>&nbsp;</p><p>&nbsp;</p><h3>常量定义的关键字 const</h3><pre class="lang:default decode:true ">const a = "a.text"const b int = 5</pre><hr><p>&nbsp;</p><h3>枚举类型定义</h3><pre class="lang:default decode:true">const(    app = 0    java = 1    c = 2)</pre><h3>同样的go为这种提供了简化。iota表示自增</h3><pre class="lang:default decode:true ">const(    app = iota    java    c)</pre>&nbsp;]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]jq显示/隐藏/切换div</title>
      <link href="/2019/10/08/JS-jq%E6%98%BE%E7%A4%BA-%E9%9A%90%E8%97%8F-%E5%88%87%E6%8D%A2div/"/>
      <url>/2019/10/08/JS-jq%E6%98%BE%E7%A4%BA-%E9%9A%90%E8%97%8F-%E5%88%87%E6%8D%A2div/</url>
      
        <content type="html"><![CDATA[<p>Jquery是一个javascript的框架，操作起来十分方便。<a id="more"></a></p><p><strong>show：显示</strong><br><strong>hide：隐藏</strong><br><strong>toggle：切换</strong></p><p>&nbsp;</p><pre class="lang:js decode:true ">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src="jquery.min.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;script type="text/javascript"&gt;    $(function(){        $("#a1").click(function(){            $("#d").hide();        });        $("#a2").click(function(){            $("#d").show();        });        $("#a3").click(function(){            $("#d").toggle();        });    });&lt;/script&gt;&lt;body&gt;    &lt;input type="button" id="a1" value="隐藏"&gt;    &lt;input type="button" id="a2" value="显示"&gt;    &lt;input type="button" id="a3" value="切换"&gt;    &lt;div id="d"&gt;        我出来啦！！！    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果</p><p><a href="http://image.xiaoxinyes.club/2018-9-1.gif" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2018-9-1.gif" width="598" height="107"></a></p><hr><p>&nbsp;</p><p>也可以加上<strong>毫秒</strong>值，这些显示出来会有<strong>延迟</strong>效果。</p><pre class="lang:js decode:true ">&lt;script type="text/javascript"&gt;    $(function(){        $("#a1").click(function(){            $("#d").hide(1000);        });        $("#a2").click(function(){            $("#d").show(1000);        });        $("#a3").click(function(){            $("#d").toggle(1000);        });    });&lt;/script&gt;</pre><p>效果</p><p><a href="http://image.xiaoxinyes.club/2018-9-1-1.gif" target="_blank" rel="noopener"><img class="aligncenter size-medium" src="http://image.xiaoxinyes.club/2018-9-1-1.gif" width="598" height="107"></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[置顶]有些话想说</title>
      <link href="/2019/10/07/%E7%BD%AE%E9%A1%B6-%E6%9C%89%E4%BA%9B%E8%AF%9D%E6%83%B3%E8%AF%B4/"/>
      <url>/2019/10/07/%E7%BD%AE%E9%A1%B6-%E6%9C%89%E4%BA%9B%E8%AF%9D%E6%83%B3%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="内容以什么为主"><a href="#内容以什么为主" class="headerlink" title="内容以什么为主"></a>内容以什么为主</h2><blockquote><p>计算机相关/编程相关/个人相关。</p></blockquote><p>.</p><h2 id="为什么有这个博客站点"><a href="#为什么有这个博客站点" class="headerlink" title="为什么有这个博客站点"></a>为什么有这个博客站点</h2><blockquote><p>因为之前的服务器年底将要过期，并且不准备续费了。但我还是想弄个自己的空间，写自己想写的内容，记录发生的事情。</p></blockquote><p>·</p><h2 id="原先的博客怎么办"><a href="#原先的博客怎么办" class="headerlink" title="原先的博客怎么办"></a>原先的博客怎么办</h2><blockquote><p>还不确定，之前的xioaxin12.xyz在服务器停止之前，依旧可以使用，但是后续会慢慢把文章发布到该站点来。</p></blockquote><p>·</p><h2 id="原先文章迁移问题"><a href="#原先文章迁移问题" class="headerlink" title="原先文章迁移问题"></a>原先文章迁移问题</h2><blockquote><p>hexo提供了相关的wordpress迁移方法，但是我不准备使用。我准备把以前博客的数据库的文章(html)转markdown，再重新发布。原因有二点，其一是之前博客的文章比较杂，我也想过滤，其二了解下markdown的书写习惯。另外由于是手动重新发布，所以现在的博客文章发表时间我就不修改了，默认是当前时间。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[JS]History对象</title>
      <link href="/2019/10/07/JS-History%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/10/07/JS-History%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>History 对象用来记录用户曾浏览的历史记录，类似于浏览器中的后退前进功能。</p><pre class="lang:js decode:true">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;History &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script&gt;    function goBack()    {        history.back();    }    function goBack2()    {        history.go(-2);    }    function goForward()    {        history.forward();    }&lt;/script&gt;&lt;button onclick="goBack()"&gt;返回&lt;/button&gt;&lt;button onclick="goBack2()"&gt;返回上上次&lt;/button&gt;&lt;button onclick="goForward()"&gt;前进&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><p>history.back();返回上一次的访问历史；</p><p>history.go(-2);根据数字不同，返回次数不同，-1返回上次，-2上上次，以此类推。</p><p>history.forward();模拟浏览器前进按钮。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]语句结构</title>
      <link href="/2019/10/07/JS-%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84/"/>
      <url>/2019/10/07/JS-%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>讲讲JavaScript中的语句结构,接下来针对各语句举例说明，跟其他程序语言思想基本一致。<a id="more"></a></p><p>语句：</p><blockquote><span style="font-size: 10pt;">1，顺序结构。</span><span style="font-size: 10pt;"> 2，判断结构。</span><p style="padding-left: 30px;"><span style="font-size: 10pt;">代表语句：ifelse if</span></p><span style="font-size: 10pt;">3，选择结构。</span><p style="padding-left: 30px;"><span style="font-size: 10pt;">switch</span></p><span style="font-size: 10pt;">4，循环结构。</span><p style="padding-left: 30px;"><span style="font-size: 10pt;">while, do while, for</span></p><span style="font-size: 10pt;">5，其他语句。</span><p style="padding-left: 30px;"><span style="font-size: 10pt;">break:跳出选择,跳出循环</span></p><p style="padding-left: 30px;"><span style="font-size: 10pt;">continue:用于循环语句，结束本次循环继续下次循环</span></p></blockquote>&nbsp;<p>说明：</p><p><strong> 1，顺序结构</strong></p><pre class="lang:c decode:true"><span style="font-size: 10pt;">alert("1"); alert("2"); alert("3");</span></pre><p>按照顺序从上往下执行。</p><hr><p><strong>2,判断结构</strong></p><pre class="lang:c decode:true"><span style="font-size: 10pt;">var x = 5;if (2==x) {        //建议将常量放左边。这样出现错误会报错    alert("yes");}else{    alert("no");}</span></pre><p><strong>else if</strong></p><pre class="lang:c decode:true"><span style="font-size: 10pt;">if(x&gt;1)    alert("a");else if(x&gt;2)    alert("b");else if(x&gt;5)    alert("c");else    alert("d");</span></pre><hr><p><strong>3，选择结构 (都是先执行第一个case)</strong></p><pre class="lang:c decode:true">var x = "abc";switch(x){    case "aa":        alert("a");        break;    case "abc":        alert("b");        break;    default:        alert("c");        break;}</pre><hr><p><strong>4，循环结构(这里do while就不举例了)</strong></p><pre class="lang:c decode:true"><code class="javascript">var x = 1;document.write("&lt;font color='blue'&gt;");while(x&lt;10){    document.write("x="+x+"&lt;br/&gt;");//将数据直接写到当前得页面当中。    x++;}document.write("&lt;/font&gt;");</code></pre><p><strong>for循环</strong></p><pre class="lang:c decode:true">for(var x = 0;x &lt; 3;x++){    document.write("x="+x);}</pre><hr><p><strong>5，其他语句</strong></p><pre class="lang:c decode:true">w:for (var x = 0; x&lt;3; x++) {    for(var y = 0;y&lt;4;y++){        document.write("x="+x);        continue w;    //跳出当前循环    } }</pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]实现简单的计算器</title>
      <link href="/2019/10/07/JS-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2019/10/07/JS-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>通过获取两个文本的值，判断选择的运算符，根据运算符的不同，分别进行计算。<a id="more"></a></p><pre class="lang:js decode:true">&lt;%--  Created by IntelliJ IDEA.  User: 小信  Date: 2018/8/25  Time: 18:41  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;style&gt;    input{        font-size:1.4em;        width: 80px;        border-radius:4px;        border:1px solid #c8cccf;        color:#6a6f77;    }&lt;/style&gt;&lt;script type="text/javascript"&gt;    function add() {        var sum;        var num1 = parseInt(document.getElementById("num1").value);        var num2 = parseInt(document.getElementById("num2").value);        var symbol = document.getElementById("symbol").value;        switch (symbol) {            case '+':                sum = num1 + num2;                break;            case '-':                sum = num1 - num2;                break;            case '*':                sum = num1 * num2;                break;            case '/':                sum = num1 / num2;                break;        }        document.getElementById("num3").value = sum;    }&lt;/script&gt;&lt;body&gt;&lt;form&gt;    &lt;input type="text" id="num1" value=""&gt;    &lt;select id="symbol"&gt;        &lt;option value="+"&gt;+&lt;/option&gt;        &lt;option value="-"&gt;-&lt;/option&gt;        &lt;option value="*"&gt;*&lt;/option&gt;        &lt;option value="/"&gt;/&lt;/option&gt;    &lt;/select&gt;    &lt;input type="text" id="num2" value=""&gt;=    &lt;input type="text" id="num3" value=""&gt;    &lt;input type="button" value="计算" onclick="add()"&gt;    &lt;input type="reset" name="ret" value="清空"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>&nbsp;</p><p>样式如下</p><p><a href="http://image.xiaoxinyes.club/2018-8-30.gif" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/2018-8-30.gif" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]编写九九乘法表</title>
      <link href="/2019/10/07/JS-%E7%BC%96%E5%86%99%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/"/>
      <url>/2019/10/07/JS-%E7%BC%96%E5%86%99%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>学过其他语言的应该知道初级阶段写九九乘法表，下面用JavaScript实现。<a id="more"></a></p><p>代码如下</p><pre class="lang:javascript decode:true">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;link rel="stylesheet" type="text/css" href="table.css"&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type="text/javascript"&gt;        /*        练习：在页面显示一个99乘法表        */        document.write("&lt;table&gt;");        for(var i = 1;i &lt;= 9;i++){            document.write("&lt;tr&gt;");            for(var j = 1;j &lt;= i;j++){                document.write("&lt;td&gt;"+j+"*"+i+"="+j*i+"&lt;/td&gt;");            }            document.write("&lt;/tr&gt;");        }        document.write("&lt;/table&gt;");    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><hr><p>为了让显示得好看些，导入css,增加了边框效果。</p><p>代码如下</p><pre class="lang:javascript decode:true ">table ,table td{    border: solid #1690EE 1px;    width: 600px;}</pre><hr><p>效果如图</p><p><img src="http://image.xiaoxinyes.club/js_4_22_2.png" alt="爱生活爱语录"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]运算符和变量定义</title>
      <link href="/2019/10/07/JS-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89/"/>
      <url>/2019/10/07/JS-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>讲讲JavaScript中的变量定义和各种运算符。<a id="more"></a></p><p>jsz中定义变量用的关键字是：<strong>var</strong><br>** 定义变量。说下js是弱类型的。**</p><pre class="lang:c decode:true">var x = 4; //var不写也行，因为js是非严谨的语言，但建议严谨定义。 x = "abc"; //重新赋值为字符串abc。 x = 3.1415926; //赋值为小数，数字类型。 x = true; //赋值为boolean类型。 x = 'c'; //赋值为字符串。 alert("x="+x); //这是一个函数，将具体的参数通过对话框进行显示。</pre><p>&nbsp;</p><hr><p>接下来讲讲运算符。实际运算符跟我们学过得设计语言基本大同小异，也许只是表现形式不相同，但思想基本一致。</p><p>运算符：</p><blockquote><p><span style="font-size: 10pt;">1，算术运算符。</span></p><p><span style="font-size: 10pt;">+ - * / % ++ –</span></p><p><span style="font-size: 10pt;">2，赋值运算符。</span></p><p><span style="font-size: 10pt;">= += -= /= *= %=</span></p><p><span style="font-size: 10pt;">3，比较运算符。</span></p><p><span style="font-size: 10pt;">&gt; &lt; &gt;= &lt;= == != (运算完的结果false或者true)</span></p><p><span style="font-size: 10pt;">4，逻辑运算符。</span></p><p><span style="font-size: 10pt;">&amp;&amp; || ! (用来连接两个布尔型的表达式)</span></p><p><span style="font-size: 10pt;">5，位运算符。</span></p><p><span style="font-size: 10pt;">&amp; | ^ &gt;&gt; &lt;&lt; &gt;&gt;&gt; ~</span></p><p><span style="font-size: 10pt;">6，三元运算符。</span></p><p><span style="font-size: 10pt;">? :</span><br>接下来，分别对这些运算符举例：<br><strong><span style="font-size: 10pt;">1，算数运算符演示。</span></strong></p></blockquote><pre class="lang:c decode:true"> var a = 5600; alert("a="+a/100*100); //a=5600; var a1 = 3.4,b1 = 6.6; alert("a1+b1="+(a1+b1)); //a1+b1=10; alert("30"+1); //301; alert("30"-1); //29； alert(true+1); //2 //因为在js中false为0，或者null。非0，非null。为true，默认是1；</pre><hr><p><strong>2，赋值运算符</strong></p><pre class="lang:c decode:true">var i = 3; i+=2; alert(i);</pre><hr><p><strong><span style="font-size: 10pt;">3，比较运算符</span></strong></p><pre class="lang:c decode:true"> var z = 10; alert(z!=5);</pre><hr><p><strong><span style="font-size: 10pt;">4，逻辑运算符</span></strong></p><pre class="lang:c decode:true">var t = 5;alert(t&gt;1 &amp;&amp; t&lt;10);alert(!true);</pre><hr><p><strong><span style="font-size: 10pt;">5，位运算符</span></strong></p><pre class="lang:c decode:true">var c = 6;alert(c&amp;3); ///2alert(5^3^3); //5alert(c&gt;&gt;&gt;1); //6/2(1);alert(c&lt;&lt;2); //24</pre><hr><p><strong><span style="font-size: 10pt;">6，三元运算符</span></strong></p><pre class="lang:c decode:true"> alert(3&gt;100?100:200);</pre><hr><p><strong>其他小知识点：</strong><br><strong>undefined:未定义。</strong></p><pre class="lang:c decode:true">var xx;alert(xx); //undefinedalert(xx==undefined);</pre><p><strong>想要获取具体值得类型。可以通过typeof来完成。</strong></p><pre class="lang:c decode:true">alert(typeof(2.5)); //numberalert(typeof(true)); //booleanalert(typeof(78)); //numberalert(typeof('9')); //string</pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JS]Js和Html相结合方式</title>
      <link href="/2019/10/07/JS-Js%E5%92%8CHtml%E7%9B%B8%E7%BB%93%E5%90%88%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/10/07/JS-Js%E5%92%8CHtml%E7%9B%B8%E7%BB%93%E5%90%88%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="js和html相结合的方式"><a href="#js和html相结合的方式" class="headerlink" title="js和html相结合的方式"></a>js和html相结合的方式</h3><p>1，将javascript代码封装到&lt;script&gt;标签中。</p><p>2，将javascript代码封装到js文件中，并且通过&lt;script&gt;中的src属性进行导入。</p><p>注意：如果&lt;script&gt;标签中使用src属性，那么改标签中的javascript代码不会被执行。<br>所以通常导入js文件都是用单独&lt;script&gt;来完成。</p><pre class="lang:c decode:true"> &lt;!--导入一个js文件，使用src导入--&gt; &lt;script type="text/javascript" src="demo.js"&gt;&lt;/script&gt;</pre><p>&nbsp;</p><hr><pre class="lang:c decode:true"> &lt;!--封装javascript代码--&gt; &lt;script type="text/javascript"&gt; alert("hello javascript");</pre><p><a href="http://image.xiaoxinyes.club/js_jiehe.png" target="_blank" rel="noopener"><img src="http://image.xiaoxinyes.club/js_jiehe.png" alt="周信的个人博客"></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
